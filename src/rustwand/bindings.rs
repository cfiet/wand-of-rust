/* automatically generated by rust-bindgen */

use std::libc::*;
pub type ptrdiff_t = c_long;
pub type size_t = c_ulong;
pub type wchar_t = c_int;
pub type __u_char = c_uchar;
pub type __u_short = c_ushort;
pub type __u_int = c_uint;
pub type __u_long = c_ulong;
pub type __int8_t = c_schar;
pub type __uint8_t = c_uchar;
pub type __int16_t = c_short;
pub type __uint16_t = c_ushort;
pub type __int32_t = c_int;
pub type __uint32_t = c_uint;
pub type __int64_t = c_long;
pub type __uint64_t = c_ulong;
pub type __quad_t = c_long;
pub type __u_quad_t = c_ulong;
pub type __dev_t = c_ulong;
pub type __uid_t = c_uint;
pub type __gid_t = c_uint;
pub type __ino_t = c_ulong;
pub type __ino64_t = c_ulong;
pub type __mode_t = c_uint;
pub type __nlink_t = c_ulong;
pub type __off_t = c_long;
pub type __off64_t = c_long;
pub type __pid_t = c_int;
pub struct __fsid_t {
    __val: [c_int, ..2u],
}
pub type __clock_t = c_long;
pub type __rlim_t = c_ulong;
pub type __rlim64_t = c_ulong;
pub type __id_t = c_uint;
pub type __time_t = c_long;
pub type __useconds_t = c_uint;
pub type __suseconds_t = c_long;
pub type __daddr_t = c_int;
pub type __swblk_t = c_long;
pub type __key_t = c_int;
pub type __clockid_t = c_int;
pub type __timer_t = *mut c_void;
pub type __blksize_t = c_long;
pub type __blkcnt_t = c_long;
pub type __blkcnt64_t = c_long;
pub type __fsblkcnt_t = c_ulong;
pub type __fsblkcnt64_t = c_ulong;
pub type __fsfilcnt_t = c_ulong;
pub type __fsfilcnt64_t = c_ulong;
pub type __ssize_t = c_long;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut c_schar;
pub type __intptr_t = c_long;
pub type __socklen_t = c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
pub struct Union_Unnamed1 {
    data: [u32, ..1u],
}
impl Union_Unnamed1 {
    pub fn __wch(&mut self) -> *mut c_uint {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __wchb(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct __mbstate_t {
    __count: c_int,
    __value: Union_Unnamed1,
}
pub struct _G_fpos_t {
    __pos: __off_t,
    __state: __mbstate_t,
}
pub struct _G_fpos64_t {
    __pos: __off64_t,
    __state: __mbstate_t,
}
pub type _G_int16_t = c_short;
pub type _G_int32_t = c_int;
pub type _G_uint16_t = c_ushort;
pub type _G_uint32_t = c_uint;
pub type Struct__IO_jump_t = c_void;
pub type _IO_lock_t = c_void;
pub struct Struct__IO_marker {
    _next: *mut Struct__IO_marker,
    _sbuf: *mut Struct__IO_FILE,
    _pos: c_int,
}
pub type Enum___codecvt_result = c_uint;
pub static __codecvt_ok: c_uint = 0;
pub static __codecvt_partial: c_uint = 1;
pub static __codecvt_error: c_uint = 2;
pub static __codecvt_noconv: c_uint = 3;
pub struct Struct__IO_FILE {
    _flags: c_int,
    _IO_read_ptr: *mut c_schar,
    _IO_read_end: *mut c_schar,
    _IO_read_base: *mut c_schar,
    _IO_write_base: *mut c_schar,
    _IO_write_ptr: *mut c_schar,
    _IO_write_end: *mut c_schar,
    _IO_buf_base: *mut c_schar,
    _IO_buf_end: *mut c_schar,
    _IO_save_base: *mut c_schar,
    _IO_backup_base: *mut c_schar,
    _IO_save_end: *mut c_schar,
    _markers: *mut Struct__IO_marker,
    _chain: *mut Struct__IO_FILE,
    _fileno: c_int,
    _flags2: c_int,
    _old_offset: __off_t,
    _cur_column: c_ushort,
    _vtable_offset: c_schar,
    _shortbuf: [c_schar, ..1u],
    _lock: *mut _IO_lock_t,
    _offset: __off64_t,
    __pad1: *mut c_void,
    __pad2: *mut c_void,
    __pad3: *mut c_void,
    __pad4: *mut c_void,
    __pad5: size_t,
    _mode: c_int,
    _unused2: [c_schar, ..20u],
}
pub type _IO_FILE = Struct__IO_FILE;
pub type Struct__IO_FILE_plus = c_void;
pub type __io_read_fn = c_void;
pub type __io_write_fn = c_void;
pub type __io_seek_fn = c_void;
pub type __io_close_fn = c_void;
pub type cookie_read_function_t = __io_read_fn;
pub type cookie_write_function_t = __io_write_fn;
pub type cookie_seek_function_t = __io_seek_fn;
pub type cookie_close_function_t = __io_close_fn;
pub struct _IO_cookie_io_functions_t {
    read: *mut extern "C" fn
                   (arg1: *mut c_void, arg2: *mut c_schar, arg3: size_t)
                   -> __ssize_t,
    write: *mut extern "C" fn(arg1: *mut c_void, arg2: *c_schar, arg3: size_t)
                    -> __ssize_t,
    seek: *mut extern "C" fn
                   (arg1: *mut c_void, arg2: *mut __off64_t, arg3: c_int)
                   -> c_int,
    close: *mut extern "C" fn(arg1: *mut c_void) -> c_int,
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type Struct__IO_cookie_file = c_void;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type fpos64_t = _G_fpos64_t;
pub type Struct_obstack = c_void;
pub struct Union_wait {
    data: [u32, ..1u],
}
impl Union_wait {
    pub fn w_status(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __wait_terminated(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __wait_stopped(&mut self) -> *mut Struct_Unnamed3 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed2 {
    __w_termsig: c_uint,
    __w_coredump: c_uint,
    __w_retcode: c_uint,
    unnamed_field1: c_uint,
}
pub struct Struct_Unnamed3 {
    __w_stopval: c_uint,
    __w_stopsig: c_uint,
    unnamed_field1: c_uint,
}
pub struct __WAIT_STATUS {
    data: [u64, ..1u],
}
impl __WAIT_STATUS {
    pub fn __uptr(&mut self) -> *mut *mut Union_wait {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __iptr(&mut self) -> *mut *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct div_t {
    quot: c_int,
    rem: c_int,
}
pub struct ldiv_t {
    quot: c_long,
    rem: c_long,
}
pub struct lldiv_t {
    quot: c_longlong,
    rem: c_longlong,
}
pub struct Struct___locale_struct {
    __locales: [*mut Struct___locale_data, ..13u],
    __ctype_b: *c_ushort,
    __ctype_tolower: *c_int,
    __ctype_toupper: *c_int,
    __names: [*c_schar, ..13u],
}
pub type Struct___locale_data = c_void;
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = c_ulong;
pub type ushort = c_ushort;
pub type _uint = c_uint;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type u_int8_t = c_uchar;
pub type u_int16_t = c_ushort;
pub type u_int32_t = c_uint;
pub type u_int64_t = c_ulong;
pub type register_t = c_long;
pub type __sig_atomic_t = c_int;
pub struct __sigset_t {
    __val: [c_ulong, ..16u],
}
pub type sigset_t = __sigset_t;
pub struct Struct_timespec {
    tv_sec: __time_t,
    tv_nsec: c_long,
}
pub struct Struct_timeval {
    tv_sec: __time_t,
    tv_usec: __suseconds_t,
}
pub type __fd_mask = c_long;
pub struct fd_set {
    fds_bits: [__fd_mask, ..16u],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
pub type pthread_t = c_ulong;
pub struct pthread_attr_t {
    data: [u64, ..7u],
}
impl pthread_attr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct___pthread_internal_list {
    __prev: *mut Struct___pthread_internal_list,
    __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
pub struct Struct___pthread_mutex_s {
    __lock: c_int,
    __count: c_uint,
    __owner: c_int,
    __nusers: c_uint,
    __kind: c_int,
    __spins: c_int,
    __list: __pthread_list_t,
}
pub struct pthread_mutex_t {
    data: [u64, ..5u],
}
impl pthread_mutex_t {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..40u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_mutexattr_t {
    data: [u32, ..1u],
}
impl pthread_mutexattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed4 {
    __lock: c_int,
    __futex: c_uint,
    __total_seq: c_ulonglong,
    __wakeup_seq: c_ulonglong,
    __woken_seq: c_ulonglong,
    __mutex: *mut c_void,
    __nwaiters: c_uint,
    __broadcast_seq: c_uint,
}
pub struct pthread_cond_t {
    data: [u64, ..6u],
}
impl pthread_cond_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed4 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..48u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_longlong {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_condattr_t {
    data: [u32, ..1u],
}
impl pthread_condattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type pthread_key_t = c_uint;
pub type pthread_once_t = c_int;
pub struct Struct_Unnamed5 {
    __lock: c_int,
    __nr_readers: c_uint,
    __readers_wakeup: c_uint,
    __writer_wakeup: c_uint,
    __nr_readers_queued: c_uint,
    __nr_writers_queued: c_uint,
    __writer: c_int,
    __shared: c_int,
    __pad1: c_ulong,
    __pad2: c_ulong,
    __flags: c_uint,
}
pub struct pthread_rwlock_t {
    data: [u64, ..7u],
}
impl pthread_rwlock_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed5 {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __size(&mut self) -> *mut [c_schar, ..56u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_rwlockattr_t {
    data: [u64, ..1u],
}
impl pthread_rwlockattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..8u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type pthread_spinlock_t = c_int;
pub struct pthread_barrier_t {
    data: [u64, ..4u],
}
impl pthread_barrier_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..32u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_long {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct pthread_barrierattr_t {
    data: [u32, ..1u],
}
impl pthread_barrierattr_t {
    pub fn __size(&mut self) -> *mut [c_schar, ..4u] {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn __align(&mut self) -> *mut c_int {
        unsafe { ::std::cast::transmute(::std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_random_data {
    fptr: *mut int32_t,
    rptr: *mut int32_t,
    state: *mut int32_t,
    rand_type: c_int,
    rand_deg: c_int,
    rand_sep: c_int,
    end_ptr: *mut int32_t,
}
pub struct Struct_drand48_data {
    __x: [c_ushort, ..3u],
    __old_x: [c_ushort, ..3u],
    __c: c_ushort,
    __init: c_ushort,
    __a: c_ulonglong,
}
pub type __compar_fn_t = extern "C" fn(arg1: *c_void, arg2: *c_void) -> c_int;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t =
    extern "C" fn(arg1: *c_void, arg2: *c_void, arg3: *mut c_void) -> c_int;
pub type float_t = c_float;
pub type double_t = c_double;
pub type Enum_Unnamed6 = c_uint;
pub static FP_NAN: c_uint = 0;
pub static FP_INFINITE: c_uint = 1;
pub static FP_ZERO: c_uint = 2;
pub static FP_SUBNORMAL: c_uint = 3;
pub static FP_NORMAL: c_uint = 4;
pub type _LIB_VERSION_TYPE = c_int;
pub static _IEEE_: c_int = -1;
pub static _SVID_: c_int = 0;
pub static _XOPEN_: c_int = 1;
pub static _POSIX_: c_int = 2;
pub static _ISOC_: c_int = 3;
pub struct Struct_exception {
    _type: c_int,
    name: *mut c_schar,
    arg1: c_double,
    arg2: c_double,
    retval: c_double,
}
pub struct Struct_timex {
    modes: c_uint,
    offset: c_long,
    freq: c_long,
    maxerror: c_long,
    esterror: c_long,
    status: c_int,
    constant: c_long,
    precision: c_long,
    tolerance: c_long,
    time: Struct_timeval,
    tick: c_long,
    ppsfreq: c_long,
    jitter: c_long,
    shift: c_int,
    stabil: c_long,
    jitcnt: c_long,
    calcnt: c_long,
    errcnt: c_long,
    stbcnt: c_long,
    tai: c_int,
    unnamed_field1: c_int,
    unnamed_field2: c_int,
    unnamed_field3: c_int,
    unnamed_field4: c_int,
    unnamed_field5: c_int,
    unnamed_field6: c_int,
    unnamed_field7: c_int,
    unnamed_field8: c_int,
    unnamed_field9: c_int,
    unnamed_field10: c_int,
    unnamed_field11: c_int,
}
pub struct Struct_tm {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: *c_schar,
}
pub struct Struct_itimerspec {
    it_interval: Struct_timespec,
    it_value: Struct_timespec,
}
pub type Struct_sigevent = c_void;
pub type Struct__MagickWand = c_void;
pub type MagickWand = Struct__MagickWand;
pub type MagickRealType = c_float;
pub type SignedQuantum = ssize_t;
pub type Quantum = c_ushort;
pub type MagickStatusType = c_uint;
pub type MagickOffsetType = c_longlong;
pub type MagickSizeType = c_ulonglong;
pub type QuantumAny = MagickSizeType;
pub type ChannelType = c_uint;
pub static UndefinedChannel: c_uint = 0;
pub static RedChannel: c_uint = 1;
pub static GrayChannel: c_uint = 1;
pub static CyanChannel: c_uint = 1;
pub static GreenChannel: c_uint = 2;
pub static MagentaChannel: c_uint = 2;
pub static BlueChannel: c_uint = 4;
pub static YellowChannel: c_uint = 4;
pub static AlphaChannel: c_uint = 8;
pub static OpacityChannel: c_uint = 8;
pub static MatteChannel: c_uint = 8;
pub static BlackChannel: c_uint = 32;
pub static IndexChannel: c_uint = 32;
pub static CompositeChannels: c_uint = 47;
pub static AllChannels: c_uint = 134217727;
pub static TrueAlphaChannel: c_uint = 64;
pub static RGBChannels: c_uint = 128;
pub static GrayChannels: c_uint = 128;
pub static SyncChannels: c_uint = 256;
pub static DefaultChannels: c_uint = 134217719;
pub type ClassType = c_uint;
pub static UndefinedClass: c_uint = 0;
pub static DirectClass: c_uint = 1;
pub static PseudoClass: c_uint = 2;
pub type MagickBooleanType = c_uint;
pub static MagickFalse: c_uint = 0;
pub static MagickTrue: c_uint = 1;
pub type Struct__BlobInfo = c_void;
pub type BlobInfo = Struct__BlobInfo;
pub type ExceptionInfo = Struct__ExceptionInfo;
pub type Image = Struct__Image;
pub type ImageInfo = Struct__ImageInfo;
pub type GeometryFlags = c_uint;
pub static NoValue: c_uint = 0;
pub static XValue: c_uint = 1;
pub static XiValue: c_uint = 1;
pub static YValue: c_uint = 2;
pub static PsiValue: c_uint = 2;
pub static WidthValue: c_uint = 4;
pub static RhoValue: c_uint = 4;
pub static HeightValue: c_uint = 8;
pub static SigmaValue: c_uint = 8;
pub static ChiValue: c_uint = 16;
pub static XiNegative: c_uint = 32;
pub static XNegative: c_uint = 32;
pub static PsiNegative: c_uint = 64;
pub static YNegative: c_uint = 64;
pub static ChiNegative: c_uint = 128;
pub static PercentValue: c_uint = 4096;
pub static AspectValue: c_uint = 8192;
pub static NormalizeValue: c_uint = 8192;
pub static LessValue: c_uint = 16384;
pub static GreaterValue: c_uint = 32768;
pub static MinimumValue: c_uint = 65536;
pub static CorrelateNormalizeValue: c_uint = 65536;
pub static AreaValue: c_uint = 131072;
pub static DecimalValue: c_uint = 262144;
pub static SeparatorValue: c_uint = 524288;
pub static AllValues: c_uint = 2147483647;
pub type GravityType = c_uint;
pub static UndefinedGravity: c_uint = 0;
pub static ForgetGravity: c_uint = 0;
pub static NorthWestGravity: c_uint = 1;
pub static NorthGravity: c_uint = 2;
pub static NorthEastGravity: c_uint = 3;
pub static WestGravity: c_uint = 4;
pub static CenterGravity: c_uint = 5;
pub static EastGravity: c_uint = 6;
pub static SouthWestGravity: c_uint = 7;
pub static SouthGravity: c_uint = 8;
pub static SouthEastGravity: c_uint = 9;
pub static StaticGravity: c_uint = 10;
pub struct Struct__AffineMatrix {
    sx: c_double,
    rx: c_double,
    ry: c_double,
    sy: c_double,
    tx: c_double,
    ty: c_double,
}
pub type AffineMatrix = Struct__AffineMatrix;
pub struct Struct__GeometryInfo {
    rho: c_double,
    sigma: c_double,
    xi: c_double,
    psi: c_double,
    chi: c_double,
}
pub type GeometryInfo = Struct__GeometryInfo;
pub struct Struct__OffsetInfo {
    x: ssize_t,
    y: ssize_t,
}
pub type OffsetInfo = Struct__OffsetInfo;
pub struct Struct__RectangleInfo {
    width: size_t,
    height: size_t,
    x: ssize_t,
    y: ssize_t,
}
pub type RectangleInfo = Struct__RectangleInfo;
pub type ColorspaceType = c_uint;
pub static UndefinedColorspace: c_uint = 0;
pub static RGBColorspace: c_uint = 1;
pub static GRAYColorspace: c_uint = 2;
pub static TransparentColorspace: c_uint = 3;
pub static OHTAColorspace: c_uint = 4;
pub static LabColorspace: c_uint = 5;
pub static XYZColorspace: c_uint = 6;
pub static YCbCrColorspace: c_uint = 7;
pub static YCCColorspace: c_uint = 8;
pub static YIQColorspace: c_uint = 9;
pub static YPbPrColorspace: c_uint = 10;
pub static YUVColorspace: c_uint = 11;
pub static CMYKColorspace: c_uint = 12;
pub static sRGBColorspace: c_uint = 13;
pub static HSBColorspace: c_uint = 14;
pub static HSLColorspace: c_uint = 15;
pub static HWBColorspace: c_uint = 16;
pub static Rec601LumaColorspace: c_uint = 17;
pub static Rec601YCbCrColorspace: c_uint = 18;
pub static Rec709LumaColorspace: c_uint = 19;
pub static Rec709YCbCrColorspace: c_uint = 20;
pub static LogColorspace: c_uint = 21;
pub static CMYColorspace: c_uint = 22;
pub static LuvColorspace: c_uint = 23;
pub static HCLColorspace: c_uint = 24;
pub static LCHColorspace: c_uint = 25;
pub static LMSColorspace: c_uint = 26;
pub static LCHabColorspace: c_uint = 27;
pub static LCHuvColorspace: c_uint = 28;
pub static scRGBColorspace: c_uint = 29;
pub static HSIColorspace: c_uint = 30;
pub static HSVColorspace: c_uint = 31;
pub static HCLpColorspace: c_uint = 32;
pub static YDbDrColorspace: c_uint = 33;
pub type StorageType = c_uint;
pub static UndefinedPixel: c_uint = 0;
pub static CharPixel: c_uint = 1;
pub static DoublePixel: c_uint = 2;
pub static FloatPixel: c_uint = 3;
pub static IntegerPixel: c_uint = 4;
pub static LongPixel: c_uint = 5;
pub static QuantumPixel: c_uint = 6;
pub static ShortPixel: c_uint = 7;
pub type InterpolatePixelMethod = c_uint;
pub static UndefinedInterpolatePixel: c_uint = 0;
pub static AverageInterpolatePixel: c_uint = 1;
pub static BicubicInterpolatePixel: c_uint = 2;
pub static BilinearInterpolatePixel: c_uint = 3;
pub static FilterInterpolatePixel: c_uint = 4;
pub static IntegerInterpolatePixel: c_uint = 5;
pub static MeshInterpolatePixel: c_uint = 6;
pub static NearestNeighborInterpolatePixel: c_uint = 7;
pub static SplineInterpolatePixel: c_uint = 8;
pub static Average9InterpolatePixel: c_uint = 9;
pub static Average16InterpolatePixel: c_uint = 10;
pub static BlendInterpolatePixel: c_uint = 11;
pub static BackgroundInterpolatePixel: c_uint = 12;
pub static CatromInterpolatePixel: c_uint = 13;
pub type PixelComponent = c_uint;
pub static PixelRed: c_uint = 0;
pub static PixelCyan: c_uint = 0;
pub static PixelGray: c_uint = 0;
pub static PixelY: c_uint = 0;
pub static PixelGreen: c_uint = 1;
pub static PixelMagenta: c_uint = 1;
pub static PixelCb: c_uint = 1;
pub static PixelBlue: c_uint = 2;
pub static PixelYellow: c_uint = 2;
pub static PixelCr: c_uint = 2;
pub static PixelAlpha: c_uint = 3;
pub static PixelBlack: c_uint = 4;
pub static PixelIndex: c_uint = 4;
pub static MaskPixelComponent: c_uint = 5;
pub type PixelIntensityMethod = c_uint;
pub static UndefinedPixelIntensityMethod: c_uint = 0;
pub static AveragePixelIntensityMethod: c_uint = 1;
pub static BrightnessPixelIntensityMethod: c_uint = 2;
pub static LightnessPixelIntensityMethod: c_uint = 3;
pub static Rec601LumaPixelIntensityMethod: c_uint = 4;
pub static Rec601LuminancePixelIntensityMethod: c_uint = 5;
pub static Rec709LumaPixelIntensityMethod: c_uint = 6;
pub static Rec709LuminancePixelIntensityMethod: c_uint = 7;
pub static RMSPixelIntensityMethod: c_uint = 8;
pub static MSPixelIntensityMethod: c_uint = 9;
pub struct Struct__DoublePixelPacket {
    red: c_double,
    green: c_double,
    blue: c_double,
    opacity: c_double,
    index: c_double,
}
pub type DoublePixelPacket = Struct__DoublePixelPacket;
pub struct Struct__LongPixelPacket {
    red: c_uint,
    green: c_uint,
    blue: c_uint,
    opacity: c_uint,
    index: c_uint,
}
pub type LongPixelPacket = Struct__LongPixelPacket;
pub struct Struct__MagickPixelPacket {
    storage_class: ClassType,
    colorspace: ColorspaceType,
    matte: MagickBooleanType,
    fuzz: c_double,
    depth: size_t,
    red: MagickRealType,
    green: MagickRealType,
    blue: MagickRealType,
    opacity: MagickRealType,
    index: MagickRealType,
}
pub type MagickPixelPacket = Struct__MagickPixelPacket;
pub type IndexPacket = Quantum;
pub struct Struct__PixelPacket {
    blue: Quantum,
    green: Quantum,
    red: Quantum,
    opacity: Quantum,
}
pub type PixelPacket = Struct__PixelPacket;
pub struct Struct__QuantumPixelPacket {
    red: Quantum,
    green: Quantum,
    blue: Quantum,
    opacity: Quantum,
    index: Quantum,
}
pub type QuantumPixelPacket = Struct__QuantumPixelPacket;
pub type Struct__CacheView = c_void;
pub type CacheView_ = Struct__CacheView;
pub type Struct_SemaphoreInfo = c_void;
pub type SemaphoreInfo = Struct_SemaphoreInfo;
pub type ExceptionType = c_uint;
pub static UndefinedException: c_uint = 0;
pub static WarningException: c_uint = 300;
pub static ResourceLimitWarning: c_uint = 300;
pub static TypeWarning: c_uint = 305;
pub static OptionWarning: c_uint = 310;
pub static DelegateWarning: c_uint = 315;
pub static MissingDelegateWarning: c_uint = 320;
pub static CorruptImageWarning: c_uint = 325;
pub static FileOpenWarning: c_uint = 330;
pub static BlobWarning: c_uint = 335;
pub static StreamWarning: c_uint = 340;
pub static CacheWarning: c_uint = 345;
pub static CoderWarning: c_uint = 350;
pub static FilterWarning: c_uint = 352;
pub static ModuleWarning: c_uint = 355;
pub static DrawWarning: c_uint = 360;
pub static ImageWarning: c_uint = 365;
pub static WandWarning: c_uint = 370;
pub static RandomWarning: c_uint = 375;
pub static XServerWarning: c_uint = 380;
pub static MonitorWarning: c_uint = 385;
pub static RegistryWarning: c_uint = 390;
pub static ConfigureWarning: c_uint = 395;
pub static PolicyWarning: c_uint = 399;
pub static ErrorException: c_uint = 400;
pub static ResourceLimitError: c_uint = 400;
pub static TypeError: c_uint = 405;
pub static OptionError: c_uint = 410;
pub static DelegateError: c_uint = 415;
pub static MissingDelegateError: c_uint = 420;
pub static CorruptImageError: c_uint = 425;
pub static FileOpenError: c_uint = 430;
pub static BlobError: c_uint = 435;
pub static StreamError: c_uint = 440;
pub static CacheError: c_uint = 445;
pub static CoderError: c_uint = 450;
pub static FilterError: c_uint = 452;
pub static ModuleError: c_uint = 455;
pub static DrawError: c_uint = 460;
pub static ImageError: c_uint = 465;
pub static WandError: c_uint = 470;
pub static RandomError: c_uint = 475;
pub static XServerError: c_uint = 480;
pub static MonitorError: c_uint = 485;
pub static RegistryError: c_uint = 490;
pub static ConfigureError: c_uint = 495;
pub static PolicyError: c_uint = 499;
pub static FatalErrorException: c_uint = 700;
pub static ResourceLimitFatalError: c_uint = 700;
pub static TypeFatalError: c_uint = 705;
pub static OptionFatalError: c_uint = 710;
pub static DelegateFatalError: c_uint = 715;
pub static MissingDelegateFatalError: c_uint = 720;
pub static CorruptImageFatalError: c_uint = 725;
pub static FileOpenFatalError: c_uint = 730;
pub static BlobFatalError: c_uint = 735;
pub static StreamFatalError: c_uint = 740;
pub static CacheFatalError: c_uint = 745;
pub static CoderFatalError: c_uint = 750;
pub static FilterFatalError: c_uint = 752;
pub static ModuleFatalError: c_uint = 755;
pub static DrawFatalError: c_uint = 760;
pub static ImageFatalError: c_uint = 765;
pub static WandFatalError: c_uint = 770;
pub static RandomFatalError: c_uint = 775;
pub static XServerFatalError: c_uint = 780;
pub static MonitorFatalError: c_uint = 785;
pub static RegistryFatalError: c_uint = 790;
pub static ConfigureFatalError: c_uint = 795;
pub static PolicyFatalError: c_uint = 799;
pub struct Struct__ExceptionInfo {
    severity: ExceptionType,
    error_number: c_int,
    reason: *mut c_schar,
    description: *mut c_schar,
    exceptions: *mut c_void,
    relinquish: MagickBooleanType,
    semaphore: *mut SemaphoreInfo,
    signature: size_t,
}
pub type ErrorHandler =
    extern "C" fn(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
pub type FatalErrorHandler =
    extern "C" fn(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
pub type WarningHandler =
    extern "C" fn(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
pub type ComplianceType = c_uint;
pub static UndefinedCompliance: c_uint = 0;
pub static NoCompliance: c_uint = 0;
pub static SVGCompliance: c_uint = 1;
pub static X11Compliance: c_uint = 2;
pub static XPMCompliance: c_uint = 4;
pub static AllCompliance: c_uint = 2147483647;
pub struct Struct__ColorInfo {
    path: *mut c_schar,
    name: *mut c_schar,
    compliance: ComplianceType,
    color: MagickPixelPacket,
    exempt: MagickBooleanType,
    stealth: MagickBooleanType,
    previous: *mut Struct__ColorInfo,
    next: *mut Struct__ColorInfo,
    signature: size_t,
}
pub type ColorInfo = Struct__ColorInfo;
pub struct Struct__ErrorInfo {
    mean_error_per_pixel: c_double,
    normalized_mean_error: c_double,
    normalized_maximum_error: c_double,
}
pub type ErrorInfo = Struct__ErrorInfo;
pub type AlphaChannelType = c_uint;
pub static UndefinedAlphaChannel: c_uint = 0;
pub static ActivateAlphaChannel: c_uint = 1;
pub static BackgroundAlphaChannel: c_uint = 2;
pub static CopyAlphaChannel: c_uint = 3;
pub static DeactivateAlphaChannel: c_uint = 4;
pub static ExtractAlphaChannel: c_uint = 5;
pub static OpaqueAlphaChannel: c_uint = 6;
pub static ResetAlphaChannel: c_uint = 7;
pub static SetAlphaChannel: c_uint = 8;
pub static ShapeAlphaChannel: c_uint = 9;
pub static TransparentAlphaChannel: c_uint = 10;
pub static FlattenAlphaChannel: c_uint = 11;
pub static RemoveAlphaChannel: c_uint = 12;
pub type ImageType = c_uint;
pub static UndefinedType: c_uint = 0;
pub static BilevelType: c_uint = 1;
pub static GrayscaleType: c_uint = 2;
pub static GrayscaleMatteType: c_uint = 3;
pub static PaletteType: c_uint = 4;
pub static PaletteMatteType: c_uint = 5;
pub static TrueColorType: c_uint = 6;
pub static TrueColorMatteType: c_uint = 7;
pub static ColorSeparationType: c_uint = 8;
pub static ColorSeparationMatteType: c_uint = 9;
pub static OptimizeType: c_uint = 10;
pub static PaletteBilevelMatteType: c_uint = 11;
pub type InterlaceType = c_uint;
pub static UndefinedInterlace: c_uint = 0;
pub static NoInterlace: c_uint = 1;
pub static LineInterlace: c_uint = 2;
pub static PlaneInterlace: c_uint = 3;
pub static PartitionInterlace: c_uint = 4;
pub static GIFInterlace: c_uint = 5;
pub static JPEGInterlace: c_uint = 6;
pub static PNGInterlace: c_uint = 7;
pub type OrientationType = c_uint;
pub static UndefinedOrientation: c_uint = 0;
pub static TopLeftOrientation: c_uint = 1;
pub static TopRightOrientation: c_uint = 2;
pub static BottomRightOrientation: c_uint = 3;
pub static BottomLeftOrientation: c_uint = 4;
pub static LeftTopOrientation: c_uint = 5;
pub static RightTopOrientation: c_uint = 6;
pub static RightBottomOrientation: c_uint = 7;
pub static LeftBottomOrientation: c_uint = 8;
pub type ResolutionType = c_uint;
pub static UndefinedResolution: c_uint = 0;
pub static PixelsPerInchResolution: c_uint = 1;
pub static PixelsPerCentimeterResolution: c_uint = 2;
pub struct Struct__PrimaryInfo {
    x: c_double,
    y: c_double,
    z: c_double,
}
pub type PrimaryInfo = Struct__PrimaryInfo;
pub struct Struct__SegmentInfo {
    x1: c_double,
    y1: c_double,
    x2: c_double,
    y2: c_double,
}
pub type SegmentInfo = Struct__SegmentInfo;
pub type TransmitType = c_uint;
pub static UndefinedTransmitType: c_uint = 0;
pub static FileTransmitType: c_uint = 1;
pub static BlobTransmitType: c_uint = 2;
pub static StreamTransmitType: c_uint = 3;
pub static ImageTransmitType: c_uint = 4;
pub struct Struct__ChromaticityInfo {
    red_primary: PrimaryInfo,
    green_primary: PrimaryInfo,
    blue_primary: PrimaryInfo,
    white_point: PrimaryInfo,
}
pub type ChromaticityInfo = Struct__ChromaticityInfo;
pub type StreamHandler =
    extern "C" fn(arg1: *Image, arg2: *c_void, arg3: size_t) -> size_t;
pub type MapMode = c_uint;
pub static ReadMode: c_uint = 0;
pub static WriteMode: c_uint = 1;
pub static IOMode: c_uint = 2;
pub type VirtualPixelMethod = c_uint;
pub static UndefinedVirtualPixelMethod: c_uint = 0;
pub static BackgroundVirtualPixelMethod: c_uint = 1;
pub static ConstantVirtualPixelMethod: c_uint = 2;
pub static DitherVirtualPixelMethod: c_uint = 3;
pub static EdgeVirtualPixelMethod: c_uint = 4;
pub static MirrorVirtualPixelMethod: c_uint = 5;
pub static RandomVirtualPixelMethod: c_uint = 6;
pub static TileVirtualPixelMethod: c_uint = 7;
pub static TransparentVirtualPixelMethod: c_uint = 8;
pub static MaskVirtualPixelMethod: c_uint = 9;
pub static BlackVirtualPixelMethod: c_uint = 10;
pub static GrayVirtualPixelMethod: c_uint = 11;
pub static WhiteVirtualPixelMethod: c_uint = 12;
pub static HorizontalTileVirtualPixelMethod: c_uint = 13;
pub static VerticalTileVirtualPixelMethod: c_uint = 14;
pub static HorizontalTileEdgeVirtualPixelMethod: c_uint = 15;
pub static VerticalTileEdgeVirtualPixelMethod: c_uint = 16;
pub static CheckerTileVirtualPixelMethod: c_uint = 17;
pub type CacheView = Struct__CacheView;
pub type CompositeOperator = c_uint;
pub static UndefinedCompositeOp: c_uint = 0;
pub static NoCompositeOp: c_uint = 1;
pub static ModulusAddCompositeOp: c_uint = 2;
pub static AtopCompositeOp: c_uint = 3;
pub static BlendCompositeOp: c_uint = 4;
pub static BumpmapCompositeOp: c_uint = 5;
pub static ChangeMaskCompositeOp: c_uint = 6;
pub static ClearCompositeOp: c_uint = 7;
pub static ColorBurnCompositeOp: c_uint = 8;
pub static ColorDodgeCompositeOp: c_uint = 9;
pub static ColorizeCompositeOp: c_uint = 10;
pub static CopyBlackCompositeOp: c_uint = 11;
pub static CopyBlueCompositeOp: c_uint = 12;
pub static CopyCompositeOp: c_uint = 13;
pub static CopyCyanCompositeOp: c_uint = 14;
pub static CopyGreenCompositeOp: c_uint = 15;
pub static CopyMagentaCompositeOp: c_uint = 16;
pub static CopyOpacityCompositeOp: c_uint = 17;
pub static CopyRedCompositeOp: c_uint = 18;
pub static CopyYellowCompositeOp: c_uint = 19;
pub static DarkenCompositeOp: c_uint = 20;
pub static DstAtopCompositeOp: c_uint = 21;
pub static DstCompositeOp: c_uint = 22;
pub static DstInCompositeOp: c_uint = 23;
pub static DstOutCompositeOp: c_uint = 24;
pub static DstOverCompositeOp: c_uint = 25;
pub static DifferenceCompositeOp: c_uint = 26;
pub static DisplaceCompositeOp: c_uint = 27;
pub static DissolveCompositeOp: c_uint = 28;
pub static ExclusionCompositeOp: c_uint = 29;
pub static HardLightCompositeOp: c_uint = 30;
pub static HueCompositeOp: c_uint = 31;
pub static InCompositeOp: c_uint = 32;
pub static LightenCompositeOp: c_uint = 33;
pub static LinearLightCompositeOp: c_uint = 34;
pub static LuminizeCompositeOp: c_uint = 35;
pub static MinusDstCompositeOp: c_uint = 36;
pub static ModulateCompositeOp: c_uint = 37;
pub static MultiplyCompositeOp: c_uint = 38;
pub static OutCompositeOp: c_uint = 39;
pub static OverCompositeOp: c_uint = 40;
pub static OverlayCompositeOp: c_uint = 41;
pub static PlusCompositeOp: c_uint = 42;
pub static ReplaceCompositeOp: c_uint = 43;
pub static SaturateCompositeOp: c_uint = 44;
pub static ScreenCompositeOp: c_uint = 45;
pub static SoftLightCompositeOp: c_uint = 46;
pub static SrcAtopCompositeOp: c_uint = 47;
pub static SrcCompositeOp: c_uint = 48;
pub static SrcInCompositeOp: c_uint = 49;
pub static SrcOutCompositeOp: c_uint = 50;
pub static SrcOverCompositeOp: c_uint = 51;
pub static ModulusSubtractCompositeOp: c_uint = 52;
pub static ThresholdCompositeOp: c_uint = 53;
pub static XorCompositeOp: c_uint = 54;
pub static DivideDstCompositeOp: c_uint = 55;
pub static DistortCompositeOp: c_uint = 56;
pub static BlurCompositeOp: c_uint = 57;
pub static PegtopLightCompositeOp: c_uint = 58;
pub static VividLightCompositeOp: c_uint = 59;
pub static PinLightCompositeOp: c_uint = 60;
pub static LinearDodgeCompositeOp: c_uint = 61;
pub static LinearBurnCompositeOp: c_uint = 62;
pub static MathematicsCompositeOp: c_uint = 63;
pub static DivideSrcCompositeOp: c_uint = 64;
pub static MinusSrcCompositeOp: c_uint = 65;
pub static DarkenIntensityCompositeOp: c_uint = 66;
pub static LightenIntensityCompositeOp: c_uint = 67;
pub type CompressionType = c_uint;
pub static UndefinedCompression: c_uint = 0;
pub static NoCompression: c_uint = 1;
pub static BZipCompression: c_uint = 2;
pub static DXT1Compression: c_uint = 3;
pub static DXT3Compression: c_uint = 4;
pub static DXT5Compression: c_uint = 5;
pub static FaxCompression: c_uint = 6;
pub static Group4Compression: c_uint = 7;
pub static JPEGCompression: c_uint = 8;
pub static JPEG2000Compression: c_uint = 9;
pub static LosslessJPEGCompression: c_uint = 10;
pub static LZWCompression: c_uint = 11;
pub static RLECompression: c_uint = 12;
pub static ZipCompression: c_uint = 13;
pub static ZipSCompression: c_uint = 14;
pub static PizCompression: c_uint = 15;
pub static Pxr24Compression: c_uint = 16;
pub static B44Compression: c_uint = 17;
pub static B44ACompression: c_uint = 18;
pub static LZMACompression: c_uint = 19;
pub static JBIG1Compression: c_uint = 20;
pub static JBIG2Compression: c_uint = 21;
pub type Struct__Ascii85Info = c_void;
pub type Ascii85Info = Struct__Ascii85Info;
pub type KernelInfoType = c_uint;
pub static UndefinedKernel: c_uint = 0;
pub static UnityKernel: c_uint = 1;
pub static GaussianKernel: c_uint = 2;
pub static DoGKernel: c_uint = 3;
pub static LoGKernel: c_uint = 4;
pub static BlurKernel: c_uint = 5;
pub static CometKernel: c_uint = 6;
pub static LaplacianKernel: c_uint = 7;
pub static SobelKernel: c_uint = 8;
pub static FreiChenKernel: c_uint = 9;
pub static RobertsKernel: c_uint = 10;
pub static PrewittKernel: c_uint = 11;
pub static CompassKernel: c_uint = 12;
pub static KirschKernel: c_uint = 13;
pub static DiamondKernel: c_uint = 14;
pub static SquareKernel: c_uint = 15;
pub static RectangleKernel: c_uint = 16;
pub static OctagonKernel: c_uint = 17;
pub static DiskKernel: c_uint = 18;
pub static PlusKernel: c_uint = 19;
pub static CrossKernel: c_uint = 20;
pub static RingKernel: c_uint = 21;
pub static PeaksKernel: c_uint = 22;
pub static EdgesKernel: c_uint = 23;
pub static CornersKernel: c_uint = 24;
pub static DiagonalsKernel: c_uint = 25;
pub static LineEndsKernel: c_uint = 26;
pub static LineJunctionsKernel: c_uint = 27;
pub static RidgesKernel: c_uint = 28;
pub static ConvexHullKernel: c_uint = 29;
pub static ThinSEKernel: c_uint = 30;
pub static SkeletonKernel: c_uint = 31;
pub static ChebyshevKernel: c_uint = 32;
pub static ManhattanKernel: c_uint = 33;
pub static OctagonalKernel: c_uint = 34;
pub static EuclideanKernel: c_uint = 35;
pub static UserDefinedKernel: c_uint = 36;
pub static BinomialKernel: c_uint = 37;
pub type MorphologyMethod = c_uint;
pub static UndefinedMorphology: c_uint = 0;
pub static ConvolveMorphology: c_uint = 1;
pub static CorrelateMorphology: c_uint = 2;
pub static ErodeMorphology: c_uint = 3;
pub static DilateMorphology: c_uint = 4;
pub static ErodeIntensityMorphology: c_uint = 5;
pub static DilateIntensityMorphology: c_uint = 6;
pub static DistanceMorphology: c_uint = 7;
pub static OpenMorphology: c_uint = 8;
pub static CloseMorphology: c_uint = 9;
pub static OpenIntensityMorphology: c_uint = 10;
pub static CloseIntensityMorphology: c_uint = 11;
pub static SmoothMorphology: c_uint = 12;
pub static EdgeInMorphology: c_uint = 13;
pub static EdgeOutMorphology: c_uint = 14;
pub static EdgeMorphology: c_uint = 15;
pub static TopHatMorphology: c_uint = 16;
pub static BottomHatMorphology: c_uint = 17;
pub static HitAndMissMorphology: c_uint = 18;
pub static ThinningMorphology: c_uint = 19;
pub static ThickenMorphology: c_uint = 20;
pub static VoronoiMorphology: c_uint = 21;
pub static IterativeDistanceMorphology: c_uint = 22;
pub struct Struct_KernelInfo {
    _type: KernelInfoType,
    width: size_t,
    height: size_t,
    x: ssize_t,
    y: ssize_t,
    values: *mut c_double,
    minimum: c_double,
    maximum: c_double,
    negative_range: c_double,
    positive_range: c_double,
    angle: c_double,
    next: *mut Struct_KernelInfo,
    signature: size_t,
}
pub type KernelInfo = Struct_KernelInfo;
pub type PreviewType = c_uint;
pub static UndefinedPreview: c_uint = 0;
pub static RotatePreview: c_uint = 1;
pub static ShearPreview: c_uint = 2;
pub static RollPreview: c_uint = 3;
pub static HuePreview: c_uint = 4;
pub static SaturationPreview: c_uint = 5;
pub static BrightnessPreview: c_uint = 6;
pub static GammaPreview: c_uint = 7;
pub static SpiffPreview: c_uint = 8;
pub static DullPreview: c_uint = 9;
pub static GrayscalePreview: c_uint = 10;
pub static QuantizePreview: c_uint = 11;
pub static DespecklePreview: c_uint = 12;
pub static ReduceNoisePreview: c_uint = 13;
pub static AddNoisePreview: c_uint = 14;
pub static SharpenPreview: c_uint = 15;
pub static BlurPreview: c_uint = 16;
pub static ThresholdPreview: c_uint = 17;
pub static EdgeDetectPreview: c_uint = 18;
pub static SpreadPreview: c_uint = 19;
pub static SolarizePreview: c_uint = 20;
pub static ShadePreview: c_uint = 21;
pub static RaisePreview: c_uint = 22;
pub static SegmentPreview: c_uint = 23;
pub static SwirlPreview: c_uint = 24;
pub static ImplodePreview: c_uint = 25;
pub static WavePreview: c_uint = 26;
pub static OilPaintPreview: c_uint = 27;
pub static CharcoalDrawingPreview: c_uint = 28;
pub static JPEGPreview: c_uint = 29;
pub type DisposeType = c_uint;
pub static UnrecognizedDispose: c_uint = 0;
pub static UndefinedDispose: c_uint = 0;
pub static NoneDispose: c_uint = 1;
pub static BackgroundDispose: c_uint = 2;
pub static PreviousDispose: c_uint = 3;
pub type ImageLayerMethod = c_uint;
pub static UndefinedLayer: c_uint = 0;
pub static CoalesceLayer: c_uint = 1;
pub static CompareAnyLayer: c_uint = 2;
pub static CompareClearLayer: c_uint = 3;
pub static CompareOverlayLayer: c_uint = 4;
pub static DisposeLayer: c_uint = 5;
pub static OptimizeLayer: c_uint = 6;
pub static OptimizeImageLayer: c_uint = 7;
pub static OptimizePlusLayer: c_uint = 8;
pub static OptimizeTransLayer: c_uint = 9;
pub static RemoveDupsLayer: c_uint = 10;
pub static RemoveZeroLayer: c_uint = 11;
pub static CompositeLayer: c_uint = 12;
pub static MergeLayer: c_uint = 13;
pub static FlattenLayer: c_uint = 14;
pub static MosaicLayer: c_uint = 15;
pub static TrimBoundsLayer: c_uint = 16;
pub type Struct__HashmapInfo = c_void;
pub type HashmapInfo = Struct__HashmapInfo;
pub type Struct__LinkedListInfo = c_void;
pub type LinkedListInfo = Struct__LinkedListInfo;
pub struct Struct__LocaleInfo {
    path: *mut c_schar,
    tag: *mut c_schar,
    message: *mut c_schar,
    stealth: MagickBooleanType,
    previous: *mut Struct__LocaleInfo,
    next: *mut Struct__LocaleInfo,
    signature: size_t,
}
pub type LocaleInfo = Struct__LocaleInfo;
pub type MagickProgressMonitor =
    extern "C" fn
        (arg1: *c_schar, arg2: MagickOffsetType, arg3: MagickSizeType,
         arg4: *mut c_void) -> MagickBooleanType;
pub struct Struct__StringInfo {
    path: [c_schar, ..4096u],
    datum: *mut c_uchar,
    length: size_t,
    signature: size_t,
}
pub type StringInfo = Struct__StringInfo;
pub struct Struct__ProfileInfo {
    name: *mut c_schar,
    length: size_t,
    info: *mut c_uchar,
    signature: size_t,
}
pub type ProfileInfo = Struct__ProfileInfo;
pub type RenderingIntent = c_uint;
pub static UndefinedIntent: c_uint = 0;
pub static SaturationIntent: c_uint = 1;
pub static PerceptualIntent: c_uint = 2;
pub static AbsoluteIntent: c_uint = 3;
pub static RelativeIntent: c_uint = 4;
pub type EndianType = c_uint;
pub static UndefinedEndian: c_uint = 0;
pub static LSBEndian: c_uint = 1;
pub static MSBEndian: c_uint = 2;
pub type QuantumAlphaType = c_uint;
pub static UndefinedQuantumAlpha: c_uint = 0;
pub static AssociatedQuantumAlpha: c_uint = 1;
pub static DisassociatedQuantumAlpha: c_uint = 2;
pub type QuantumFormatType = c_uint;
pub static UndefinedQuantumFormat: c_uint = 0;
pub static FloatingPointQuantumFormat: c_uint = 1;
pub static SignedQuantumFormat: c_uint = 2;
pub static UnsignedQuantumFormat: c_uint = 3;
pub type QuantumType = c_uint;
pub static UndefinedQuantum: c_uint = 0;
pub static AlphaQuantum: c_uint = 1;
pub static BlackQuantum: c_uint = 2;
pub static BlueQuantum: c_uint = 3;
pub static CMYKAQuantum: c_uint = 4;
pub static CMYKQuantum: c_uint = 5;
pub static CyanQuantum: c_uint = 6;
pub static GrayAlphaQuantum: c_uint = 7;
pub static GrayQuantum: c_uint = 8;
pub static GreenQuantum: c_uint = 9;
pub static IndexAlphaQuantum: c_uint = 10;
pub static IndexQuantum: c_uint = 11;
pub static MagentaQuantum: c_uint = 12;
pub static OpacityQuantum: c_uint = 13;
pub static RedQuantum: c_uint = 14;
pub static RGBAQuantum: c_uint = 15;
pub static BGRAQuantum: c_uint = 16;
pub static RGBOQuantum: c_uint = 17;
pub static RGBQuantum: c_uint = 18;
pub static YellowQuantum: c_uint = 19;
pub static GrayPadQuantum: c_uint = 20;
pub static RGBPadQuantum: c_uint = 21;
pub static CbYCrYQuantum: c_uint = 22;
pub static CbYCrQuantum: c_uint = 23;
pub static CbYCrAQuantum: c_uint = 24;
pub static CMYKOQuantum: c_uint = 25;
pub static BGRQuantum: c_uint = 26;
pub static BGROQuantum: c_uint = 27;
pub type Struct__QuantumInfo = c_void;
pub type QuantumInfo = Struct__QuantumInfo;
pub type FilterTypes = c_uint;
pub static UndefinedFilter: c_uint = 0;
pub static PointFilter: c_uint = 1;
pub static BoxFilter: c_uint = 2;
pub static TriangleFilter: c_uint = 3;
pub static HermiteFilter: c_uint = 4;
pub static HanningFilter: c_uint = 5;
pub static HammingFilter: c_uint = 6;
pub static BlackmanFilter: c_uint = 7;
pub static GaussianFilter: c_uint = 8;
pub static QuadraticFilter: c_uint = 9;
pub static CubicFilter: c_uint = 10;
pub static CatromFilter: c_uint = 11;
pub static MitchellFilter: c_uint = 12;
pub static JincFilter: c_uint = 13;
pub static SincFilter: c_uint = 14;
pub static SincFastFilter: c_uint = 15;
pub static KaiserFilter: c_uint = 16;
pub static WelshFilter: c_uint = 17;
pub static ParzenFilter: c_uint = 18;
pub static BohmanFilter: c_uint = 19;
pub static BartlettFilter: c_uint = 20;
pub static LagrangeFilter: c_uint = 21;
pub static LanczosFilter: c_uint = 22;
pub static LanczosSharpFilter: c_uint = 23;
pub static Lanczos2Filter: c_uint = 24;
pub static Lanczos2SharpFilter: c_uint = 25;
pub static RobidouxFilter: c_uint = 26;
pub static RobidouxSharpFilter: c_uint = 27;
pub static CosineFilter: c_uint = 28;
pub static SplineFilter: c_uint = 29;
pub static LanczosRadiusFilter: c_uint = 30;
pub static SentinelFilter: c_uint = 31;
pub type Struct__ResampleFilter = c_void;
pub type ResampleFilter = Struct__ResampleFilter;
pub type Struct__ResizeFilter = c_void;
pub type ResizeFilter = Struct__ResizeFilter;
pub type TimerState = c_uint;
pub static UndefinedTimerState: c_uint = 0;
pub static StoppedTimerState: c_uint = 1;
pub static RunningTimerState: c_uint = 2;
pub struct Struct__Timer {
    start: c_double,
    stop: c_double,
    total: c_double,
}
pub type Timer = Struct__Timer;
pub struct Struct__TimerInfo {
    user: Timer,
    elapsed: Timer,
    state: TimerState,
    signature: size_t,
}
pub type TimerInfo = Struct__TimerInfo;
pub struct Struct__Image {
    storage_class: ClassType,
    colorspace: ColorspaceType,
    compression: CompressionType,
    quality: size_t,
    orientation: OrientationType,
    taint: MagickBooleanType,
    matte: MagickBooleanType,
    columns: size_t,
    rows: size_t,
    depth: size_t,
    colors: size_t,
    colormap: *mut PixelPacket,
    background_color: PixelPacket,
    border_color: PixelPacket,
    matte_color: PixelPacket,
    gamma: c_double,
    chromaticity: ChromaticityInfo,
    rendering_intent: RenderingIntent,
    profiles: *mut c_void,
    units: ResolutionType,
    montage: *mut c_schar,
    directory: *mut c_schar,
    geometry: *mut c_schar,
    offset: ssize_t,
    x_resolution: c_double,
    y_resolution: c_double,
    page: RectangleInfo,
    extract_info: RectangleInfo,
    tile_info: RectangleInfo,
    bias: c_double,
    blur: c_double,
    fuzz: c_double,
    filter: FilterTypes,
    interlace: InterlaceType,
    endian: EndianType,
    gravity: GravityType,
    compose: CompositeOperator,
    dispose: DisposeType,
    clip_mask: *mut Struct__Image,
    scene: size_t,
    delay: size_t,
    ticks_per_second: ssize_t,
    iterations: size_t,
    total_colors: size_t,
    start_loop: ssize_t,
    error: ErrorInfo,
    timer: TimerInfo,
    progress_monitor: MagickProgressMonitor,
    client_data: *mut c_void,
    cache: *mut c_void,
    attributes: *mut c_void,
    ascii85: *mut Ascii85Info,
    blob: *mut BlobInfo,
    filename: [c_schar, ..4096u],
    magick_filename: [c_schar, ..4096u],
    magick: [c_schar, ..4096u],
    magick_columns: size_t,
    magick_rows: size_t,
    exception: ExceptionInfo,
    debug: MagickBooleanType,
    reference_count: ssize_t,
    semaphore: *mut SemaphoreInfo,
    color_profile: ProfileInfo,
    iptc_profile: ProfileInfo,
    generic_profile: *mut ProfileInfo,
    generic_profiles: size_t,
    signature: size_t,
    previous: *mut Struct__Image,
    list: *mut Struct__Image,
    next: *mut Struct__Image,
    interpolate: InterpolatePixelMethod,
    black_point_compensation: MagickBooleanType,
    transparent_color: PixelPacket,
    mask: *mut Struct__Image,
    tile_offset: RectangleInfo,
    properties: *mut c_void,
    artifacts: *mut c_void,
    _type: ImageType,
    dither: MagickBooleanType,
    extent: MagickSizeType,
    ping: MagickBooleanType,
    channels: size_t,
    timestamp: time_t,
    intensity: PixelIntensityMethod,
}
pub struct Struct__ImageInfo {
    compression: CompressionType,
    orientation: OrientationType,
    temporary: MagickBooleanType,
    adjoin: MagickBooleanType,
    affirm: MagickBooleanType,
    antialias: MagickBooleanType,
    size: *mut c_schar,
    extract: *mut c_schar,
    page: *mut c_schar,
    scenes: *mut c_schar,
    scene: size_t,
    number_scenes: size_t,
    depth: size_t,
    interlace: InterlaceType,
    endian: EndianType,
    units: ResolutionType,
    quality: size_t,
    sampling_factor: *mut c_schar,
    server_name: *mut c_schar,
    font: *mut c_schar,
    texture: *mut c_schar,
    density: *mut c_schar,
    pointsize: c_double,
    fuzz: c_double,
    background_color: PixelPacket,
    border_color: PixelPacket,
    matte_color: PixelPacket,
    dither: MagickBooleanType,
    monochrome: MagickBooleanType,
    colors: size_t,
    colorspace: ColorspaceType,
    _type: ImageType,
    preview_type: PreviewType,
    group: ssize_t,
    ping: MagickBooleanType,
    verbose: MagickBooleanType,
    view: *mut c_schar,
    authenticate: *mut c_schar,
    channel: ChannelType,
    attributes: *mut Image,
    options: *mut c_void,
    progress_monitor: MagickProgressMonitor,
    client_data: *mut c_void,
    cache: *mut c_void,
    stream: StreamHandler,
    file: *mut FILE,
    blob: *mut c_void,
    length: size_t,
    magick: [c_schar, ..4096u],
    unique: [c_schar, ..4096u],
    zero: [c_schar, ..4096u],
    filename: [c_schar, ..4096u],
    debug: MagickBooleanType,
    tile: *mut c_schar,
    subimage: size_t,
    subrange: size_t,
    pen: PixelPacket,
    signature: size_t,
    virtual_pixel_method: VirtualPixelMethod,
    transparent_color: PixelPacket,
    profile: *mut c_void,
    synchronize: MagickBooleanType,
}
pub type StretchType = c_uint;
pub static UndefinedStretch: c_uint = 0;
pub static NormalStretch: c_uint = 1;
pub static UltraCondensedStretch: c_uint = 2;
pub static ExtraCondensedStretch: c_uint = 3;
pub static CondensedStretch: c_uint = 4;
pub static SemiCondensedStretch: c_uint = 5;
pub static SemiExpandedStretch: c_uint = 6;
pub static ExpandedStretch: c_uint = 7;
pub static ExtraExpandedStretch: c_uint = 8;
pub static UltraExpandedStretch: c_uint = 9;
pub static AnyStretch: c_uint = 10;
pub type StyleType = c_uint;
pub static UndefinedStyle: c_uint = 0;
pub static NormalStyle: c_uint = 1;
pub static ItalicStyle: c_uint = 2;
pub static ObliqueStyle: c_uint = 3;
pub static AnyStyle: c_uint = 4;
pub struct Struct__TypeInfo {
    face: size_t,
    path: *mut c_schar,
    name: *mut c_schar,
    description: *mut c_schar,
    family: *mut c_schar,
    style: StyleType,
    stretch: StretchType,
    weight: size_t,
    encoding: *mut c_schar,
    foundry: *mut c_schar,
    format: *mut c_schar,
    metrics: *mut c_schar,
    glyphs: *mut c_schar,
    stealth: MagickBooleanType,
    previous: *mut Struct__TypeInfo,
    next: *mut Struct__TypeInfo,
    signature: size_t,
}
pub type TypeInfo = Struct__TypeInfo;
pub type AlignType = c_uint;
pub static UndefinedAlign: c_uint = 0;
pub static LeftAlign: c_uint = 1;
pub static CenterAlign: c_uint = 2;
pub static RightAlign: c_uint = 3;
pub type ClipPathUnits = c_uint;
pub static UndefinedPathUnits: c_uint = 0;
pub static UserSpace: c_uint = 1;
pub static UserSpaceOnUse: c_uint = 2;
pub static ObjectBoundingBox: c_uint = 3;
pub type DecorationType = c_uint;
pub static UndefinedDecoration: c_uint = 0;
pub static NoDecoration: c_uint = 1;
pub static UnderlineDecoration: c_uint = 2;
pub static OverlineDecoration: c_uint = 3;
pub static LineThroughDecoration: c_uint = 4;
pub type DirectionType = c_uint;
pub static UndefinedDirection: c_uint = 0;
pub static RightToLeftDirection: c_uint = 1;
pub static LeftToRightDirection: c_uint = 2;
pub type FillRule = c_uint;
pub static UndefinedRule: c_uint = 0;
pub static EvenOddRule: c_uint = 1;
pub static NonZeroRule: c_uint = 2;
pub type GradientType = c_uint;
pub static UndefinedGradient: c_uint = 0;
pub static LinearGradient: c_uint = 1;
pub static RadialGradient: c_uint = 2;
pub type LineCap = c_uint;
pub static UndefinedCap: c_uint = 0;
pub static ButtCap: c_uint = 1;
pub static RoundCap: c_uint = 2;
pub static SquareCap: c_uint = 3;
pub type LineJoin = c_uint;
pub static UndefinedJoin: c_uint = 0;
pub static MiterJoin: c_uint = 1;
pub static RoundJoin: c_uint = 2;
pub static BevelJoin: c_uint = 3;
pub type PaintMethod = c_uint;
pub static UndefinedMethod: c_uint = 0;
pub static PointMethod: c_uint = 1;
pub static ReplaceMethod: c_uint = 2;
pub static FloodfillMethod: c_uint = 3;
pub static FillToBorderMethod: c_uint = 4;
pub static ResetMethod: c_uint = 5;
pub type PrimitiveType = c_uint;
pub static UndefinedPrimitive: c_uint = 0;
pub static PointPrimitive: c_uint = 1;
pub static LinePrimitive: c_uint = 2;
pub static RectanglePrimitive: c_uint = 3;
pub static RoundRectanglePrimitive: c_uint = 4;
pub static ArcPrimitive: c_uint = 5;
pub static EllipsePrimitive: c_uint = 6;
pub static CirclePrimitive: c_uint = 7;
pub static PolylinePrimitive: c_uint = 8;
pub static PolygonPrimitive: c_uint = 9;
pub static BezierPrimitive: c_uint = 10;
pub static ColorPrimitive: c_uint = 11;
pub static MattePrimitive: c_uint = 12;
pub static TextPrimitive: c_uint = 13;
pub static ImagePrimitive: c_uint = 14;
pub static PathPrimitive: c_uint = 15;
pub type ReferenceType = c_uint;
pub static UndefinedReference: c_uint = 0;
pub static GradientReference: c_uint = 1;
pub type SpreadMethod = c_uint;
pub static UndefinedSpread: c_uint = 0;
pub static PadSpread: c_uint = 1;
pub static ReflectSpread: c_uint = 2;
pub static RepeatSpread: c_uint = 3;
pub struct Struct__PointInfo {
    x: c_double,
    y: c_double,
}
pub type PointInfo = Struct__PointInfo;
pub struct Struct__StopInfo {
    color: MagickPixelPacket,
    offset: MagickRealType,
}
pub type StopInfo = Struct__StopInfo;
pub struct Struct__GradientInfo {
    _type: GradientType,
    bounding_box: RectangleInfo,
    gradient_vector: SegmentInfo,
    stops: *mut StopInfo,
    number_stops: size_t,
    spread: SpreadMethod,
    debug: MagickBooleanType,
    signature: size_t,
    center: PointInfo,
    radius: MagickRealType,
}
pub type GradientInfo = Struct__GradientInfo;
pub struct Struct__ElementReference {
    id: *mut c_schar,
    _type: ReferenceType,
    gradient: GradientInfo,
    signature: size_t,
    previous: *mut Struct__ElementReference,
    next: *mut Struct__ElementReference,
}
pub type ElementReference = Struct__ElementReference;
pub struct Struct__DrawInfo {
    primitive: *mut c_schar,
    geometry: *mut c_schar,
    viewbox: RectangleInfo,
    affine: AffineMatrix,
    gravity: GravityType,
    fill: PixelPacket,
    stroke: PixelPacket,
    stroke_width: c_double,
    gradient: GradientInfo,
    fill_pattern: *mut Image,
    tile: *mut Image,
    stroke_pattern: *mut Image,
    stroke_antialias: MagickBooleanType,
    text_antialias: MagickBooleanType,
    fill_rule: FillRule,
    linecap: LineCap,
    linejoin: LineJoin,
    miterlimit: size_t,
    dash_offset: c_double,
    decorate: DecorationType,
    compose: CompositeOperator,
    text: *mut c_schar,
    face: size_t,
    font: *mut c_schar,
    metrics: *mut c_schar,
    family: *mut c_schar,
    style: StyleType,
    stretch: StretchType,
    weight: size_t,
    encoding: *mut c_schar,
    pointsize: c_double,
    density: *mut c_schar,
    align: AlignType,
    undercolor: PixelPacket,
    border_color: PixelPacket,
    server_name: *mut c_schar,
    dash_pattern: *mut c_double,
    clip_mask: *mut c_schar,
    bounds: SegmentInfo,
    clip_units: ClipPathUnits,
    opacity: Quantum,
    render: MagickBooleanType,
    element_reference: ElementReference,
    debug: MagickBooleanType,
    signature: size_t,
    kerning: c_double,
    interword_spacing: c_double,
    interline_spacing: c_double,
    direction: DirectionType,
}
pub type DrawInfo = Struct__DrawInfo;
pub struct Struct__PrimitiveInfo {
    point: PointInfo,
    coordinates: size_t,
    primitive: PrimitiveType,
    method: PaintMethod,
    text: *mut c_schar,
}
pub type PrimitiveInfo = Struct__PrimitiveInfo;
pub struct Struct__TypeMetric {
    pixels_per_em: PointInfo,
    ascent: c_double,
    descent: c_double,
    width: c_double,
    height: c_double,
    max_advance: c_double,
    underline_position: c_double,
    underline_thickness: c_double,
    bounds: SegmentInfo,
    origin: PointInfo,
}
pub type TypeMetric = Struct__TypeMetric;
pub type NoiseType = c_uint;
pub static UndefinedNoise: c_uint = 0;
pub static UniformNoise: c_uint = 1;
pub static GaussianNoise: c_uint = 2;
pub static MultiplicativeGaussianNoise: c_uint = 3;
pub static ImpulseNoise: c_uint = 4;
pub static LaplacianNoise: c_uint = 5;
pub static PoissonNoise: c_uint = 6;
pub static RandomNoise: c_uint = 7;
pub struct Struct__ChannelStatistics {
    depth: size_t,
    minima: c_double,
    maxima: c_double,
    sum: c_double,
    sum_squared: c_double,
    sum_cubed: c_double,
    sum_fourth_power: c_double,
    mean: c_double,
    variance: c_double,
    standard_deviation: c_double,
    kurtosis: c_double,
    skewness: c_double,
}
pub type ChannelStatistics = Struct__ChannelStatistics;
pub type MagickEvaluateOperator = c_uint;
pub static UndefinedEvaluateOperator: c_uint = 0;
pub static AddEvaluateOperator: c_uint = 1;
pub static AndEvaluateOperator: c_uint = 2;
pub static DivideEvaluateOperator: c_uint = 3;
pub static LeftShiftEvaluateOperator: c_uint = 4;
pub static MaxEvaluateOperator: c_uint = 5;
pub static MinEvaluateOperator: c_uint = 6;
pub static MultiplyEvaluateOperator: c_uint = 7;
pub static OrEvaluateOperator: c_uint = 8;
pub static RightShiftEvaluateOperator: c_uint = 9;
pub static SetEvaluateOperator: c_uint = 10;
pub static SubtractEvaluateOperator: c_uint = 11;
pub static XorEvaluateOperator: c_uint = 12;
pub static PowEvaluateOperator: c_uint = 13;
pub static LogEvaluateOperator: c_uint = 14;
pub static ThresholdEvaluateOperator: c_uint = 15;
pub static ThresholdBlackEvaluateOperator: c_uint = 16;
pub static ThresholdWhiteEvaluateOperator: c_uint = 17;
pub static GaussianNoiseEvaluateOperator: c_uint = 18;
pub static ImpulseNoiseEvaluateOperator: c_uint = 19;
pub static LaplacianNoiseEvaluateOperator: c_uint = 20;
pub static MultiplicativeNoiseEvaluateOperator: c_uint = 21;
pub static PoissonNoiseEvaluateOperator: c_uint = 22;
pub static UniformNoiseEvaluateOperator: c_uint = 23;
pub static CosineEvaluateOperator: c_uint = 24;
pub static SineEvaluateOperator: c_uint = 25;
pub static AddModulusEvaluateOperator: c_uint = 26;
pub static MeanEvaluateOperator: c_uint = 27;
pub static AbsEvaluateOperator: c_uint = 28;
pub static ExponentialEvaluateOperator: c_uint = 29;
pub static MedianEvaluateOperator: c_uint = 30;
pub static SumEvaluateOperator: c_uint = 31;
pub type MagickFunction = c_uint;
pub static UndefinedFunction: c_uint = 0;
pub static PolynomialFunction: c_uint = 1;
pub static SinusoidFunction: c_uint = 2;
pub static ArcsinFunction: c_uint = 3;
pub static ArctanFunction: c_uint = 4;
pub type StatisticType = c_uint;
pub static UndefinedStatistic: c_uint = 0;
pub static GradientStatistic: c_uint = 1;
pub static MaximumStatistic: c_uint = 2;
pub static MeanStatistic: c_uint = 3;
pub static MedianStatistic: c_uint = 4;
pub static MinimumStatistic: c_uint = 5;
pub static ModeStatistic: c_uint = 6;
pub static NonpeakStatistic: c_uint = 7;
pub static StandardDeviationStatistic: c_uint = 8;
pub type CacheType = c_uint;
pub static UndefinedCache: c_uint = 0;
pub static MemoryCache: c_uint = 1;
pub static MapCache: c_uint = 2;
pub static DiskCache: c_uint = 3;
pub static PingCache: c_uint = 4;
pub static DistributedCache: c_uint = 5;
pub struct Struct__CoderInfo {
    path: *mut c_schar,
    magick: *mut c_schar,
    name: *mut c_schar,
    exempt: MagickBooleanType,
    stealth: MagickBooleanType,
    previous: *mut Struct__CoderInfo,
    next: *mut Struct__CoderInfo,
    signature: size_t,
}
pub type CoderInfo = Struct__CoderInfo;
pub type MetricType = c_uint;
pub static UndefinedMetric: c_uint = 0;
pub static AbsoluteErrorMetric: c_uint = 1;
pub static MeanAbsoluteErrorMetric: c_uint = 2;
pub static MeanErrorPerPixelMetric: c_uint = 3;
pub static MeanSquaredErrorMetric: c_uint = 4;
pub static PeakAbsoluteErrorMetric: c_uint = 5;
pub static PeakSignalToNoiseRatioMetric: c_uint = 6;
pub static RootMeanSquaredErrorMetric: c_uint = 7;
pub static NormalizedCrossCorrelationErrorMetric: c_uint = 8;
pub static FuzzErrorMetric: c_uint = 9;
pub static UndefinedErrorMetric: c_uint = 0;
pub struct Struct__ConfigureInfo {
    path: *mut c_schar,
    name: *mut c_schar,
    value: *mut c_schar,
    exempt: MagickBooleanType,
    stealth: MagickBooleanType,
    previous: *mut Struct__ConfigureInfo,
    next: *mut Struct__ConfigureInfo,
    signature: size_t,
}
pub type ConfigureInfo = Struct__ConfigureInfo;
pub struct Struct__FrameInfo {
    width: size_t,
    height: size_t,
    x: ssize_t,
    y: ssize_t,
    inner_bevel: ssize_t,
    outer_bevel: ssize_t,
}
pub type FrameInfo = Struct__FrameInfo;
pub struct Struct__DelegateInfo {
    path: *mut c_schar,
    decode: *mut c_schar,
    encode: *mut c_schar,
    commands: *mut c_schar,
    mode: ssize_t,
    thread_support: MagickBooleanType,
    spawn: MagickBooleanType,
    stealth: MagickBooleanType,
    previous: *mut Struct__DelegateInfo,
    next: *mut Struct__DelegateInfo,
    signature: size_t,
}
pub type DelegateInfo = Struct__DelegateInfo;
pub type DitherMethod = c_uint;
pub static UndefinedDitherMethod: c_uint = 0;
pub static NoDitherMethod: c_uint = 1;
pub static RiemersmaDitherMethod: c_uint = 2;
pub static FloydSteinbergDitherMethod: c_uint = 3;
pub struct Struct__QuantizeInfo {
    number_colors: size_t,
    tree_depth: size_t,
    dither: MagickBooleanType,
    colorspace: ColorspaceType,
    measure_error: MagickBooleanType,
    signature: size_t,
    dither_method: DitherMethod,
}
pub type QuantizeInfo = Struct__QuantizeInfo;
pub type RegistryType = c_uint;
pub static UndefinedRegistryType: c_uint = 0;
pub static ImageRegistryType: c_uint = 1;
pub static ImageInfoRegistryType: c_uint = 2;
pub static StringRegistryType: c_uint = 3;
pub type MagickLayerMethod = c_uint;
pub static UndefinedMagickLayerMethod: c_uint = 0;
pub type ExtendedSignedIntegralType = MagickOffsetType;
pub type ExtendedUnsignedIntegralType = MagickSizeType;
pub type ExtendedRationalType = MagickRealType;
pub type Struct__ViewInfo = c_void;
pub type ViewInfo = Struct__ViewInfo;
pub type MonitorHandler =
    extern "C" fn
        (arg1: *c_schar, arg2: MagickOffsetType, arg3: MagickSizeType,
         arg4: *mut ExceptionInfo) -> MagickBooleanType;
pub struct Struct__ImageAttribute {
    key: *mut c_schar,
    value: *mut c_schar,
    compression: MagickBooleanType,
    previous: *mut Struct__ImageAttribute,
    next: *mut Struct__ImageAttribute,
}
pub type ImageAttribute = Struct__ImageAttribute;
pub type DistortImageMethod = c_uint;
pub static UndefinedDistortion: c_uint = 0;
pub static AffineDistortion: c_uint = 1;
pub static AffineProjectionDistortion: c_uint = 2;
pub static ScaleRotateTranslateDistortion: c_uint = 3;
pub static PerspectiveDistortion: c_uint = 4;
pub static PerspectiveProjectionDistortion: c_uint = 5;
pub static BilinearForwardDistortion: c_uint = 6;
pub static BilinearDistortion: c_uint = 6;
pub static BilinearReverseDistortion: c_uint = 7;
pub static PolynomialDistortion: c_uint = 8;
pub static ArcDistortion: c_uint = 9;
pub static PolarDistortion: c_uint = 10;
pub static DePolarDistortion: c_uint = 11;
pub static Cylinder2PlaneDistortion: c_uint = 12;
pub static Plane2CylinderDistortion: c_uint = 13;
pub static BarrelDistortion: c_uint = 14;
pub static BarrelInverseDistortion: c_uint = 15;
pub static ShepardsDistortion: c_uint = 16;
pub static ResizeDistortion: c_uint = 17;
pub static SentinelDistortion: c_uint = 18;
pub type SparseColorMethod = c_uint;
pub static UndefinedColorInterpolate: c_uint = 0;
pub static BarycentricColorInterpolate: c_uint = 1;
pub static BilinearColorInterpolate: c_uint = 7;
pub static PolynomialColorInterpolate: c_uint = 8;
pub static ShepardsColorInterpolate: c_uint = 16;
pub static VoronoiColorInterpolate: c_uint = 18;
pub static InverseColorInterpolate: c_uint = 19;
pub struct Struct__ChannelFeatures {
    angular_second_moment: [c_double, ..4u],
    contrast: [c_double, ..4u],
    correlation: [c_double, ..4u],
    variance_sum_of_squares: [c_double, ..4u],
    inverse_difference_moment: [c_double, ..4u],
    sum_average: [c_double, ..4u],
    sum_variance: [c_double, ..4u],
    sum_entropy: [c_double, ..4u],
    entropy: [c_double, ..4u],
    difference_variance: [c_double, ..4u],
    difference_entropy: [c_double, ..4u],
    measure_of_correlation_1: [c_double, ..4u],
    measure_of_correlation_2: [c_double, ..4u],
    maximum_correlation_coefficient: [c_double, ..4u],
}
pub type ChannelFeatures = Struct__ChannelFeatures;
pub type ComplexOperator = c_uint;
pub static UndefinedComplexOperator: c_uint = 0;
pub static AddComplexOperator: c_uint = 1;
pub static ConjugateComplexOperator: c_uint = 2;
pub static DivideComplexOperator: c_uint = 3;
pub static MagnitudePhaseComplexOperator: c_uint = 4;
pub static MultiplyComplexOperator: c_uint = 5;
pub static RealImaginaryComplexOperator: c_uint = 6;
pub static SubtractComplexOperator: c_uint = 7;
pub type Struct__RandomInfo = c_void;
pub type RandomInfo = Struct__RandomInfo;
pub struct Struct__ColorPacket {
    pixel: PixelPacket,
    index: IndexPacket,
    count: MagickSizeType,
}
pub type ColorPacket = Struct__ColorPacket;
pub type Struct__ImageView = c_void;
pub type ImageView = Struct__ImageView;
pub type DuplexTransferImageViewMethod =
    extern "C" fn
        (arg1: *ImageView, arg2: *ImageView, arg3: *mut ImageView,
         arg4: ssize_t, arg5: c_int, arg6: *mut c_void) -> MagickBooleanType;
pub type GetImageViewMethod =
    extern "C" fn
        (arg1: *ImageView, arg2: ssize_t, arg3: c_int, arg4: *mut c_void)
        -> MagickBooleanType;
pub type SetImageViewMethod =
    extern "C" fn
        (arg1: *mut ImageView, arg2: ssize_t, arg3: c_int, arg4: *mut c_void)
        -> MagickBooleanType;
pub type TransferImageViewMethod =
    extern "C" fn
        (arg1: *ImageView, arg2: *mut ImageView, arg3: ssize_t, arg4: c_int,
         arg5: *mut c_void) -> MagickBooleanType;
pub type UpdateImageViewMethod =
    extern "C" fn
        (arg1: *mut ImageView, arg2: ssize_t, arg3: c_int, arg4: *mut c_void)
        -> MagickBooleanType;
pub type LogEventType = c_uint;
pub static UndefinedEvents: c_uint = 0;
pub static NoEvents: c_uint = 0;
pub static TraceEvent: c_uint = 1;
pub static AnnotateEvent: c_uint = 2;
pub static BlobEvent: c_uint = 4;
pub static CacheEvent: c_uint = 8;
pub static CoderEvent: c_uint = 16;
pub static ConfigureEvent: c_uint = 32;
pub static DeprecateEvent: c_uint = 64;
pub static DrawEvent: c_uint = 128;
pub static ExceptionEvent: c_uint = 256;
pub static ImageEvent: c_uint = 512;
pub static LocaleEvent: c_uint = 1024;
pub static ModuleEvent: c_uint = 2048;
pub static PolicyEvent: c_uint = 4096;
pub static ResourceEvent: c_uint = 8192;
pub static TransformEvent: c_uint = 16384;
pub static UserEvent: c_uint = 36864;
pub static WandEvent: c_uint = 65536;
pub static X11Event: c_uint = 131072;
pub static AccelerateEvent: c_uint = 262144;
pub static AllEvents: c_uint = 2147483647;
pub type Struct__LogInfo = c_void;
pub type LogInfo = Struct__LogInfo;
pub struct Struct__MagicInfo {
    path: *mut c_schar,
    name: *mut c_schar,
    target: *mut c_schar,
    magic: *mut c_uchar,
    length: size_t,
    offset: MagickOffsetType,
    exempt: MagickBooleanType,
    stealth: MagickBooleanType,
    previous: *mut Struct__MagicInfo,
    next: *mut Struct__MagicInfo,
    signature: size_t,
}
pub type MagicInfo = Struct__MagicInfo;
pub type MagickFormatType = c_uint;
pub static UndefinedFormatType: c_uint = 0;
pub static ImplicitFormatType: c_uint = 1;
pub static ExplicitFormatType: c_uint = 2;
pub type MagickThreadSupport = c_uint;
pub static NoThreadSupport: c_uint = 0;
pub static DecoderThreadSupport: c_uint = 1;
pub static EncoderThreadSupport: c_uint = 2;
pub type DecodeImageHandler = c_void;
pub type EncodeImageHandler = c_void;
pub type IsImageFormatHandler = c_void;
pub struct Struct__MagickInfo {
    name: *mut c_schar,
    description: *mut c_schar,
    version: *mut c_schar,
    note: *mut c_schar,
    module: *mut c_schar,
    image_info: *mut ImageInfo,
    decoder: *mut extern "C" fn(arg1: *ImageInfo, arg2: *mut ExceptionInfo)
                      -> *mut Image,
    encoder: *mut extern "C" fn(arg1: *ImageInfo, arg2: *mut Image)
                      -> MagickBooleanType,
    magick: *mut extern "C" fn(arg1: *c_uchar, arg2: size_t)
                     -> MagickBooleanType,
    client_data: *mut c_void,
    adjoin: MagickBooleanType,
    raw: MagickBooleanType,
    endian_support: MagickBooleanType,
    blob_support: MagickBooleanType,
    seekable_stream: MagickBooleanType,
    format_type: MagickFormatType,
    thread_support: MagickStatusType,
    stealth: MagickBooleanType,
    previous: *mut Struct__MagickInfo,
    next: *mut Struct__MagickInfo,
    signature: size_t,
    mime_type: *mut c_schar,
}
pub type MagickInfo = Struct__MagickInfo;
pub type Struct__MemoryInfo = c_void;
pub type MemoryInfo = Struct__MemoryInfo;
pub type AcquireMemoryHandler = extern "C" fn(arg1: size_t) -> *mut c_void;
pub type DestroyMemoryHandler = extern "C" fn(arg1: *mut c_void);
pub type ResizeMemoryHandler =
    extern "C" fn(arg1: *mut c_void, arg2: size_t) -> *mut c_void;
pub type MagickModuleType = c_uint;
pub static MagickImageCoderModule: c_uint = 0;
pub static MagickImageFilterModule: c_uint = 1;
pub struct Struct__ModuleInfo {
    path: *mut c_schar,
    tag: *mut c_schar,
    handle: *mut c_void,
    unregister_module: extern "C" fn(),
    register_module: extern "C" fn() -> size_t,
    timestamp: time_t,
    stealth: MagickBooleanType,
    previous: *mut Struct__ModuleInfo,
    next: *mut Struct__ModuleInfo,
    signature: size_t,
}
pub type ModuleInfo = Struct__ModuleInfo;
pub type ImageFilterHandler = c_void;
pub type Struct__MimeInfo = c_void;
pub type MimeInfo = Struct__MimeInfo;
pub type MontageMode = c_uint;
pub static UndefinedMode: c_uint = 0;
pub static FrameMode: c_uint = 1;
pub static UnframeMode: c_uint = 2;
pub static ConcatenateMode: c_uint = 3;
pub struct Struct__MontageInfo {
    geometry: *mut c_schar,
    tile: *mut c_schar,
    title: *mut c_schar,
    frame: *mut c_schar,
    texture: *mut c_schar,
    font: *mut c_schar,
    pointsize: c_double,
    border_width: size_t,
    shadow: MagickBooleanType,
    fill: PixelPacket,
    stroke: PixelPacket,
    background_color: PixelPacket,
    border_color: PixelPacket,
    matte_color: PixelPacket,
    gravity: GravityType,
    filename: [c_schar, ..4096u],
    debug: MagickBooleanType,
    signature: size_t,
}
pub type MontageInfo = Struct__MontageInfo;
pub type CommandOption = c_int;
pub static MagickUndefinedOptions: c_int = -1;
pub static MagickAlignOptions: c_int = 0;
pub static MagickAlphaOptions: c_int = 1;
pub static MagickBooleanOptions: c_int = 2;
pub static MagickCacheOptions: c_int = 3;
pub static MagickChannelOptions: c_int = 4;
pub static MagickClassOptions: c_int = 5;
pub static MagickClipPathOptions: c_int = 6;
pub static MagickCoderOptions: c_int = 7;
pub static MagickColorOptions: c_int = 8;
pub static MagickColorspaceOptions: c_int = 9;
pub static MagickCommandOptions: c_int = 10;
pub static MagickComposeOptions: c_int = 11;
pub static MagickCompressOptions: c_int = 12;
pub static MagickConfigureOptions: c_int = 13;
pub static MagickDataTypeOptions: c_int = 14;
pub static MagickDebugOptions: c_int = 15;
pub static MagickDecorateOptions: c_int = 16;
pub static MagickDelegateOptions: c_int = 17;
pub static MagickDirectionOptions: c_int = 18;
pub static MagickDisposeOptions: c_int = 19;
pub static MagickDistortOptions: c_int = 20;
pub static MagickDitherOptions: c_int = 21;
pub static MagickEndianOptions: c_int = 22;
pub static MagickEvaluateOptions: c_int = 23;
pub static MagickFillRuleOptions: c_int = 24;
pub static MagickFilterOptions: c_int = 25;
pub static MagickFontOptions: c_int = 26;
pub static MagickFontsOptions: c_int = 27;
pub static MagickFormatOptions: c_int = 28;
pub static MagickFunctionOptions: c_int = 29;
pub static MagickGravityOptions: c_int = 30;
pub static MagickIntentOptions: c_int = 31;
pub static MagickInterlaceOptions: c_int = 32;
pub static MagickInterpolateOptions: c_int = 33;
pub static MagickKernelOptions: c_int = 34;
pub static MagickLayerOptions: c_int = 35;
pub static MagickLineCapOptions: c_int = 36;
pub static MagickLineJoinOptions: c_int = 37;
pub static MagickListOptions: c_int = 38;
pub static MagickLocaleOptions: c_int = 39;
pub static MagickLogEventOptions: c_int = 40;
pub static MagickLogOptions: c_int = 41;
pub static MagickMagicOptions: c_int = 42;
pub static MagickMethodOptions: c_int = 43;
pub static MagickMetricOptions: c_int = 44;
pub static MagickMimeOptions: c_int = 45;
pub static MagickModeOptions: c_int = 46;
pub static MagickModuleOptions: c_int = 47;
pub static MagickMorphologyOptions: c_int = 48;
pub static MagickNoiseOptions: c_int = 49;
pub static MagickOrientationOptions: c_int = 50;
pub static MagickPixelIntensityOptions: c_int = 51;
pub static MagickPolicyOptions: c_int = 52;
pub static MagickPolicyDomainOptions: c_int = 53;
pub static MagickPolicyRightsOptions: c_int = 54;
pub static MagickPreviewOptions: c_int = 55;
pub static MagickPrimitiveOptions: c_int = 56;
pub static MagickQuantumFormatOptions: c_int = 57;
pub static MagickResolutionOptions: c_int = 58;
pub static MagickResourceOptions: c_int = 59;
pub static MagickSparseColorOptions: c_int = 60;
pub static MagickStatisticOptions: c_int = 61;
pub static MagickStorageOptions: c_int = 62;
pub static MagickStretchOptions: c_int = 63;
pub static MagickStyleOptions: c_int = 64;
pub static MagickThresholdOptions: c_int = 65;
pub static MagickTypeOptions: c_int = 66;
pub static MagickValidateOptions: c_int = 67;
pub static MagickVirtualPixelOptions: c_int = 68;
pub static MagickComplexOptions: c_int = 69;
pub static MagickIntensityOptions: c_int = 70;
pub type ValidateType = c_uint;
pub static UndefinedValidate: c_uint = 0;
pub static NoValidate: c_uint = 0;
pub static ColorspaceValidate: c_uint = 1;
pub static CompareValidate: c_uint = 2;
pub static CompositeValidate: c_uint = 4;
pub static ConvertValidate: c_uint = 8;
pub static FormatsDiskValidate: c_uint = 16;
pub static FormatsMapValidate: c_uint = 32;
pub static FormatsMemoryValidate: c_uint = 64;
pub static IdentifyValidate: c_uint = 128;
pub static ImportExportValidate: c_uint = 256;
pub static MontageValidate: c_uint = 512;
pub static StreamValidate: c_uint = 1024;
pub static AllValidate: c_uint = 2147483647;
pub struct Struct__OptionInfo {
    mnemonic: *c_schar,
    _type: ssize_t,
    flags: ssize_t,
    stealth: MagickBooleanType,
}
pub type OptionInfo = Struct__OptionInfo;
pub type CommandOptionFlags = c_uint;
pub static UndefinedOptionFlag: c_uint = 0;
pub static FireOptionFlag: c_uint = 1;
pub static ImageInfoOptionFlag: c_uint = 2;
pub static DrawInfoOptionFlag: c_uint = 4;
pub static QuantizeInfoOptionFlag: c_uint = 8;
pub static GlobalOptionFlag: c_uint = 16;
pub static SimpleOperatorOptionFlag: c_uint = 256;
pub static ListOperatorOptionFlag: c_uint = 512;
pub static SpecialOperatorOptionFlag: c_uint = 1024;
pub static GenesisOptionFlag: c_uint = 1024;
pub static NonConvertOptionFlag: c_uint = 16384;
pub static DeprecateOptionFlag: c_uint = 32768;
pub type PolicyDomain = c_uint;
pub static UndefinedPolicyDomain: c_uint = 0;
pub static CoderPolicyDomain: c_uint = 1;
pub static DelegatePolicyDomain: c_uint = 2;
pub static FilterPolicyDomain: c_uint = 3;
pub static PathPolicyDomain: c_uint = 4;
pub static ResourcePolicyDomain: c_uint = 5;
pub static SystemPolicyDomain: c_uint = 6;
pub type PolicyRights = c_uint;
pub static UndefinedPolicyRights: c_uint = 0;
pub static NoPolicyRights: c_uint = 0;
pub static ReadPolicyRights: c_uint = 1;
pub static WritePolicyRights: c_uint = 2;
pub static ExecutePolicyRights: c_uint = 4;
pub type Struct__PolicyInfo = c_void;
pub type PolicyInfo = Struct__PolicyInfo;
pub type ResourceType = c_uint;
pub static UndefinedResource: c_uint = 0;
pub static AreaResource: c_uint = 1;
pub static DiskResource: c_uint = 2;
pub static FileResource: c_uint = 3;
pub static MapResource: c_uint = 4;
pub static MemoryResource: c_uint = 5;
pub static ThreadResource: c_uint = 6;
pub static TimeResource: c_uint = 7;
pub static ThrottleResource: c_uint = 8;
pub type Struct__SplayTreeInfo = c_void;
pub type SplayTreeInfo = Struct__SplayTreeInfo;
pub type Struct__TokenInfo = c_void;
pub type TokenInfo = Struct__TokenInfo;
pub type Struct__ThresholdMap = c_void;
pub type ThresholdMap = Struct__ThresholdMap;
pub type PathType = c_uint;
pub static UndefinedPath: c_uint = 0;
pub static MagickPath: c_uint = 1;
pub static RootPath: c_uint = 2;
pub static HeadPath: c_uint = 3;
pub static TailPath: c_uint = 4;
pub static BasePath: c_uint = 5;
pub static ExtensionPath: c_uint = 6;
pub static SubimagePath: c_uint = 7;
pub static CanonicalPath: c_uint = 8;
pub type Struct__XMLTreeInfo = c_void;
pub type XMLTreeInfo = Struct__XMLTreeInfo;
pub struct Struct__XImportInfo {
    frame: MagickBooleanType,
    borders: MagickBooleanType,
    screen: MagickBooleanType,
    descend: MagickBooleanType,
    silent: MagickBooleanType,
}
pub type XImportInfo = Struct__XImportInfo;
pub type Struct__PixelWand = c_void;
pub type PixelWand = Struct__PixelWand;
pub type Struct__DrawingWand = c_void;
pub type DrawingWand = Struct__DrawingWand;
pub type Struct__PixelIterator = c_void;
pub type PixelIterator = Struct__PixelIterator;
pub type DrawContext = *mut Struct__DrawingWand;
pub type Struct__PixelView = c_void;
pub type PixelView = Struct__PixelView;
pub type DuplexTransferPixelViewMethod =
    extern "C" fn
        (arg1: *PixelView, arg2: *PixelView, arg3: *mut PixelView,
         arg4: *mut c_void) -> MagickBooleanType;
pub type GetPixelViewMethod =
    extern "C" fn(arg1: *PixelView, arg2: *mut c_void) -> MagickBooleanType;
pub type SetPixelViewMethod =
    extern "C" fn(arg1: *mut PixelView, arg2: *mut c_void)
        -> MagickBooleanType;
pub type TransferPixelViewMethod =
    extern "C" fn(arg1: *PixelView, arg2: *mut PixelView, arg3: *mut c_void)
        -> MagickBooleanType;
pub type UpdatePixelViewMethod =
    extern "C" fn(arg1: *mut PixelView, arg2: *mut c_void)
        -> MagickBooleanType;
pub type MagickCommand =
    extern "C" fn
        (arg1: *mut ImageInfo, arg2: c_int, arg3: *mut *mut c_schar,
         arg4: *mut *mut c_schar, arg5: *mut ExceptionInfo)
        -> MagickBooleanType;
pub type Struct__WandView = c_void;
pub type WandView = Struct__WandView;
pub type DuplexTransferWandViewMethod =
    extern "C" fn
        (arg1: *WandView, arg2: *WandView, arg3: *mut WandView, arg4: ssize_t,
         arg5: c_int, arg6: *mut c_void) -> MagickBooleanType;
pub type GetWandViewMethod =
    extern "C" fn
        (arg1: *WandView, arg2: ssize_t, arg3: c_int, arg4: *mut c_void)
        -> MagickBooleanType;
pub type SetWandViewMethod =
    extern "C" fn
        (arg1: *mut WandView, arg2: ssize_t, arg3: c_int, arg4: *mut c_void)
        -> MagickBooleanType;
pub type TransferWandViewMethod =
    extern "C" fn
        (arg1: *WandView, arg2: *mut WandView, arg3: ssize_t, arg4: c_int,
         arg5: *mut c_void) -> MagickBooleanType;
pub type UpdateWandViewMethod =
    extern "C" fn
        (arg1: *mut WandView, arg2: ssize_t, arg3: c_int, arg4: *mut c_void)
        -> MagickBooleanType;
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: c_int;
    pub static mut sys_errlist: c_void;
    pub static mut _sys_nerr: c_int;
    pub static mut _sys_errlist: c_void;
    pub static mut signgam: c_int;
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
    pub static mut __tzname: [*mut c_schar, ..2u];
    pub static mut __daylight: c_int;
    pub static mut __timezone: c_long;
    pub static mut tzname: [*mut c_schar, ..2u];
    pub static mut daylight: c_int;
    pub static mut timezone: c_long;
    pub static mut getdate_err: c_int;
    pub fn _IO_cookie_init(__cfile: *mut Struct__IO_cookie_file,
                           __read_write: c_int, __cookie: *mut c_void,
                           __fns: _IO_cookie_io_functions_t);
    pub fn __underflow(arg1: *mut _IO_FILE) -> c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: c_int) -> c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_putc(__c: c_int, __fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: c_int, arg3: __ssize_t) ->
     __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut c_void, arg3: size_t) ->
     size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t, arg3: c_int,
                       arg4: c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t, arg3: c_int) ->
     __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *c_schar) -> c_int;
    pub fn rename(__old: *c_schar, __new: *c_schar) -> c_int;
    pub fn renameat(__oldfd: c_int, __old: *c_schar, __newfd: c_int,
                    __new: *c_schar) -> c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpfile64() -> *mut FILE;
    pub fn tmpnam(__s: *mut c_schar) -> *mut c_schar;
    pub fn tmpnam_r(__s: *mut c_schar) -> *mut c_schar;
    pub fn tempnam(__dir: *c_schar, __pfx: *c_schar) -> *mut c_schar;
    pub fn fclose(__stream: *mut FILE) -> c_int;
    pub fn fflush(__stream: *mut FILE) -> c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> c_int;
    pub fn fcloseall() -> c_int;
    pub fn fopen(__filename: *c_schar, __modes: *c_schar) -> *mut FILE;
    pub fn freopen(__filename: *c_schar, __modes: *c_schar,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fopen64(__filename: *c_schar, __modes: *c_schar) -> *mut FILE;
    pub fn freopen64(__filename: *c_schar, __modes: *c_schar,
                     __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: c_int, __modes: *c_schar) -> *mut FILE;
    pub fn fopencookie(__magic_cookie: *mut c_void, __modes: *c_schar,
                       __io_funcs: _IO_cookie_io_functions_t) -> *mut FILE;
    pub fn fmemopen(__s: *mut c_void, __len: size_t, __modes: *c_schar) ->
     *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut c_schar, __sizeloc: *mut size_t)
     -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut c_schar);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut c_schar, __modes: c_int,
                   __n: size_t) -> c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut c_schar,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE, __format: *c_schar, ...) -> c_int;
    pub fn printf(__format: *c_schar, ...) -> c_int;
    pub fn sprintf(__s: *mut c_schar, __format: *c_schar, ...) -> c_int;
    pub fn snprintf(__s: *mut c_schar, __maxlen: size_t,
                    __format: *c_schar, ...) -> c_int;
    pub fn __asprintf(__ptr: *mut *mut c_schar, __fmt: *c_schar, ...) ->
     c_int;
    pub fn asprintf(__ptr: *mut *mut c_schar, __fmt: *c_schar, ...) -> c_int;
    pub fn dprintf(__fd: c_int, __fmt: *c_schar, ...) -> c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *c_schar, ...) -> c_int;
    pub fn scanf(__format: *c_schar, ...) -> c_int;
    pub fn sscanf(__s: *c_schar, __format: *c_schar, ...) -> c_int;
    pub fn fgetc(__stream: *mut FILE) -> c_int;
    pub fn getc(__stream: *mut FILE) -> c_int;
    pub fn getchar() -> c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> c_int;
    pub fn getchar_unlocked() -> c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> c_int;
    pub fn fputc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putchar(__c: c_int) -> c_int;
    pub fn fputc_unlocked(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putc_unlocked(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn putchar_unlocked(__c: c_int) -> c_int;
    pub fn getw(__stream: *mut FILE) -> c_int;
    pub fn putw(__w: c_int, __stream: *mut FILE) -> c_int;
    pub fn fgets(__s: *mut c_schar, __n: c_int, __stream: *mut FILE) ->
     *mut c_schar;
    pub fn gets(__s: *mut c_schar) -> *mut c_schar;
    pub fn fgets_unlocked(__s: *mut c_schar, __n: c_int, __stream: *mut FILE)
     -> *mut c_schar;
    pub fn __getdelim(__lineptr: *mut *mut c_schar, __n: *mut size_t,
                      __delimiter: c_int, __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut c_schar, __n: *mut size_t,
                    __delimiter: c_int, __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut c_schar, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *c_schar, __stream: *mut FILE) -> c_int;
    pub fn puts(__s: *c_schar) -> c_int;
    pub fn ungetc(__c: c_int, __stream: *mut FILE) -> c_int;
    pub fn fread(__ptr: *mut c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *c_void, __size: size_t, __n: size_t, __s: *mut FILE)
     -> size_t;
    pub fn fputs_unlocked(__s: *c_schar, __stream: *mut FILE) -> c_int;
    pub fn fread_unlocked(__ptr: *mut c_void, __size: size_t, __n: size_t,
                          __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *c_void, __size: size_t, __n: size_t,
                           __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: c_long, __whence: c_int) ->
     c_int;
    pub fn ftell(__stream: *mut FILE) -> c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: c_int) ->
     c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *fpos_t) -> c_int;
    pub fn fseeko64(__stream: *mut FILE, __off: __off64_t, __whence: c_int) ->
     c_int;
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> c_int;
    pub fn fsetpos64(__stream: *mut FILE, __pos: *fpos64_t) -> c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> c_int;
    pub fn ferror(__stream: *mut FILE) -> c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> c_int;
    pub fn perror(__s: *c_schar);
    pub fn fileno(__stream: *mut FILE) -> c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> c_int;
    pub fn popen(__command: *c_schar, __modes: *c_schar) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> c_int;
    pub fn ctermid(__s: *mut c_schar) -> *mut c_schar;
    pub fn cuserid(__s: *mut c_schar) -> *mut c_schar;
    pub fn obstack_printf(__obstack: *mut Struct_obstack,
                          __format: *c_schar, ...) -> c_int;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *c_schar) -> c_double;
    pub fn atoi(__nptr: *c_schar) -> c_int;
    pub fn atol(__nptr: *c_schar) -> c_long;
    pub fn atoll(__nptr: *c_schar) -> c_longlong;
    pub fn strtod(__nptr: *c_schar, __endptr: *mut *mut c_schar) -> c_double;
    pub fn strtof(__nptr: *c_schar, __endptr: *mut *mut c_schar) -> c_float;
    pub fn strtold(__nptr: *c_schar, __endptr: *mut *mut c_schar) -> c_double;
    pub fn strtol(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                  __base: c_int) -> c_long;
    pub fn strtoul(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                   __base: c_int) -> c_ulong;
    pub fn strtoq(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                  __base: c_int) -> c_longlong;
    pub fn strtouq(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                   __base: c_int) -> c_ulonglong;
    pub fn strtoll(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                   __base: c_int) -> c_longlong;
    pub fn strtoull(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                    __base: c_int) -> c_ulonglong;
    pub fn strtol_l(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                    __base: c_int, __loc: __locale_t) -> c_long;
    pub fn strtoul_l(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                     __base: c_int, __loc: __locale_t) -> c_ulong;
    pub fn strtoll_l(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                     __base: c_int, __loc: __locale_t) -> c_longlong;
    pub fn strtoull_l(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                      __base: c_int, __loc: __locale_t) -> c_ulonglong;
    pub fn strtod_l(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                    __loc: __locale_t) -> c_double;
    pub fn strtof_l(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                    __loc: __locale_t) -> c_float;
    pub fn strtold_l(__nptr: *c_schar, __endptr: *mut *mut c_schar,
                     __loc: __locale_t) -> c_double;
    pub fn l64a(__n: c_long) -> *mut c_schar;
    pub fn a64l(__s: *c_schar) -> c_long;
    pub fn select(__nfds: c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> c_int;
    pub fn pselect(__nfds: c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *Struct_timespec, __sigmask: *__sigset_t) ->
     c_int;
    pub fn gnu_dev_major(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_minor(__dev: c_ulonglong) -> c_uint;
    pub fn gnu_dev_makedev(__major: c_uint, __minor: c_uint) -> c_ulonglong;
    pub fn random() -> c_long;
    pub fn srandom(__seed: c_uint);
    pub fn initstate(__seed: c_uint, __statebuf: *mut c_schar,
                     __statelen: size_t) -> *mut c_schar;
    pub fn setstate(__statebuf: *mut c_schar) -> *mut c_schar;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t) ->
     c_int;
    pub fn srandom_r(__seed: c_uint, __buf: *mut Struct_random_data) -> c_int;
    pub fn initstate_r(__seed: c_uint, __statebuf: *mut c_schar,
                       __statelen: size_t, __buf: *mut Struct_random_data) ->
     c_int;
    pub fn setstate_r(__statebuf: *mut c_schar,
                      __buf: *mut Struct_random_data) -> c_int;
    pub fn rand() -> c_int;
    pub fn srand(__seed: c_uint);
    pub fn rand_r(__seed: *mut c_uint) -> c_int;
    pub fn drand48() -> c_double;
    pub fn erand48(__xsubi: [c_ushort, ..3u]) -> c_double;
    pub fn lrand48() -> c_long;
    pub fn nrand48(__xsubi: [c_ushort, ..3u]) -> c_long;
    pub fn mrand48() -> c_long;
    pub fn jrand48(__xsubi: [c_ushort, ..3u]) -> c_long;
    pub fn srand48(__seedval: c_long);
    pub fn seed48(__seed16v: [c_ushort, ..3u]) -> *mut c_ushort;
    pub fn lcong48(__param: [c_ushort, ..7u]);
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut c_double) -> c_int;
    pub fn erand48_r(__xsubi: [c_ushort, ..3u],
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut c_double) -> c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut c_long) -> c_int;
    pub fn nrand48_r(__xsubi: [c_ushort, ..3u],
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut c_long) -> c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut c_long) -> c_int;
    pub fn jrand48_r(__xsubi: [c_ushort, ..3u],
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut c_long) -> c_int;
    pub fn srand48_r(__seedval: c_long, __buffer: *mut Struct_drand48_data) ->
     c_int;
    pub fn seed48_r(__seed16v: [c_ushort, ..3u],
                    __buffer: *mut Struct_drand48_data) -> c_int;
    pub fn lcong48_r(__param: [c_ushort, ..7u],
                     __buffer: *mut Struct_drand48_data) -> c_int;
    pub fn malloc(__size: size_t) -> *mut c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut c_void;
    pub fn realloc(__ptr: *mut c_void, __size: size_t) -> *mut c_void;
    pub fn free(__ptr: *mut c_void);
    pub fn cfree(__ptr: *mut c_void);
    pub fn alloca(__size: size_t) -> *mut c_void;
    pub fn valloc(__size: size_t) -> *mut c_void;
    pub fn posix_memalign(__memptr: *mut *mut c_void, __alignment: size_t,
                          __size: size_t) -> c_int;
    pub fn abort();
    pub fn atexit(__func: extern "C" fn()) -> c_int;
    pub fn at_quick_exit(__func: extern "C" fn()) -> c_int;
    pub fn on_exit(__func: extern "C" fn(arg1: c_int, arg2: *mut c_void),
                   __arg: *mut c_void) -> c_int;
    pub fn exit(__status: c_int);
    pub fn quick_exit(__status: c_int);
    pub fn _Exit(__status: c_int);
    pub fn getenv(__name: *c_schar) -> *mut c_schar;
    pub fn __secure_getenv(__name: *c_schar) -> *mut c_schar;
    pub fn putenv(__string: *mut c_schar) -> c_int;
    pub fn setenv(__name: *c_schar, __value: *c_schar, __replace: c_int) ->
     c_int;
    pub fn unsetenv(__name: *c_schar) -> c_int;
    pub fn clearenv() -> c_int;
    pub fn mktemp(__template: *mut c_schar) -> *mut c_schar;
    pub fn mkstemp(__template: *mut c_schar) -> c_int;
    pub fn mkstemp64(__template: *mut c_schar) -> c_int;
    pub fn mkstemps(__template: *mut c_schar, __suffixlen: c_int) -> c_int;
    pub fn mkstemps64(__template: *mut c_schar, __suffixlen: c_int) -> c_int;
    pub fn mkdtemp(__template: *mut c_schar) -> *mut c_schar;
    pub fn mkostemp(__template: *mut c_schar, __flags: c_int) -> c_int;
    pub fn mkostemp64(__template: *mut c_schar, __flags: c_int) -> c_int;
    pub fn mkostemps(__template: *mut c_schar, __suffixlen: c_int,
                     __flags: c_int) -> c_int;
    pub fn mkostemps64(__template: *mut c_schar, __suffixlen: c_int,
                       __flags: c_int) -> c_int;
    pub fn system(__command: *c_schar) -> c_int;
    pub fn canonicalize_file_name(__name: *c_schar) -> *mut c_schar;
    pub fn realpath(__name: *c_schar, __resolved: *mut c_schar) ->
     *mut c_schar;
    pub fn bsearch(__key: *c_void, __base: *c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t) -> *mut c_void;
    pub fn qsort(__base: *mut c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t);
    pub fn qsort_r(__base: *mut c_void, __nmemb: size_t, __size: size_t,
                   __compar: __compar_d_fn_t, __arg: *mut c_void);
    pub fn abs(__x: c_int) -> c_int;
    pub fn labs(__x: c_long) -> c_long;
    pub fn llabs(__x: c_longlong) -> c_longlong;
    pub fn div(__numer: c_int, __denom: c_int) -> div_t;
    pub fn ldiv(__numer: c_long, __denom: c_long) -> ldiv_t;
    pub fn lldiv(__numer: c_longlong, __denom: c_longlong) -> lldiv_t;
    pub fn ecvt(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                __sign: *mut c_int) -> *mut c_schar;
    pub fn fcvt(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                __sign: *mut c_int) -> *mut c_schar;
    pub fn gcvt(__value: c_double, __ndigit: c_int, __buf: *mut c_schar) ->
     *mut c_schar;
    pub fn qecvt(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                 __sign: *mut c_int) -> *mut c_schar;
    pub fn qfcvt(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                 __sign: *mut c_int) -> *mut c_schar;
    pub fn qgcvt(__value: c_double, __ndigit: c_int, __buf: *mut c_schar) ->
     *mut c_schar;
    pub fn ecvt_r(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                  __sign: *mut c_int, __buf: *mut c_schar, __len: size_t) ->
     c_int;
    pub fn fcvt_r(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                  __sign: *mut c_int, __buf: *mut c_schar, __len: size_t) ->
     c_int;
    pub fn qecvt_r(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                   __sign: *mut c_int, __buf: *mut c_schar, __len: size_t) ->
     c_int;
    pub fn qfcvt_r(__value: c_double, __ndigit: c_int, __decpt: *mut c_int,
                   __sign: *mut c_int, __buf: *mut c_schar, __len: size_t) ->
     c_int;
    pub fn mblen(__s: *c_schar, __n: size_t) -> c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *c_schar, __n: size_t) -> c_int;
    pub fn wctomb(__s: *mut c_schar, __wchar: wchar_t) -> c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *c_schar, __n: size_t) ->
     size_t;
    pub fn wcstombs(__s: *mut c_schar, __pwcs: *wchar_t, __n: size_t) ->
     size_t;
    pub fn rpmatch(__response: *c_schar) -> c_int;
    pub fn getsubopt(__optionp: *mut *mut c_schar, __tokens: **mut c_schar,
                     __valuep: *mut *mut c_schar) -> c_int;
    pub fn setkey(__key: *c_schar);
    pub fn posix_openpt(__oflag: c_int) -> c_int;
    pub fn grantpt(__fd: c_int) -> c_int;
    pub fn unlockpt(__fd: c_int) -> c_int;
    pub fn ptsname(__fd: c_int) -> *mut c_schar;
    pub fn ptsname_r(__fd: c_int, __buf: *mut c_schar, __buflen: size_t) ->
     c_int;
    pub fn getpt() -> c_int;
    pub fn getloadavg(__loadavg: c_void, __nelem: c_int) -> c_int;
    pub fn acos(__x: c_double) -> c_double;
    pub fn __acos(__x: c_double) -> c_double;
    pub fn asin(__x: c_double) -> c_double;
    pub fn __asin(__x: c_double) -> c_double;
    pub fn atan(__x: c_double) -> c_double;
    pub fn __atan(__x: c_double) -> c_double;
    pub fn atan2(__y: c_double, __x: c_double) -> c_double;
    pub fn __atan2(__y: c_double, __x: c_double) -> c_double;
    pub fn cos(__x: c_double) -> c_double;
    pub fn __cos(__x: c_double) -> c_double;
    pub fn sin(__x: c_double) -> c_double;
    pub fn __sin(__x: c_double) -> c_double;
    pub fn tan(__x: c_double) -> c_double;
    pub fn __tan(__x: c_double) -> c_double;
    pub fn cosh(__x: c_double) -> c_double;
    pub fn __cosh(__x: c_double) -> c_double;
    pub fn sinh(__x: c_double) -> c_double;
    pub fn __sinh(__x: c_double) -> c_double;
    pub fn tanh(__x: c_double) -> c_double;
    pub fn __tanh(__x: c_double) -> c_double;
    pub fn sincos(__x: c_double, __sinx: *mut c_double,
                  __cosx: *mut c_double);
    pub fn __sincos(__x: c_double, __sinx: *mut c_double,
                    __cosx: *mut c_double);
    pub fn acosh(__x: c_double) -> c_double;
    pub fn __acosh(__x: c_double) -> c_double;
    pub fn asinh(__x: c_double) -> c_double;
    pub fn __asinh(__x: c_double) -> c_double;
    pub fn atanh(__x: c_double) -> c_double;
    pub fn __atanh(__x: c_double) -> c_double;
    pub fn exp(__x: c_double) -> c_double;
    pub fn __exp(__x: c_double) -> c_double;
    pub fn frexp(__x: c_double, __exponent: *mut c_int) -> c_double;
    pub fn __frexp(__x: c_double, __exponent: *mut c_int) -> c_double;
    pub fn ldexp(__x: c_double, __exponent: c_int) -> c_double;
    pub fn __ldexp(__x: c_double, __exponent: c_int) -> c_double;
    pub fn log(__x: c_double) -> c_double;
    pub fn __log(__x: c_double) -> c_double;
    pub fn log10(__x: c_double) -> c_double;
    pub fn __log10(__x: c_double) -> c_double;
    pub fn modf(__x: c_double, __iptr: *mut c_double) -> c_double;
    pub fn __modf(__x: c_double, __iptr: *mut c_double) -> c_double;
    pub fn exp10(__x: c_double) -> c_double;
    pub fn __exp10(__x: c_double) -> c_double;
    pub fn pow10(__x: c_double) -> c_double;
    pub fn __pow10(__x: c_double) -> c_double;
    pub fn expm1(__x: c_double) -> c_double;
    pub fn __expm1(__x: c_double) -> c_double;
    pub fn log1p(__x: c_double) -> c_double;
    pub fn __log1p(__x: c_double) -> c_double;
    pub fn logb(__x: c_double) -> c_double;
    pub fn __logb(__x: c_double) -> c_double;
    pub fn exp2(__x: c_double) -> c_double;
    pub fn __exp2(__x: c_double) -> c_double;
    pub fn log2(__x: c_double) -> c_double;
    pub fn __log2(__x: c_double) -> c_double;
    pub fn pow(__x: c_double, __y: c_double) -> c_double;
    pub fn __pow(__x: c_double, __y: c_double) -> c_double;
    pub fn sqrt(__x: c_double) -> c_double;
    pub fn __sqrt(__x: c_double) -> c_double;
    pub fn hypot(__x: c_double, __y: c_double) -> c_double;
    pub fn __hypot(__x: c_double, __y: c_double) -> c_double;
    pub fn cbrt(__x: c_double) -> c_double;
    pub fn __cbrt(__x: c_double) -> c_double;
    pub fn ceil(__x: c_double) -> c_double;
    pub fn __ceil(__x: c_double) -> c_double;
    pub fn fabs(__x: c_double) -> c_double;
    pub fn __fabs(__x: c_double) -> c_double;
    pub fn floor(__x: c_double) -> c_double;
    pub fn __floor(__x: c_double) -> c_double;
    pub fn fmod(__x: c_double, __y: c_double) -> c_double;
    pub fn __fmod(__x: c_double, __y: c_double) -> c_double;
    pub fn __isinf(__value: c_double) -> c_int;
    pub fn __finite(__value: c_double) -> c_int;
    pub fn isinf(__value: c_double) -> c_int;
    pub fn finite(__value: c_double) -> c_int;
    pub fn drem(__x: c_double, __y: c_double) -> c_double;
    pub fn __drem(__x: c_double, __y: c_double) -> c_double;
    pub fn significand(__x: c_double) -> c_double;
    pub fn __significand(__x: c_double) -> c_double;
    pub fn copysign(__x: c_double, __y: c_double) -> c_double;
    pub fn __copysign(__x: c_double, __y: c_double) -> c_double;
    pub fn nan(__tagb: *c_schar) -> c_double;
    pub fn __nan(__tagb: *c_schar) -> c_double;
    pub fn __isnan(__value: c_double) -> c_int;
    pub fn isnan(__value: c_double) -> c_int;
    pub fn j0(arg1: c_double) -> c_double;
    pub fn __j0(arg1: c_double) -> c_double;
    pub fn j1(arg1: c_double) -> c_double;
    pub fn __j1(arg1: c_double) -> c_double;
    pub fn jn(arg1: c_int, arg2: c_double) -> c_double;
    pub fn __jn(arg1: c_int, arg2: c_double) -> c_double;
    pub fn y0(arg1: c_double) -> c_double;
    pub fn __y0(arg1: c_double) -> c_double;
    pub fn y1(arg1: c_double) -> c_double;
    pub fn __y1(arg1: c_double) -> c_double;
    pub fn yn(arg1: c_int, arg2: c_double) -> c_double;
    pub fn __yn(arg1: c_int, arg2: c_double) -> c_double;
    pub fn erf(arg1: c_double) -> c_double;
    pub fn __erf(arg1: c_double) -> c_double;
    pub fn erfc(arg1: c_double) -> c_double;
    pub fn __erfc(arg1: c_double) -> c_double;
    pub fn lgamma(arg1: c_double) -> c_double;
    pub fn __lgamma(arg1: c_double) -> c_double;
    pub fn tgamma(arg1: c_double) -> c_double;
    pub fn __tgamma(arg1: c_double) -> c_double;
    pub fn gamma(arg1: c_double) -> c_double;
    pub fn __gamma(arg1: c_double) -> c_double;
    pub fn lgamma_r(arg1: c_double, __signgamp: *mut c_int) -> c_double;
    pub fn __lgamma_r(arg1: c_double, __signgamp: *mut c_int) -> c_double;
    pub fn rint(__x: c_double) -> c_double;
    pub fn __rint(__x: c_double) -> c_double;
    pub fn nextafter(__x: c_double, __y: c_double) -> c_double;
    pub fn __nextafter(__x: c_double, __y: c_double) -> c_double;
    pub fn nexttoward(__x: c_double, __y: c_double) -> c_double;
    pub fn __nexttoward(__x: c_double, __y: c_double) -> c_double;
    pub fn remainder(__x: c_double, __y: c_double) -> c_double;
    pub fn __remainder(__x: c_double, __y: c_double) -> c_double;
    pub fn scalbn(__x: c_double, __n: c_int) -> c_double;
    pub fn __scalbn(__x: c_double, __n: c_int) -> c_double;
    pub fn ilogb(__x: c_double) -> c_int;
    pub fn __ilogb(__x: c_double) -> c_int;
    pub fn scalbln(__x: c_double, __n: c_long) -> c_double;
    pub fn __scalbln(__x: c_double, __n: c_long) -> c_double;
    pub fn nearbyint(__x: c_double) -> c_double;
    pub fn __nearbyint(__x: c_double) -> c_double;
    pub fn round(__x: c_double) -> c_double;
    pub fn __round(__x: c_double) -> c_double;
    pub fn trunc(__x: c_double) -> c_double;
    pub fn __trunc(__x: c_double) -> c_double;
    pub fn remquo(__x: c_double, __y: c_double, __quo: *mut c_int) ->
     c_double;
    pub fn __remquo(__x: c_double, __y: c_double, __quo: *mut c_int) ->
     c_double;
    pub fn lrint(__x: c_double) -> c_long;
    pub fn __lrint(__x: c_double) -> c_long;
    pub fn llrint(__x: c_double) -> c_longlong;
    pub fn __llrint(__x: c_double) -> c_longlong;
    pub fn lround(__x: c_double) -> c_long;
    pub fn __lround(__x: c_double) -> c_long;
    pub fn llround(__x: c_double) -> c_longlong;
    pub fn __llround(__x: c_double) -> c_longlong;
    pub fn fdim(__x: c_double, __y: c_double) -> c_double;
    pub fn __fdim(__x: c_double, __y: c_double) -> c_double;
    pub fn fmax(__x: c_double, __y: c_double) -> c_double;
    pub fn __fmax(__x: c_double, __y: c_double) -> c_double;
    pub fn fmin(__x: c_double, __y: c_double) -> c_double;
    pub fn __fmin(__x: c_double, __y: c_double) -> c_double;
    pub fn __fpclassify(__value: c_double) -> c_int;
    pub fn __signbit(__value: c_double) -> c_int;
    pub fn fma(__x: c_double, __y: c_double, __z: c_double) -> c_double;
    pub fn __fma(__x: c_double, __y: c_double, __z: c_double) -> c_double;
    pub fn scalb(__x: c_double, __n: c_double) -> c_double;
    pub fn __scalb(__x: c_double, __n: c_double) -> c_double;
    pub fn acosf(__x: c_float) -> c_float;
    pub fn __acosf(__x: c_float) -> c_float;
    pub fn asinf(__x: c_float) -> c_float;
    pub fn __asinf(__x: c_float) -> c_float;
    pub fn atanf(__x: c_float) -> c_float;
    pub fn __atanf(__x: c_float) -> c_float;
    pub fn atan2f(__y: c_float, __x: c_float) -> c_float;
    pub fn __atan2f(__y: c_float, __x: c_float) -> c_float;
    pub fn cosf(__x: c_float) -> c_float;
    pub fn __cosf(__x: c_float) -> c_float;
    pub fn sinf(__x: c_float) -> c_float;
    pub fn __sinf(__x: c_float) -> c_float;
    pub fn tanf(__x: c_float) -> c_float;
    pub fn __tanf(__x: c_float) -> c_float;
    pub fn coshf(__x: c_float) -> c_float;
    pub fn __coshf(__x: c_float) -> c_float;
    pub fn sinhf(__x: c_float) -> c_float;
    pub fn __sinhf(__x: c_float) -> c_float;
    pub fn tanhf(__x: c_float) -> c_float;
    pub fn __tanhf(__x: c_float) -> c_float;
    pub fn sincosf(__x: c_float, __sinx: *mut c_float, __cosx: *mut c_float);
    pub fn __sincosf(__x: c_float, __sinx: *mut c_float,
                     __cosx: *mut c_float);
    pub fn acoshf(__x: c_float) -> c_float;
    pub fn __acoshf(__x: c_float) -> c_float;
    pub fn asinhf(__x: c_float) -> c_float;
    pub fn __asinhf(__x: c_float) -> c_float;
    pub fn atanhf(__x: c_float) -> c_float;
    pub fn __atanhf(__x: c_float) -> c_float;
    pub fn expf(__x: c_float) -> c_float;
    pub fn __expf(__x: c_float) -> c_float;
    pub fn frexpf(__x: c_float, __exponent: *mut c_int) -> c_float;
    pub fn __frexpf(__x: c_float, __exponent: *mut c_int) -> c_float;
    pub fn ldexpf(__x: c_float, __exponent: c_int) -> c_float;
    pub fn __ldexpf(__x: c_float, __exponent: c_int) -> c_float;
    pub fn logf(__x: c_float) -> c_float;
    pub fn __logf(__x: c_float) -> c_float;
    pub fn log10f(__x: c_float) -> c_float;
    pub fn __log10f(__x: c_float) -> c_float;
    pub fn modff(__x: c_float, __iptr: *mut c_float) -> c_float;
    pub fn __modff(__x: c_float, __iptr: *mut c_float) -> c_float;
    pub fn exp10f(__x: c_float) -> c_float;
    pub fn __exp10f(__x: c_float) -> c_float;
    pub fn pow10f(__x: c_float) -> c_float;
    pub fn __pow10f(__x: c_float) -> c_float;
    pub fn expm1f(__x: c_float) -> c_float;
    pub fn __expm1f(__x: c_float) -> c_float;
    pub fn log1pf(__x: c_float) -> c_float;
    pub fn __log1pf(__x: c_float) -> c_float;
    pub fn logbf(__x: c_float) -> c_float;
    pub fn __logbf(__x: c_float) -> c_float;
    pub fn exp2f(__x: c_float) -> c_float;
    pub fn __exp2f(__x: c_float) -> c_float;
    pub fn log2f(__x: c_float) -> c_float;
    pub fn __log2f(__x: c_float) -> c_float;
    pub fn powf(__x: c_float, __y: c_float) -> c_float;
    pub fn __powf(__x: c_float, __y: c_float) -> c_float;
    pub fn sqrtf(__x: c_float) -> c_float;
    pub fn __sqrtf(__x: c_float) -> c_float;
    pub fn hypotf(__x: c_float, __y: c_float) -> c_float;
    pub fn __hypotf(__x: c_float, __y: c_float) -> c_float;
    pub fn cbrtf(__x: c_float) -> c_float;
    pub fn __cbrtf(__x: c_float) -> c_float;
    pub fn ceilf(__x: c_float) -> c_float;
    pub fn __ceilf(__x: c_float) -> c_float;
    pub fn fabsf(__x: c_float) -> c_float;
    pub fn __fabsf(__x: c_float) -> c_float;
    pub fn floorf(__x: c_float) -> c_float;
    pub fn __floorf(__x: c_float) -> c_float;
    pub fn fmodf(__x: c_float, __y: c_float) -> c_float;
    pub fn __fmodf(__x: c_float, __y: c_float) -> c_float;
    pub fn __isinff(__value: c_float) -> c_int;
    pub fn __finitef(__value: c_float) -> c_int;
    pub fn isinff(__value: c_float) -> c_int;
    pub fn finitef(__value: c_float) -> c_int;
    pub fn dremf(__x: c_float, __y: c_float) -> c_float;
    pub fn __dremf(__x: c_float, __y: c_float) -> c_float;
    pub fn significandf(__x: c_float) -> c_float;
    pub fn __significandf(__x: c_float) -> c_float;
    pub fn copysignf(__x: c_float, __y: c_float) -> c_float;
    pub fn __copysignf(__x: c_float, __y: c_float) -> c_float;
    pub fn nanf(__tagb: *c_schar) -> c_float;
    pub fn __nanf(__tagb: *c_schar) -> c_float;
    pub fn __isnanf(__value: c_float) -> c_int;
    pub fn isnanf(__value: c_float) -> c_int;
    pub fn j0f(arg1: c_float) -> c_float;
    pub fn __j0f(arg1: c_float) -> c_float;
    pub fn j1f(arg1: c_float) -> c_float;
    pub fn __j1f(arg1: c_float) -> c_float;
    pub fn jnf(arg1: c_int, arg2: c_float) -> c_float;
    pub fn __jnf(arg1: c_int, arg2: c_float) -> c_float;
    pub fn y0f(arg1: c_float) -> c_float;
    pub fn __y0f(arg1: c_float) -> c_float;
    pub fn y1f(arg1: c_float) -> c_float;
    pub fn __y1f(arg1: c_float) -> c_float;
    pub fn ynf(arg1: c_int, arg2: c_float) -> c_float;
    pub fn __ynf(arg1: c_int, arg2: c_float) -> c_float;
    pub fn erff(arg1: c_float) -> c_float;
    pub fn __erff(arg1: c_float) -> c_float;
    pub fn erfcf(arg1: c_float) -> c_float;
    pub fn __erfcf(arg1: c_float) -> c_float;
    pub fn lgammaf(arg1: c_float) -> c_float;
    pub fn __lgammaf(arg1: c_float) -> c_float;
    pub fn tgammaf(arg1: c_float) -> c_float;
    pub fn __tgammaf(arg1: c_float) -> c_float;
    pub fn gammaf(arg1: c_float) -> c_float;
    pub fn __gammaf(arg1: c_float) -> c_float;
    pub fn lgammaf_r(arg1: c_float, __signgamp: *mut c_int) -> c_float;
    pub fn __lgammaf_r(arg1: c_float, __signgamp: *mut c_int) -> c_float;
    pub fn rintf(__x: c_float) -> c_float;
    pub fn __rintf(__x: c_float) -> c_float;
    pub fn nextafterf(__x: c_float, __y: c_float) -> c_float;
    pub fn __nextafterf(__x: c_float, __y: c_float) -> c_float;
    pub fn nexttowardf(__x: c_float, __y: c_double) -> c_float;
    pub fn __nexttowardf(__x: c_float, __y: c_double) -> c_float;
    pub fn remainderf(__x: c_float, __y: c_float) -> c_float;
    pub fn __remainderf(__x: c_float, __y: c_float) -> c_float;
    pub fn scalbnf(__x: c_float, __n: c_int) -> c_float;
    pub fn __scalbnf(__x: c_float, __n: c_int) -> c_float;
    pub fn ilogbf(__x: c_float) -> c_int;
    pub fn __ilogbf(__x: c_float) -> c_int;
    pub fn scalblnf(__x: c_float, __n: c_long) -> c_float;
    pub fn __scalblnf(__x: c_float, __n: c_long) -> c_float;
    pub fn nearbyintf(__x: c_float) -> c_float;
    pub fn __nearbyintf(__x: c_float) -> c_float;
    pub fn roundf(__x: c_float) -> c_float;
    pub fn __roundf(__x: c_float) -> c_float;
    pub fn truncf(__x: c_float) -> c_float;
    pub fn __truncf(__x: c_float) -> c_float;
    pub fn remquof(__x: c_float, __y: c_float, __quo: *mut c_int) -> c_float;
    pub fn __remquof(__x: c_float, __y: c_float, __quo: *mut c_int) ->
     c_float;
    pub fn lrintf(__x: c_float) -> c_long;
    pub fn __lrintf(__x: c_float) -> c_long;
    pub fn llrintf(__x: c_float) -> c_longlong;
    pub fn __llrintf(__x: c_float) -> c_longlong;
    pub fn lroundf(__x: c_float) -> c_long;
    pub fn __lroundf(__x: c_float) -> c_long;
    pub fn llroundf(__x: c_float) -> c_longlong;
    pub fn __llroundf(__x: c_float) -> c_longlong;
    pub fn fdimf(__x: c_float, __y: c_float) -> c_float;
    pub fn __fdimf(__x: c_float, __y: c_float) -> c_float;
    pub fn fmaxf(__x: c_float, __y: c_float) -> c_float;
    pub fn __fmaxf(__x: c_float, __y: c_float) -> c_float;
    pub fn fminf(__x: c_float, __y: c_float) -> c_float;
    pub fn __fminf(__x: c_float, __y: c_float) -> c_float;
    pub fn __fpclassifyf(__value: c_float) -> c_int;
    pub fn __signbitf(__value: c_float) -> c_int;
    pub fn fmaf(__x: c_float, __y: c_float, __z: c_float) -> c_float;
    pub fn __fmaf(__x: c_float, __y: c_float, __z: c_float) -> c_float;
    pub fn scalbf(__x: c_float, __n: c_float) -> c_float;
    pub fn __scalbf(__x: c_float, __n: c_float) -> c_float;
    pub fn acosl(__x: c_double) -> c_double;
    pub fn __acosl(__x: c_double) -> c_double;
    pub fn asinl(__x: c_double) -> c_double;
    pub fn __asinl(__x: c_double) -> c_double;
    pub fn atanl(__x: c_double) -> c_double;
    pub fn __atanl(__x: c_double) -> c_double;
    pub fn atan2l(__y: c_double, __x: c_double) -> c_double;
    pub fn __atan2l(__y: c_double, __x: c_double) -> c_double;
    pub fn cosl(__x: c_double) -> c_double;
    pub fn __cosl(__x: c_double) -> c_double;
    pub fn sinl(__x: c_double) -> c_double;
    pub fn __sinl(__x: c_double) -> c_double;
    pub fn tanl(__x: c_double) -> c_double;
    pub fn __tanl(__x: c_double) -> c_double;
    pub fn coshl(__x: c_double) -> c_double;
    pub fn __coshl(__x: c_double) -> c_double;
    pub fn sinhl(__x: c_double) -> c_double;
    pub fn __sinhl(__x: c_double) -> c_double;
    pub fn tanhl(__x: c_double) -> c_double;
    pub fn __tanhl(__x: c_double) -> c_double;
    pub fn sincosl(__x: c_double, __sinx: *mut c_double,
                   __cosx: *mut c_double);
    pub fn __sincosl(__x: c_double, __sinx: *mut c_double,
                     __cosx: *mut c_double);
    pub fn acoshl(__x: c_double) -> c_double;
    pub fn __acoshl(__x: c_double) -> c_double;
    pub fn asinhl(__x: c_double) -> c_double;
    pub fn __asinhl(__x: c_double) -> c_double;
    pub fn atanhl(__x: c_double) -> c_double;
    pub fn __atanhl(__x: c_double) -> c_double;
    pub fn expl(__x: c_double) -> c_double;
    pub fn __expl(__x: c_double) -> c_double;
    pub fn frexpl(__x: c_double, __exponent: *mut c_int) -> c_double;
    pub fn __frexpl(__x: c_double, __exponent: *mut c_int) -> c_double;
    pub fn ldexpl(__x: c_double, __exponent: c_int) -> c_double;
    pub fn __ldexpl(__x: c_double, __exponent: c_int) -> c_double;
    pub fn logl(__x: c_double) -> c_double;
    pub fn __logl(__x: c_double) -> c_double;
    pub fn log10l(__x: c_double) -> c_double;
    pub fn __log10l(__x: c_double) -> c_double;
    pub fn modfl(__x: c_double, __iptr: *mut c_double) -> c_double;
    pub fn __modfl(__x: c_double, __iptr: *mut c_double) -> c_double;
    pub fn exp10l(__x: c_double) -> c_double;
    pub fn __exp10l(__x: c_double) -> c_double;
    pub fn pow10l(__x: c_double) -> c_double;
    pub fn __pow10l(__x: c_double) -> c_double;
    pub fn expm1l(__x: c_double) -> c_double;
    pub fn __expm1l(__x: c_double) -> c_double;
    pub fn log1pl(__x: c_double) -> c_double;
    pub fn __log1pl(__x: c_double) -> c_double;
    pub fn logbl(__x: c_double) -> c_double;
    pub fn __logbl(__x: c_double) -> c_double;
    pub fn exp2l(__x: c_double) -> c_double;
    pub fn __exp2l(__x: c_double) -> c_double;
    pub fn log2l(__x: c_double) -> c_double;
    pub fn __log2l(__x: c_double) -> c_double;
    pub fn powl(__x: c_double, __y: c_double) -> c_double;
    pub fn __powl(__x: c_double, __y: c_double) -> c_double;
    pub fn sqrtl(__x: c_double) -> c_double;
    pub fn __sqrtl(__x: c_double) -> c_double;
    pub fn hypotl(__x: c_double, __y: c_double) -> c_double;
    pub fn __hypotl(__x: c_double, __y: c_double) -> c_double;
    pub fn cbrtl(__x: c_double) -> c_double;
    pub fn __cbrtl(__x: c_double) -> c_double;
    pub fn ceill(__x: c_double) -> c_double;
    pub fn __ceill(__x: c_double) -> c_double;
    pub fn fabsl(__x: c_double) -> c_double;
    pub fn __fabsl(__x: c_double) -> c_double;
    pub fn floorl(__x: c_double) -> c_double;
    pub fn __floorl(__x: c_double) -> c_double;
    pub fn fmodl(__x: c_double, __y: c_double) -> c_double;
    pub fn __fmodl(__x: c_double, __y: c_double) -> c_double;
    pub fn __isinfl(__value: c_double) -> c_int;
    pub fn __finitel(__value: c_double) -> c_int;
    pub fn isinfl(__value: c_double) -> c_int;
    pub fn finitel(__value: c_double) -> c_int;
    pub fn dreml(__x: c_double, __y: c_double) -> c_double;
    pub fn __dreml(__x: c_double, __y: c_double) -> c_double;
    pub fn significandl(__x: c_double) -> c_double;
    pub fn __significandl(__x: c_double) -> c_double;
    pub fn copysignl(__x: c_double, __y: c_double) -> c_double;
    pub fn __copysignl(__x: c_double, __y: c_double) -> c_double;
    pub fn nanl(__tagb: *c_schar) -> c_double;
    pub fn __nanl(__tagb: *c_schar) -> c_double;
    pub fn __isnanl(__value: c_double) -> c_int;
    pub fn isnanl(__value: c_double) -> c_int;
    pub fn j0l(arg1: c_double) -> c_double;
    pub fn __j0l(arg1: c_double) -> c_double;
    pub fn j1l(arg1: c_double) -> c_double;
    pub fn __j1l(arg1: c_double) -> c_double;
    pub fn jnl(arg1: c_int, arg2: c_double) -> c_double;
    pub fn __jnl(arg1: c_int, arg2: c_double) -> c_double;
    pub fn y0l(arg1: c_double) -> c_double;
    pub fn __y0l(arg1: c_double) -> c_double;
    pub fn y1l(arg1: c_double) -> c_double;
    pub fn __y1l(arg1: c_double) -> c_double;
    pub fn ynl(arg1: c_int, arg2: c_double) -> c_double;
    pub fn __ynl(arg1: c_int, arg2: c_double) -> c_double;
    pub fn erfl(arg1: c_double) -> c_double;
    pub fn __erfl(arg1: c_double) -> c_double;
    pub fn erfcl(arg1: c_double) -> c_double;
    pub fn __erfcl(arg1: c_double) -> c_double;
    pub fn lgammal(arg1: c_double) -> c_double;
    pub fn __lgammal(arg1: c_double) -> c_double;
    pub fn tgammal(arg1: c_double) -> c_double;
    pub fn __tgammal(arg1: c_double) -> c_double;
    pub fn gammal(arg1: c_double) -> c_double;
    pub fn __gammal(arg1: c_double) -> c_double;
    pub fn lgammal_r(arg1: c_double, __signgamp: *mut c_int) -> c_double;
    pub fn __lgammal_r(arg1: c_double, __signgamp: *mut c_int) -> c_double;
    pub fn rintl(__x: c_double) -> c_double;
    pub fn __rintl(__x: c_double) -> c_double;
    pub fn nextafterl(__x: c_double, __y: c_double) -> c_double;
    pub fn __nextafterl(__x: c_double, __y: c_double) -> c_double;
    pub fn nexttowardl(__x: c_double, __y: c_double) -> c_double;
    pub fn __nexttowardl(__x: c_double, __y: c_double) -> c_double;
    pub fn remainderl(__x: c_double, __y: c_double) -> c_double;
    pub fn __remainderl(__x: c_double, __y: c_double) -> c_double;
    pub fn scalbnl(__x: c_double, __n: c_int) -> c_double;
    pub fn __scalbnl(__x: c_double, __n: c_int) -> c_double;
    pub fn ilogbl(__x: c_double) -> c_int;
    pub fn __ilogbl(__x: c_double) -> c_int;
    pub fn scalblnl(__x: c_double, __n: c_long) -> c_double;
    pub fn __scalblnl(__x: c_double, __n: c_long) -> c_double;
    pub fn nearbyintl(__x: c_double) -> c_double;
    pub fn __nearbyintl(__x: c_double) -> c_double;
    pub fn roundl(__x: c_double) -> c_double;
    pub fn __roundl(__x: c_double) -> c_double;
    pub fn truncl(__x: c_double) -> c_double;
    pub fn __truncl(__x: c_double) -> c_double;
    pub fn remquol(__x: c_double, __y: c_double, __quo: *mut c_int) ->
     c_double;
    pub fn __remquol(__x: c_double, __y: c_double, __quo: *mut c_int) ->
     c_double;
    pub fn lrintl(__x: c_double) -> c_long;
    pub fn __lrintl(__x: c_double) -> c_long;
    pub fn llrintl(__x: c_double) -> c_longlong;
    pub fn __llrintl(__x: c_double) -> c_longlong;
    pub fn lroundl(__x: c_double) -> c_long;
    pub fn __lroundl(__x: c_double) -> c_long;
    pub fn llroundl(__x: c_double) -> c_longlong;
    pub fn __llroundl(__x: c_double) -> c_longlong;
    pub fn fdiml(__x: c_double, __y: c_double) -> c_double;
    pub fn __fdiml(__x: c_double, __y: c_double) -> c_double;
    pub fn fmaxl(__x: c_double, __y: c_double) -> c_double;
    pub fn __fmaxl(__x: c_double, __y: c_double) -> c_double;
    pub fn fminl(__x: c_double, __y: c_double) -> c_double;
    pub fn __fminl(__x: c_double, __y: c_double) -> c_double;
    pub fn __fpclassifyl(__value: c_double) -> c_int;
    pub fn __signbitl(__value: c_double) -> c_int;
    pub fn fmal(__x: c_double, __y: c_double, __z: c_double) -> c_double;
    pub fn __fmal(__x: c_double, __y: c_double, __z: c_double) -> c_double;
    pub fn scalbl(__x: c_double, __n: c_double) -> c_double;
    pub fn __scalbl(__x: c_double, __n: c_double) -> c_double;
    pub fn matherr(__exc: *mut Struct_exception) -> c_int;
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut Struct_timex) ->
     c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut c_schar, __maxsize: size_t, __format: *c_schar,
                    __tp: *Struct_tm) -> size_t;
    pub fn strptime(__s: *c_schar, __fmt: *c_schar, __tp: *mut Struct_tm) ->
     *mut c_schar;
    pub fn strftime_l(__s: *mut c_schar, __maxsize: size_t,
                      __format: *c_schar, __tp: *Struct_tm, __loc: __locale_t)
     -> size_t;
    pub fn strptime_l(__s: *c_schar, __fmt: *c_schar, __tp: *mut Struct_tm,
                      __loc: __locale_t) -> *mut c_schar;
    pub fn gmtime(__timer: *time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *time_t, __tp: *mut Struct_tm) -> *mut Struct_tm;
    pub fn localtime_r(__timer: *time_t, __tp: *mut Struct_tm) ->
     *mut Struct_tm;
    pub fn asctime(__tp: *Struct_tm) -> *mut c_schar;
    pub fn ctime(__timer: *time_t) -> *mut c_schar;
    pub fn asctime_r(__tp: *Struct_tm, __buf: *mut c_schar) -> *mut c_schar;
    pub fn ctime_r(__timer: *time_t, __buf: *mut c_schar) -> *mut c_schar;
    pub fn tzset();
    pub fn stime(__when: *time_t) -> c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: c_int) -> c_int;
    pub fn nanosleep(__requested_time: *Struct_timespec,
                     __remaining: *mut Struct_timespec) -> c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec) ->
     c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec) ->
     c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *Struct_timespec) ->
     c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: c_int,
                           __req: *Struct_timespec,
                           __rem: *mut Struct_timespec) -> c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) ->
     c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> c_int;
    pub fn timer_delete(__timerid: timer_t) -> c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: c_int,
                         __value: *Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> c_int;
    pub fn getdate(__string: *c_schar) -> *mut Struct_tm;
    pub fn getdate_r(__string: *c_schar, __resbufp: *mut Struct_tm) -> c_int;
    pub fn GetPageGeometry(arg1: *c_schar) -> *mut c_schar;
    pub fn IsGeometry(arg1: *c_schar) -> MagickBooleanType;
    pub fn IsSceneGeometry(arg1: *c_schar, arg2: MagickBooleanType) ->
     MagickBooleanType;
    pub fn GetGeometry(arg1: *c_schar, arg2: *mut ssize_t, arg3: *mut ssize_t,
                       arg4: *mut size_t, arg5: *mut size_t) ->
     MagickStatusType;
    pub fn ParseAbsoluteGeometry(arg1: *c_schar, arg2: *mut RectangleInfo) ->
     MagickStatusType;
    pub fn ParseAffineGeometry(arg1: *c_schar, arg2: *mut AffineMatrix,
                               arg3: *mut ExceptionInfo) -> MagickStatusType;
    pub fn ParseGeometry(arg1: *c_schar, arg2: *mut GeometryInfo) ->
     MagickStatusType;
    pub fn ParseGravityGeometry(arg1: *Image, arg2: *c_schar,
                                arg3: *mut RectangleInfo,
                                arg4: *mut ExceptionInfo) -> MagickStatusType;
    pub fn ParseMetaGeometry(arg1: *c_schar, arg2: *mut ssize_t,
                             arg3: *mut ssize_t, arg4: *mut size_t,
                             arg5: *mut size_t) -> MagickStatusType;
    pub fn ParsePageGeometry(arg1: *Image, arg2: *c_schar,
                             arg3: *mut RectangleInfo,
                             arg4: *mut ExceptionInfo) -> MagickStatusType;
    pub fn ParseRegionGeometry(arg1: *Image, arg2: *c_schar,
                               arg3: *mut RectangleInfo,
                               arg4: *mut ExceptionInfo) -> MagickStatusType;
    pub fn GravityAdjustGeometry(arg1: size_t, arg2: size_t,
                                 arg3: GravityType, arg4: *mut RectangleInfo);
    pub fn SetGeometry(arg1: *Image, arg2: *mut RectangleInfo);
    pub fn SetGeometryInfo(arg1: *mut GeometryInfo);
    pub fn RGBTransformImage(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    pub fn SetImageColorspace(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    pub fn TransformImageColorspace(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    pub fn TransformRGBImage(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    pub fn ConstituteImage(arg1: size_t, arg2: size_t, arg3: *c_schar,
                           arg4: StorageType, arg5: *c_void,
                           arg6: *mut ExceptionInfo) -> *mut Image;
    pub fn PingImage(arg1: *ImageInfo, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn PingImages(arg1: *ImageInfo, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn ReadImage(arg1: *ImageInfo, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn ReadImages(arg1: *ImageInfo, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn ReadInlineImage(arg1: *ImageInfo, arg2: *c_schar,
                           arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ConstituteComponentGenesis() -> MagickBooleanType;
    pub fn WriteImage(arg1: *ImageInfo, arg2: *mut Image) ->
     MagickBooleanType;
    pub fn WriteImages(arg1: *ImageInfo, arg2: *mut Image, arg3: *c_schar,
                       arg4: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn ConstituteComponentTerminus();
    pub fn ExportImagePixels(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                             arg4: size_t, arg5: size_t, arg6: *c_schar,
                             arg7: StorageType, arg8: *mut c_void,
                             arg9: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn ImportImagePixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                             arg4: size_t, arg5: size_t, arg6: *c_schar,
                             arg7: StorageType, arg8: *c_void) ->
     MagickBooleanType;
    pub fn InterpolateMagickPixelPacket(arg1: *Image, arg2: *CacheView_,
                                        arg3: InterpolatePixelMethod,
                                        arg4: c_double, arg5: c_double,
                                        arg6: *mut MagickPixelPacket,
                                        arg7: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn CloneMagickPixelPacket(arg1: *MagickPixelPacket) ->
     *mut MagickPixelPacket;
    pub fn DecodePixelGamma(arg1: MagickRealType) -> MagickRealType;
    pub fn EncodePixelGamma(arg1: MagickRealType) -> MagickRealType;
    pub fn GetPixelIntensity(image: *Image, arg1: *PixelPacket) ->
     MagickRealType;
    pub fn GetMagickPixelPacket(arg1: *Image, arg2: *mut MagickPixelPacket);
    pub fn SemaphoreComponentGenesis() -> MagickBooleanType;
    pub fn AllocateSemaphoreInfo() -> *mut SemaphoreInfo;
    pub fn AcquireSemaphoreInfo(arg1: *mut *mut SemaphoreInfo);
    pub fn DestroySemaphoreInfo(arg1: *mut *mut SemaphoreInfo);
    pub fn LockSemaphoreInfo(arg1: *mut SemaphoreInfo);
    pub fn RelinquishSemaphoreInfo(arg1: *mut SemaphoreInfo);
    pub fn SemaphoreComponentTerminus();
    pub fn UnlockSemaphoreInfo(arg1: *mut SemaphoreInfo);
    pub fn GetExceptionMessage(arg1: c_int) -> *mut c_schar;
    pub fn GetLocaleExceptionMessage(arg1: ExceptionType, arg2: *c_schar) ->
     *c_schar;
    pub fn SetErrorHandler(arg1: ErrorHandler) -> ErrorHandler;
    pub fn AcquireExceptionInfo() -> *mut ExceptionInfo;
    pub fn DestroyExceptionInfo(arg1: *mut ExceptionInfo) ->
     *mut ExceptionInfo;
    pub fn SetFatalErrorHandler(arg1: FatalErrorHandler) -> FatalErrorHandler;
    pub fn ThrowException(arg1: *mut ExceptionInfo, arg2: ExceptionType,
                          arg3: *c_schar, arg4: *c_schar) ->
     MagickBooleanType;
    pub fn ThrowMagickException(arg1: *mut ExceptionInfo, arg2: *c_schar,
                                arg3: *c_schar, arg4: size_t,
                                arg5: ExceptionType, arg6: *c_schar,
                                arg7: *c_schar, ...) -> MagickBooleanType;
    pub fn CatchException(arg1: *mut ExceptionInfo);
    pub fn ClearMagickException(arg1: *mut ExceptionInfo);
    pub fn GetExceptionInfo(arg1: *mut ExceptionInfo);
    pub fn InheritException(arg1: *mut ExceptionInfo, arg2: *ExceptionInfo);
    pub fn MagickError(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
    pub fn MagickFatalError(arg1: ExceptionType, arg2: *c_schar,
                            arg3: *c_schar);
    pub fn MagickWarning(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
    pub fn SetWarningHandler(arg1: WarningHandler) -> WarningHandler;
    pub fn GetColorList(arg1: *c_schar, arg2: *mut size_t,
                        arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetColorInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *ColorInfo;
    pub fn GetColorInfoList(arg1: *c_schar, arg2: *mut size_t,
                            arg3: *mut ExceptionInfo) -> *mut *ColorInfo;
    pub fn ColorComponentGenesis() -> MagickBooleanType;
    pub fn IsColorSimilar(arg1: *Image, arg2: *PixelPacket,
                          arg3: *PixelPacket) -> MagickBooleanType;
    pub fn IsGrayImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn IsImageSimilar(arg1: *Image, arg2: *Image, x: *mut ssize_t,
                          y: *mut ssize_t, arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn IsMagickColorSimilar(arg1: *MagickPixelPacket,
                                arg2: *MagickPixelPacket) ->
     MagickBooleanType;
    pub fn IsMonochromeImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn IsOpacitySimilar(arg1: *Image, arg2: *PixelPacket,
                            arg3: *PixelPacket) -> MagickBooleanType;
    pub fn IsOpaqueImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ListColorInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn QueryColorCompliance(arg1: *c_schar, arg2: ComplianceType,
                                arg3: *mut PixelPacket,
                                arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn QueryColorDatabase(arg1: *c_schar, arg2: *mut PixelPacket,
                              arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn QueryColorname(arg1: *Image, arg2: *PixelPacket,
                          arg3: ComplianceType, arg4: *mut c_schar,
                          arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn QueryMagickColorCompliance(arg1: *c_schar, arg2: ComplianceType,
                                      arg3: *mut MagickPixelPacket,
                                      arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn QueryMagickColor(arg1: *c_schar, arg2: *mut MagickPixelPacket,
                            arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn QueryMagickColorname(arg1: *Image, arg2: *MagickPixelPacket,
                                arg3: ComplianceType, arg4: *mut c_schar,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ColorComponentTerminus();
    pub fn ConcatenateColorComponent(arg1: *MagickPixelPacket,
                                     arg2: ChannelType, arg3: ComplianceType,
                                     arg4: *mut c_schar);
    pub fn GetColorTuple(arg1: *MagickPixelPacket, arg2: MagickBooleanType,
                         arg3: *mut c_schar);
    pub fn ReadStream(arg1: *ImageInfo, arg2: StreamHandler,
                      arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn WriteStream(arg1: *ImageInfo, arg2: *mut Image,
                       arg3: StreamHandler) -> MagickBooleanType;
    pub fn GetBlobFileHandle(arg1: *Image) -> *mut FILE;
    pub fn BlobToImage(arg1: *ImageInfo, arg2: *c_void, arg3: size_t,
                       arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn PingBlob(arg1: *ImageInfo, arg2: *c_void, arg3: size_t,
                    arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn BlobToFile(arg1: *mut c_schar, arg2: *c_void, arg3: size_t,
                      arg4: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn FileToImage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    pub fn GetBlobError(arg1: *Image) -> MagickBooleanType;
    pub fn ImageToFile(arg1: *mut Image, arg2: *mut c_schar,
                       arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn InjectImageBlob(arg1: *ImageInfo, arg2: *mut Image,
                           arg3: *mut Image, arg4: *c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn IsBlobExempt(arg1: *Image) -> MagickBooleanType;
    pub fn IsBlobSeekable(arg1: *Image) -> MagickBooleanType;
    pub fn IsBlobTemporary(arg1: *Image) -> MagickBooleanType;
    pub fn GetBlobSize(arg1: *Image) -> MagickSizeType;
    pub fn GetBlobStreamHandler(arg1: *Image) -> StreamHandler;
    pub fn FileToBlob(arg1: *c_schar, arg2: size_t, arg3: *mut size_t,
                      arg4: *mut ExceptionInfo) -> *mut c_uchar;
    pub fn GetBlobStreamData(arg1: *Image) -> *mut c_uchar;
    pub fn ImageToBlob(arg1: *ImageInfo, arg2: *mut Image, arg3: *mut size_t,
                       arg4: *mut ExceptionInfo) -> *mut c_uchar;
    pub fn ImagesToBlob(arg1: *ImageInfo, arg2: *mut Image, arg3: *mut size_t,
                        arg4: *mut ExceptionInfo) -> *mut c_uchar;
    pub fn DestroyBlob(arg1: *mut Image);
    pub fn DuplicateBlob(arg1: *mut Image, arg2: *Image);
    pub fn SetBlobExempt(arg1: *mut Image, arg2: MagickBooleanType);
    pub fn AcquireAuthenticCacheView(arg1: *Image, arg2: *mut ExceptionInfo)
     -> *mut CacheView;
    pub fn AcquireCacheView(arg1: *Image) -> *mut CacheView;
    pub fn AcquireVirtualCacheView(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut CacheView;
    pub fn CloneCacheView(arg1: *CacheView) -> *mut CacheView;
    pub fn DestroyCacheView(arg1: *mut CacheView) -> *mut CacheView;
    pub fn GetCacheViewStorageClass(arg1: *CacheView) -> ClassType;
    pub fn GetCacheViewColorspace(arg1: *CacheView) -> ColorspaceType;
    pub fn GetCacheViewVirtualIndexQueue(arg1: *CacheView) -> *IndexPacket;
    pub fn GetCacheViewVirtualPixels(arg1: *CacheView, arg2: ssize_t,
                                     arg3: ssize_t, arg4: size_t,
                                     arg5: size_t, arg6: *mut ExceptionInfo)
     -> *PixelPacket;
    pub fn GetCacheViewVirtualPixelQueue(arg1: *CacheView) -> *PixelPacket;
    pub fn GetCacheViewException(arg1: *CacheView) -> *mut ExceptionInfo;
    pub fn GetCacheViewAuthenticIndexQueue(arg1: *mut CacheView) ->
     *mut IndexPacket;
    pub fn GetOneCacheViewVirtualPixel(arg1: *CacheView, arg2: ssize_t,
                                       arg3: ssize_t, arg4: *mut PixelPacket,
                                       arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetOneCacheViewVirtualMethodPixel(arg1: *CacheView,
                                             arg2: VirtualPixelMethod,
                                             arg3: ssize_t, arg4: ssize_t,
                                             arg5: *mut PixelPacket,
                                             arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetOneCacheViewAuthenticPixel(arg1: *CacheView, arg2: ssize_t,
                                         arg3: ssize_t,
                                         arg4: *mut PixelPacket,
                                         arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn SetCacheViewStorageClass(arg1: *mut CacheView, arg2: ClassType) ->
     MagickBooleanType;
    pub fn SetCacheViewVirtualPixelMethod(arg1: *mut CacheView,
                                          arg2: VirtualPixelMethod) ->
     MagickBooleanType;
    pub fn SyncCacheViewAuthenticPixels(arg1: *mut CacheView,
                                        arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetCacheViewExtent(arg1: *CacheView) -> MagickSizeType;
    pub fn GetCacheViewChannels(arg1: *CacheView) -> size_t;
    pub fn GetCacheViewAuthenticPixelQueue(arg1: *mut CacheView) ->
     *mut PixelPacket;
    pub fn GetCacheViewAuthenticPixels(arg1: *mut CacheView, arg2: ssize_t,
                                       arg3: ssize_t, arg4: size_t,
                                       arg5: size_t, arg6: *mut ExceptionInfo)
     -> *mut PixelPacket;
    pub fn QueueCacheViewAuthenticPixels(arg1: *mut CacheView, arg2: ssize_t,
                                         arg3: ssize_t, arg4: size_t,
                                         arg5: size_t,
                                         arg6: *mut ExceptionInfo) ->
     *mut PixelPacket;
    pub fn CompositeImage(arg1: *mut Image, arg2: CompositeOperator,
                          arg3: *Image, arg4: ssize_t, arg5: ssize_t) ->
     MagickBooleanType;
    pub fn CompositeImageChannel(arg1: *mut Image, arg2: ChannelType,
                                 arg3: CompositeOperator, arg4: *Image,
                                 arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    pub fn TextureImage(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    pub fn HuffmanDecodeImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn HuffmanEncodeImage(arg1: *ImageInfo, arg2: *mut Image,
                              arg3: *mut Image) -> MagickBooleanType;
    pub fn LZWEncodeImage(arg1: *mut Image, arg2: size_t, arg3: *mut c_uchar)
     -> MagickBooleanType;
    pub fn PackbitsEncodeImage(arg1: *mut Image, arg2: size_t,
                               arg3: *mut c_uchar) -> MagickBooleanType;
    pub fn ZLIBEncodeImage(arg1: *mut Image, arg2: size_t, arg3: *mut c_uchar)
     -> MagickBooleanType;
    pub fn Ascii85Encode(arg1: *mut Image, arg2: c_uchar);
    pub fn Ascii85Flush(arg1: *mut Image);
    pub fn Ascii85Initialize(arg1: *mut Image);
    pub fn AcquireKernelInfo(arg1: *c_schar) -> *mut KernelInfo;
    pub fn AcquireKernelBuiltIn(arg1: KernelInfoType, arg2: *GeometryInfo) ->
     *mut KernelInfo;
    pub fn CloneKernelInfo(arg1: *KernelInfo) -> *mut KernelInfo;
    pub fn DestroyKernelInfo(arg1: *mut KernelInfo) -> *mut KernelInfo;
    pub fn MorphologyImage(arg1: *Image, arg2: MorphologyMethod,
                           arg3: ssize_t, arg4: *KernelInfo,
                           arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn MorphologyImageChannel(arg1: *Image, arg2: ChannelType,
                                  arg3: MorphologyMethod, arg4: ssize_t,
                                  arg5: *KernelInfo, arg6: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ScaleGeometryKernelInfo(arg1: *mut KernelInfo, arg2: *c_schar);
    pub fn ShowKernelInfo(arg1: *KernelInfo);
    pub fn AdaptiveBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                             arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn AdaptiveBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                    arg3: c_double, arg4: c_double,
                                    arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn AdaptiveSharpenImage(arg1: *Image, arg2: c_double, arg3: c_double,
                                arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn AdaptiveSharpenImageChannel(arg1: *Image, arg2: ChannelType,
                                       arg3: c_double, arg4: c_double,
                                       arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn BlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn BlurImageChannel(arg1: *Image, arg2: ChannelType, arg3: c_double,
                            arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn ConvolveImage(arg1: *Image, arg2: size_t, arg3: *c_double,
                         arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ConvolveImageChannel(arg1: *Image, arg2: ChannelType, arg3: size_t,
                                arg4: *c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn DespeckleImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn EdgeImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn EmbossImage(arg1: *Image, arg2: c_double, arg3: c_double,
                       arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn FilterImage(arg1: *Image, arg2: *KernelInfo,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn FilterImageChannel(arg1: *Image, arg2: ChannelType,
                              arg3: *KernelInfo, arg4: *mut ExceptionInfo) ->
     *mut Image;
    pub fn GaussianBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                             arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn GaussianBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                    arg3: c_double, arg4: c_double,
                                    arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn MotionBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                           arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn MotionBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                  arg3: c_double, arg4: c_double,
                                  arg5: c_double, arg6: *mut ExceptionInfo) ->
     *mut Image;
    pub fn PreviewImage(arg1: *Image, arg2: PreviewType,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn RadialBlurImage(arg1: *Image, arg2: c_double,
                           arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn RadialBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                  arg3: c_double, arg4: *mut ExceptionInfo) ->
     *mut Image;
    pub fn SelectiveBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                              arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn SelectiveBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                     arg3: c_double, arg4: c_double,
                                     arg5: c_double, arg6: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ShadeImage(arg1: *Image, arg2: MagickBooleanType, arg3: c_double,
                      arg4: c_double, arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn SharpenImage(arg1: *Image, arg2: c_double, arg3: c_double,
                        arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn SharpenImageChannel(arg1: *Image, arg2: ChannelType,
                               arg3: c_double, arg4: c_double,
                               arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn SpreadImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn UnsharpMaskImage(arg1: *Image, arg2: c_double, arg3: c_double,
                            arg4: c_double, arg5: c_double,
                            arg6: *mut ExceptionInfo) -> *mut Image;
    pub fn UnsharpMaskImageChannel(arg1: *Image, arg2: ChannelType,
                                   arg3: c_double, arg4: c_double,
                                   arg5: c_double, arg6: c_double,
                                   arg7: *mut ExceptionInfo) -> *mut Image;
    pub fn CoalesceImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn DisposeImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn CompareImageLayers(arg1: *Image, arg2: ImageLayerMethod,
                              arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn DeconstructImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn MergeImageLayers(arg1: *mut Image, arg2: ImageLayerMethod,
                            arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn OptimizeImageLayers(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn OptimizePlusImageLayers(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn CompositeLayers(arg1: *mut Image, arg2: CompositeOperator,
                           arg3: *mut Image, arg4: ssize_t, arg5: ssize_t,
                           arg6: *mut ExceptionInfo);
    pub fn OptimizeImageTransparency(arg1: *Image, arg2: *mut ExceptionInfo);
    pub fn RemoveDuplicateLayers(arg1: *mut *mut Image,
                                 arg2: *mut ExceptionInfo);
    pub fn RemoveZeroDelayLayers(arg1: *mut *mut Image,
                                 arg2: *mut ExceptionInfo);
    pub fn DestroyHashmap(arg1: *mut HashmapInfo) -> *mut HashmapInfo;
    pub fn NewHashmap(arg1: size_t,
                      arg2: extern "C" fn(arg1: *c_void) -> size_t,
                      arg3:
                          extern "C" fn(arg1: *c_void, arg2: *c_void)
                              -> MagickBooleanType,
                      arg4: extern "C" fn(arg1: *mut c_void) -> *mut c_void,
                      arg5: extern "C" fn(arg1: *mut c_void) -> *mut c_void)
     -> *mut HashmapInfo;
    pub fn DestroyLinkedList(arg1: *mut LinkedListInfo,
                             arg2:
                                 extern "C" fn(arg1: *mut c_void)
                                     -> *mut c_void) -> *mut LinkedListInfo;
    pub fn NewLinkedList(arg1: size_t) -> *mut LinkedListInfo;
    pub fn AppendValueToLinkedList(arg1: *mut LinkedListInfo, arg2: *c_void)
     -> MagickBooleanType;
    pub fn CompareHashmapString(arg1: *c_void, arg2: *c_void) ->
     MagickBooleanType;
    pub fn CompareHashmapStringInfo(arg1: *c_void, arg2: *c_void) ->
     MagickBooleanType;
    pub fn InsertValueInLinkedList(arg1: *mut LinkedListInfo, arg2: size_t,
                                   arg3: *c_void) -> MagickBooleanType;
    pub fn InsertValueInSortedLinkedList(arg1: *mut LinkedListInfo,
                                         arg2:
                                             extern "C" fn
                                                 (arg1: *c_void,
                                                  arg2: *c_void) -> c_int,
                                         arg3: *mut *mut c_void,
                                         arg4: *c_void) -> MagickBooleanType;
    pub fn IsHashmapEmpty(arg1: *HashmapInfo) -> MagickBooleanType;
    pub fn IsLinkedListEmpty(arg1: *LinkedListInfo) -> MagickBooleanType;
    pub fn LinkedListToArray(arg1: *mut LinkedListInfo,
                             arg2: *mut *mut c_void) -> MagickBooleanType;
    pub fn PutEntryInHashmap(arg1: *mut HashmapInfo, arg2: *c_void,
                             arg3: *c_void) -> MagickBooleanType;
    pub fn GetNumberOfElementsInLinkedList(arg1: *LinkedListInfo) -> size_t;
    pub fn GetNumberOfEntriesInHashmap(arg1: *HashmapInfo) -> size_t;
    pub fn HashPointerType(arg1: *c_void) -> size_t;
    pub fn HashStringType(arg1: *c_void) -> size_t;
    pub fn HashStringInfoType(arg1: *c_void) -> size_t;
    pub fn ClearLinkedList(arg1: *mut LinkedListInfo,
                           arg2:
                               extern "C" fn(arg1: *mut c_void)
                                   -> *mut c_void);
    pub fn GetLastValueInLinkedList(arg1: *mut LinkedListInfo) -> *mut c_void;
    pub fn GetNextKeyInHashmap(arg1: *mut HashmapInfo) -> *mut c_void;
    pub fn GetNextValueInHashmap(arg1: *mut HashmapInfo) -> *mut c_void;
    pub fn GetNextValueInLinkedList(arg1: *mut LinkedListInfo) -> *mut c_void;
    pub fn GetValueFromHashmap(arg1: *mut HashmapInfo, arg2: *c_void) ->
     *mut c_void;
    pub fn GetValueFromLinkedList(arg1: *mut LinkedListInfo, arg2: size_t) ->
     *mut c_void;
    pub fn RemoveElementByValueFromLinkedList(arg1: *mut LinkedListInfo,
                                              arg2: *c_void) -> *mut c_void;
    pub fn RemoveElementFromLinkedList(arg1: *mut LinkedListInfo,
                                       arg2: size_t) -> *mut c_void;
    pub fn RemoveEntryFromHashmap(arg1: *mut HashmapInfo, arg2: *c_void) ->
     *mut c_void;
    pub fn RemoveLastElementFromLinkedList(arg1: *mut LinkedListInfo) ->
     *mut c_void;
    pub fn ResetHashmapIterator(arg1: *mut HashmapInfo);
    pub fn ResetLinkedListIterator(arg1: *mut LinkedListInfo);
    pub fn GetLocaleList(arg1: *c_schar, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetLocaleMessage(arg1: *c_schar) -> *c_schar;
    pub fn GetLocaleInfo_(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *LocaleInfo;
    pub fn GetLocaleInfoList(arg1: *c_schar, arg2: *mut size_t,
                             arg3: *mut ExceptionInfo) -> *mut *LocaleInfo;
    pub fn InterpretLocaleValue(arg1: *c_schar, arg2: *mut *mut c_schar) ->
     c_double;
    pub fn DestroyLocaleOptions(arg1: *mut LinkedListInfo) ->
     *mut LinkedListInfo;
    pub fn GetLocaleOptions(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut LinkedListInfo;
    pub fn ListLocaleInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn LocaleComponentGenesis() -> MagickBooleanType;
    pub fn FormatLocaleFile(arg1: *mut FILE, arg2: *c_schar, ...) -> ssize_t;
    pub fn FormatLocaleString(arg1: *mut c_schar, arg2: size_t,
                              arg3: *c_schar, ...) -> ssize_t;
    pub fn LocaleComponentTerminus();
    pub fn SetImageProgressMonitor(arg1: *mut Image,
                                   arg2: MagickProgressMonitor,
                                   arg3: *mut c_void) ->
     MagickProgressMonitor;
    pub fn SetImageInfoProgressMonitor(arg1: *mut ImageInfo,
                                       arg2: MagickProgressMonitor,
                                       arg3: *mut c_void) ->
     MagickProgressMonitor;
    pub fn AcquireString(arg1: *c_schar) -> *mut c_schar;
    pub fn CloneString(arg1: *mut *mut c_schar, arg2: *c_schar) ->
     *mut c_schar;
    pub fn ConstantString(arg1: *c_schar) -> *mut c_schar;
    pub fn DestroyString(arg1: *mut c_schar) -> *mut c_schar;
    pub fn DestroyStringList(arg1: *mut *mut c_schar) -> *mut *mut c_schar;
    pub fn EscapeString(arg1: *c_schar, arg2: c_schar) -> *mut c_schar;
    pub fn FileToString(arg1: *c_schar, arg2: size_t,
                        arg3: *mut ExceptionInfo) -> *mut c_schar;
    pub fn GetEnvironmentValue(arg1: *c_schar) -> *mut c_schar;
    pub fn StringInfoToHexString(arg1: *StringInfo) -> *mut c_schar;
    pub fn StringInfoToString(arg1: *StringInfo) -> *mut c_schar;
    pub fn StringToArgv(arg1: *c_schar, arg2: *mut c_int) ->
     *mut *mut c_schar;
    pub fn StringToken(arg1: *c_schar, arg2: *mut *mut c_schar) ->
     *mut c_schar;
    pub fn StringToList(arg1: *c_schar) -> *mut *mut c_schar;
    pub fn GetStringInfoPath(arg1: *StringInfo) -> *c_schar;
    pub fn InterpretSiPrefixValue(arg1: *c_schar, arg2: *mut *mut c_schar) ->
     c_double;
    pub fn StringToArrayOfDoubles(arg1: *c_schar, arg2: *mut ssize_t,
                                  arg3: *mut ExceptionInfo) -> *mut c_double;
    pub fn CompareStringInfo(arg1: *StringInfo, arg2: *StringInfo) -> c_int;
    pub fn LocaleCompare(arg1: *c_schar, arg2: *c_schar) -> c_int;
    pub fn LocaleNCompare(arg1: *c_schar, arg2: *c_schar, arg3: size_t) ->
     c_int;
    pub fn ConcatenateString(arg1: *mut *mut c_schar, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn IsStringTrue(arg1: *c_schar) -> MagickBooleanType;
    pub fn IsStringNotFalse(arg1: *c_schar) -> MagickBooleanType;
    pub fn SubstituteString(arg1: *mut *mut c_schar, arg2: *c_schar,
                            arg3: *c_schar) -> MagickBooleanType;
    pub fn ConcatenateMagickString(arg1: *mut c_schar, arg2: *c_schar,
                                   arg3: size_t) -> size_t;
    pub fn CopyMagickString(arg1: *mut c_schar, arg2: *c_schar, arg3: size_t)
     -> size_t;
    pub fn GetStringInfoLength(arg1: *StringInfo) -> size_t;
    pub fn FormatMagickSize(arg1: MagickSizeType, arg2: MagickBooleanType,
                            arg3: *mut c_schar) -> ssize_t;
    pub fn FormatMagickTime(arg1: time_t, arg2: size_t, arg3: *mut c_schar) ->
     ssize_t;
    pub fn AcquireStringInfo(arg1: size_t) -> *mut StringInfo;
    pub fn BlobToStringInfo(arg1: *c_void, arg2: size_t) -> *mut StringInfo;
    pub fn CloneStringInfo(arg1: *StringInfo) -> *mut StringInfo;
    pub fn ConfigureFileToStringInfo(arg1: *c_schar) -> *mut StringInfo;
    pub fn DestroyStringInfo(arg1: *mut StringInfo) -> *mut StringInfo;
    pub fn FileToStringInfo(arg1: *c_schar, arg2: size_t,
                            arg3: *mut ExceptionInfo) -> *mut StringInfo;
    pub fn SplitStringInfo(arg1: *mut StringInfo, arg2: size_t) ->
     *mut StringInfo;
    pub fn StringToStringInfo(arg1: *c_schar) -> *mut StringInfo;
    pub fn GetStringInfoDatum(arg1: *StringInfo) -> *mut c_uchar;
    pub fn ConcatenateStringInfo(arg1: *mut StringInfo, arg2: *StringInfo);
    pub fn LocaleLower(arg1: *mut c_schar);
    pub fn LocaleUpper(arg1: *mut c_schar);
    pub fn PrintStringInfo(file: *mut FILE, arg1: *c_schar,
                           arg2: *StringInfo);
    pub fn ResetStringInfo(arg1: *mut StringInfo);
    pub fn SetStringInfo(arg1: *mut StringInfo, arg2: *StringInfo);
    pub fn SetStringInfoDatum(arg1: *mut StringInfo, arg2: *c_uchar);
    pub fn SetStringInfoLength(arg1: *mut StringInfo, arg2: size_t);
    pub fn SetStringInfoPath(arg1: *mut StringInfo, arg2: *c_schar);
    pub fn StripString(arg1: *mut c_schar);
    pub fn GetNextImageProfile(arg1: *Image) -> *mut c_schar;
    pub fn GetImageProfile(arg1: *Image, arg2: *c_schar) -> *StringInfo;
    pub fn CloneImageProfiles(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    pub fn DeleteImageProfile(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn ProfileImage(arg1: *mut Image, arg2: *c_schar, arg3: *c_void,
                        arg4: size_t, arg5: MagickBooleanType) ->
     MagickBooleanType;
    pub fn SetImageProfile(arg1: *mut Image, arg2: *c_schar,
                           arg3: *StringInfo) -> MagickBooleanType;
    pub fn SyncImageProfiles(arg1: *mut Image) -> MagickBooleanType;
    pub fn RemoveImageProfile(arg1: *mut Image, arg2: *c_schar) ->
     *mut StringInfo;
    pub fn DestroyImageProfiles(arg1: *mut Image);
    pub fn ResetImageProfileIterator(arg1: *Image);
    pub fn GetQuantumEndian(arg1: *QuantumInfo) -> EndianType;
    pub fn SetQuantumDepth(arg1: *Image, arg2: *mut QuantumInfo, arg3: size_t)
     -> MagickBooleanType;
    pub fn SetQuantumEndian(arg1: *Image, arg2: *mut QuantumInfo,
                            arg3: EndianType) -> MagickBooleanType;
    pub fn SetQuantumFormat(arg1: *Image, arg2: *mut QuantumInfo,
                            arg3: QuantumFormatType) -> MagickBooleanType;
    pub fn SetQuantumPad(arg1: *Image, arg2: *mut QuantumInfo, arg3: size_t)
     -> MagickBooleanType;
    pub fn GetQuantumFormat(arg1: *QuantumInfo) -> QuantumFormatType;
    pub fn AcquireQuantumInfo(arg1: *ImageInfo, arg2: *mut Image) ->
     *mut QuantumInfo;
    pub fn DestroyQuantumInfo(arg1: *mut QuantumInfo) -> *mut QuantumInfo;
    pub fn GetQuantumType(arg1: *mut Image, arg2: *mut ExceptionInfo) ->
     QuantumType;
    pub fn ExportQuantumPixels(arg1: *Image, arg2: *CacheView,
                               arg3: *QuantumInfo, arg4: QuantumType,
                               arg5: *mut c_uchar, arg6: *mut ExceptionInfo)
     -> size_t;
    pub fn GetQuantumExtent(arg1: *Image, arg2: *QuantumInfo,
                            arg3: QuantumType) -> size_t;
    pub fn ImportQuantumPixels(arg1: *mut Image, arg2: *mut CacheView,
                               arg3: *QuantumInfo, arg4: QuantumType,
                               arg5: *c_uchar, arg6: *mut ExceptionInfo) ->
     size_t;
    pub fn GetQuantumPixels(arg1: *QuantumInfo) -> *mut c_uchar;
    pub fn GetQuantumInfo(arg1: *ImageInfo, arg2: *mut QuantumInfo);
    pub fn SetQuantumAlphaType(arg1: *mut QuantumInfo,
                               arg2: QuantumAlphaType);
    pub fn SetQuantumImageType(arg1: *mut Image, arg2: QuantumType);
    pub fn SetQuantumMinIsWhite(arg1: *mut QuantumInfo,
                                arg2: MagickBooleanType);
    pub fn SetQuantumPack(arg1: *mut QuantumInfo, arg2: MagickBooleanType);
    pub fn SetQuantumQuantum(arg1: *mut QuantumInfo, arg2: size_t);
    pub fn SetQuantumScale(arg1: *mut QuantumInfo, arg2: c_double);
    pub fn ResamplePixelColor(arg1: *mut ResampleFilter, arg2: c_double,
                              arg3: c_double, arg4: *mut MagickPixelPacket) ->
     MagickBooleanType;
    pub fn SetResampleFilterInterpolateMethod(arg1: *mut ResampleFilter,
                                              arg2: InterpolatePixelMethod) ->
     MagickBooleanType;
    pub fn SetResampleFilterVirtualPixelMethod(arg1: *mut ResampleFilter,
                                               arg2: VirtualPixelMethod) ->
     MagickBooleanType;
    pub fn AcquireResampleFilter(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut ResampleFilter;
    pub fn DestroyResampleFilter(arg1: *mut ResampleFilter) ->
     *mut ResampleFilter;
    pub fn ScaleResampleFilter(arg1: *mut ResampleFilter, arg2: c_double,
                               arg3: c_double, arg4: c_double,
                               arg5: c_double);
    pub fn SetResampleFilter(arg1: *mut ResampleFilter, arg2: FilterTypes,
                             arg3: c_double);
    pub fn AdaptiveResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                               arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn InterpolativeResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                                    arg4: InterpolatePixelMethod,
                                    arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn LiquidRescaleImage(arg1: *Image, arg2: size_t, arg3: size_t,
                              arg4: c_double, arg5: c_double,
                              arg6: *mut ExceptionInfo) -> *mut Image;
    pub fn MagnifyImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn MinifyImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn ResampleImage(arg1: *Image, arg2: c_double, arg3: c_double,
                         arg4: FilterTypes, arg5: c_double,
                         arg6: *mut ExceptionInfo) -> *mut Image;
    pub fn ResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                       arg4: FilterTypes, arg5: c_double,
                       arg6: *mut ExceptionInfo) -> *mut Image;
    pub fn SampleImage(arg1: *Image, arg2: size_t, arg3: size_t,
                       arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ScaleImage(arg1: *Image, arg2: size_t, arg3: size_t,
                      arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ThumbnailImage(arg1: *Image, arg2: size_t, arg3: size_t,
                          arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn GetElapsedTime(arg1: *mut TimerInfo) -> c_double;
    pub fn GetUserTime(arg1: *mut TimerInfo) -> c_double;
    pub fn ContinueTimer(arg1: *mut TimerInfo) -> MagickBooleanType;
    pub fn AcquireTimerInfo() -> *mut TimerInfo;
    pub fn DestroyTimerInfo(arg1: *mut TimerInfo) -> *mut TimerInfo;
    pub fn GetTimerInfo(arg1: *mut TimerInfo);
    pub fn ResetTimer(arg1: *mut TimerInfo);
    pub fn StartTimer(arg1: *mut TimerInfo, arg2: MagickBooleanType);
    pub fn CatchImageException(arg1: *mut Image) -> ExceptionType;
    pub fn GetImageInfoFile(arg1: *ImageInfo) -> *mut FILE;
    pub fn AcquireImage(arg1: *ImageInfo) -> *mut Image;
    pub fn AppendImages(arg1: *Image, arg2: MagickBooleanType,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn CloneImage(arg1: *Image, arg2: size_t, arg3: size_t,
                      arg4: MagickBooleanType, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn DestroyImage(arg1: *mut Image) -> *mut Image;
    pub fn GetImageClipMask(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn GetImageMask(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn NewMagickImage(arg1: *ImageInfo, arg2: size_t, arg3: size_t,
                          arg4: *MagickPixelPacket) -> *mut Image;
    pub fn ReferenceImage(arg1: *mut Image) -> *mut Image;
    pub fn SmushImages(arg1: *Image, arg2: MagickBooleanType, arg3: ssize_t,
                       arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn AcquireImageInfo() -> *mut ImageInfo;
    pub fn CloneImageInfo(arg1: *ImageInfo) -> *mut ImageInfo;
    pub fn DestroyImageInfo(arg1: *mut ImageInfo) -> *mut ImageInfo;
    pub fn ClipImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn ClipImagePath(arg1: *mut Image, arg2: *c_schar,
                         arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn IsTaintImage(arg1: *Image) -> MagickBooleanType;
    pub fn IsMagickConflict(arg1: *c_schar) -> MagickBooleanType;
    pub fn IsHighDynamicRangeImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn IsImageObject(arg1: *Image) -> MagickBooleanType;
    pub fn ListMagickInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ModifyImage(arg1: *mut *mut Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ResetImagePage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn SetImageBackgroundColor(arg1: *mut Image) -> MagickBooleanType;
    pub fn SetImageClipMask(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    pub fn SetImageColor(arg1: *mut Image, arg2: *MagickPixelPacket) ->
     MagickBooleanType;
    pub fn SetImageExtent(arg1: *mut Image, arg2: size_t, arg3: size_t) ->
     MagickBooleanType;
    pub fn SetImageInfo(arg1: *mut ImageInfo, arg2: c_uint,
                        arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn SetImageMask(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    pub fn SetImageOpacity(arg1: *mut Image, arg2: Quantum) ->
     MagickBooleanType;
    pub fn SetImageChannels(arg1: *mut Image, arg2: size_t) ->
     MagickBooleanType;
    pub fn SetImageStorageClass(arg1: *mut Image, arg2: ClassType) ->
     MagickBooleanType;
    pub fn StripImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn SyncImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn SyncImageSettings(arg1: *ImageInfo, arg2: *mut Image) ->
     MagickBooleanType;
    pub fn SyncImagesSettings(arg1: *mut ImageInfo, arg2: *mut Image) ->
     MagickBooleanType;
    pub fn InterpretImageFilename(arg1: *ImageInfo, arg2: *mut Image,
                                  arg3: *c_schar, arg4: c_int,
                                  arg5: *mut c_schar) -> size_t;
    pub fn GetImageReferenceCount(arg1: *mut Image) -> ssize_t;
    pub fn GetImageChannels(arg1: *mut Image) -> size_t;
    pub fn GetImageVirtualPixelMethod(arg1: *Image) -> VirtualPixelMethod;
    pub fn SetImageVirtualPixelMethod(arg1: *Image, arg2: VirtualPixelMethod)
     -> VirtualPixelMethod;
    pub fn AcquireNextImage(arg1: *ImageInfo, arg2: *mut Image);
    pub fn DestroyImagePixels(arg1: *mut Image);
    pub fn DisassociateImageStream(arg1: *mut Image);
    pub fn GetImageException(arg1: *mut Image, arg2: *mut ExceptionInfo);
    pub fn GetImageInfo(arg1: *mut ImageInfo);
    pub fn SetImageInfoBlob(arg1: *mut ImageInfo, arg2: *c_void,
                            arg3: size_t);
    pub fn SetImageInfoFile(arg1: *mut ImageInfo, arg2: *mut FILE);
    pub fn GetTypeList(arg1: *c_schar, arg2: *mut size_t,
                       arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn ListTypeInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn TypeComponentGenesis() -> MagickBooleanType;
    pub fn GetTypeInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) -> *TypeInfo;
    pub fn GetTypeInfoByFamily(arg1: *c_schar, arg2: StyleType,
                               arg3: StretchType, arg4: size_t,
                               arg5: *mut ExceptionInfo) -> *TypeInfo;
    pub fn GetTypeInfoList(arg1: *c_schar, arg2: *mut size_t,
                           arg3: *mut ExceptionInfo) -> *mut *TypeInfo;
    pub fn TypeComponentTerminus();
    pub fn AcquireDrawInfo() -> *mut DrawInfo;
    pub fn CloneDrawInfo(arg1: *ImageInfo, arg2: *DrawInfo) -> *mut DrawInfo;
    pub fn DestroyDrawInfo(arg1: *mut DrawInfo) -> *mut DrawInfo;
    pub fn DrawAffineImage(arg1: *mut Image, arg2: *Image,
                           arg3: *AffineMatrix) -> MagickBooleanType;
    pub fn DrawClipPath(arg1: *mut Image, arg2: *DrawInfo, arg3: *c_schar) ->
     MagickBooleanType;
    pub fn DrawGradientImage(arg1: *mut Image, arg2: *DrawInfo) ->
     MagickBooleanType;
    pub fn DrawImage(arg1: *mut Image, arg2: *DrawInfo) -> MagickBooleanType;
    pub fn DrawPatternPath(arg1: *mut Image, arg2: *DrawInfo, arg3: *c_schar,
                           arg4: *mut *mut Image) -> MagickBooleanType;
    pub fn DrawPrimitive(arg1: *mut Image, arg2: *DrawInfo,
                         arg3: *PrimitiveInfo) -> MagickBooleanType;
    pub fn GetAffineMatrix(arg1: *mut AffineMatrix);
    pub fn GetDrawInfo(arg1: *ImageInfo, arg2: *mut DrawInfo);
    pub fn AddNoiseImage(arg1: *Image, arg2: NoiseType,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn AddNoiseImageChannel(arg1: *Image, arg2: ChannelType,
                                arg3: NoiseType, arg4: *mut ExceptionInfo) ->
     *mut Image;
    pub fn BlueShiftImage(arg1: *Image, arg2: c_double,
                          arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn CharcoalImage(arg1: *Image, arg2: c_double, arg3: c_double,
                         arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ColorizeImage(arg1: *Image, arg2: *c_schar, arg3: PixelPacket,
                         arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ColorMatrixImage(arg1: *Image, kernel: *KernelInfo,
                            arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn FxImage(arg1: *Image, arg2: *c_schar, arg3: *mut ExceptionInfo) ->
     *mut Image;
    pub fn FxImageChannel(arg1: *Image, arg2: ChannelType, arg3: *c_schar,
                          arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ImplodeImage(arg1: *Image, arg2: c_double,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn MorphImages(arg1: *Image, arg2: size_t, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn PolaroidImage(arg1: *Image, arg2: *DrawInfo, arg3: c_double,
                         arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn SepiaToneImage(arg1: *Image, arg2: c_double,
                          arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ShadowImage(arg1: *Image, arg2: c_double, arg3: c_double,
                       arg4: ssize_t, arg5: ssize_t, arg6: *mut ExceptionInfo)
     -> *mut Image;
    pub fn SketchImage(arg1: *Image, arg2: c_double, arg3: c_double,
                       arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn SteganoImage(arg1: *Image, arg2: *Image, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn StereoImage(arg1: *Image, arg2: *Image, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn StereoAnaglyphImage(arg1: *Image, arg2: *Image, arg3: ssize_t,
                               arg4: ssize_t, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn SwirlImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn TintImage(arg1: *Image, arg2: *c_schar, arg3: PixelPacket,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn VignetteImage(arg1: *Image, arg2: c_double, arg3: c_double,
                         arg4: ssize_t, arg5: ssize_t,
                         arg6: *mut ExceptionInfo) -> *mut Image;
    pub fn WaveImage(arg1: *Image, arg2: c_double, arg3: c_double,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn PlasmaImage(arg1: *mut Image, arg2: *SegmentInfo, arg3: size_t,
                       arg4: size_t) -> MagickBooleanType;
    pub fn SolarizeImage(arg1: *mut Image, arg2: c_double) ->
     MagickBooleanType;
    pub fn SolarizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                                arg3: c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageChannelStatistics(arg1: *Image, arg2: *mut ExceptionInfo)
     -> *mut ChannelStatistics;
    pub fn EvaluateImages(arg1: *Image, arg2: MagickEvaluateOperator,
                          arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn PolynomialImage(arg1: *Image, arg2: size_t, arg3: *c_double,
                           arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn PolynomialImageChannel(arg1: *Image, arg2: ChannelType,
                                  arg3: size_t, arg4: *c_double,
                                  arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn StatisticImage(arg1: *Image, arg2: StatisticType, arg3: size_t,
                          arg4: size_t, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn StatisticImageChannel(arg1: *Image, arg2: ChannelType,
                                 arg3: StatisticType, arg4: size_t,
                                 arg5: size_t, arg6: *mut ExceptionInfo) ->
     *mut Image;
    pub fn EvaluateImage(arg1: *mut Image, arg2: MagickEvaluateOperator,
                         arg3: c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn EvaluateImageChannel(arg1: *mut Image, arg2: ChannelType,
                                arg3: MagickEvaluateOperator, arg4: c_double,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn FunctionImage(arg1: *mut Image, arg2: MagickFunction, arg3: size_t,
                         arg4: *c_double, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn FunctionImageChannel(arg1: *mut Image, arg2: ChannelType,
                                arg3: MagickFunction, arg4: size_t,
                                arg5: *c_double, arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageChannelExtrema(arg1: *Image, arg2: ChannelType,
                                  arg3: *mut size_t, arg4: *mut size_t,
                                  arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageChannelMean(arg1: *Image, arg2: ChannelType,
                               arg3: *mut c_double, arg4: *mut c_double,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn GetImageChannelKurtosis(arg1: *Image, arg2: ChannelType,
                                   arg3: *mut c_double, arg4: *mut c_double,
                                   arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageChannelRange(arg1: *Image, arg2: ChannelType,
                                arg3: *mut c_double, arg4: *mut c_double,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageExtrema(arg1: *Image, arg2: *mut size_t, arg3: *mut size_t,
                           arg4: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn GetImageRange(arg1: *Image, arg2: *mut c_double,
                         arg3: *mut c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageMean(arg1: *Image, arg2: *mut c_double,
                        arg3: *mut c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageKurtosis(arg1: *Image, arg2: *mut c_double,
                            arg3: *mut c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn AccelerateContrastImage(arg1: *mut Image, arg2: MagickBooleanType,
                                   arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn AccelerateConvolveImage(arg1: *Image, arg2: *KernelInfo,
                                   arg3: *mut Image, arg4: *mut ExceptionInfo)
     -> MagickBooleanType;
    pub fn AccelerateEqualizeImage(arg1: *mut Image, arg2: ChannelType,
                                   arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn AccelerateFunctionImage(arg1: *mut Image, arg2: ChannelType,
                                   arg3: MagickFunction, arg4: size_t,
                                   arg5: *c_double, arg6: *mut ExceptionInfo)
     -> MagickBooleanType;
    pub fn AccelerateModulateImage(arg1: *mut Image, arg2: c_double,
                                   arg3: c_double, arg4: c_double,
                                   arg5: ColorspaceType,
                                   arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn AccelerateAddNoiseImage(arg1: *Image, arg2: ChannelType,
                                   arg3: NoiseType, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn AccelerateBlurImage(arg1: *Image, arg2: ChannelType,
                               arg3: c_double, arg4: c_double,
                               arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn AccelerateConvolveImageChannel(arg1: *Image, arg2: ChannelType,
                                          arg3: *KernelInfo,
                                          arg4: *mut ExceptionInfo) ->
     *mut Image;
    pub fn AccelerateDespeckleImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn AccelerateRadialBlurImage(arg1: *Image, arg2: ChannelType,
                                     arg3: c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn AccelerateResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                                 arg4: *ResizeFilter,
                                 arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn AccelerateUnsharpMaskImage(arg1: *Image, arg2: ChannelType,
                                      arg3: c_double, arg4: c_double,
                                      arg5: c_double, arg6: c_double,
                                      arg7: *mut ExceptionInfo) -> *mut Image;
    pub fn AnimateImages(arg1: *ImageInfo, arg2: *mut Image) ->
     MagickBooleanType;
    pub fn AnnotateComponentGenesis() -> MagickBooleanType;
    pub fn AnnotateImage(arg1: *mut Image, arg2: *DrawInfo) ->
     MagickBooleanType;
    pub fn GetMultilineTypeMetrics(arg1: *mut Image, arg2: *DrawInfo,
                                   arg3: *mut TypeMetric) ->
     MagickBooleanType;
    pub fn GetTypeMetrics(arg1: *mut Image, arg2: *DrawInfo,
                          arg3: *mut TypeMetric) -> MagickBooleanType;
    pub fn FormatMagickCaption(arg1: *mut Image, arg2: *mut DrawInfo,
                               arg3: MagickBooleanType, arg4: *mut TypeMetric,
                               arg5: *mut *mut c_schar) -> ssize_t;
    pub fn AnnotateComponentTerminus();
    pub fn GetNextImageArtifact(arg1: *Image) -> *mut c_schar;
    pub fn RemoveImageArtifact(arg1: *mut Image, arg2: *c_schar) ->
     *mut c_schar;
    pub fn GetImageArtifact(arg1: *Image, arg2: *c_schar) -> *c_schar;
    pub fn CloneImageArtifacts(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    pub fn DefineImageArtifact(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DeleteImageArtifact(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn SetImageArtifact(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    pub fn DestroyImageArtifacts(arg1: *mut Image);
    pub fn ResetImageArtifactIterator(arg1: *Image);
    pub fn GetImageType(arg1: *Image, arg2: *mut ExceptionInfo) -> ImageType;
    pub fn SetImageChannelDepth(arg1: *mut Image, arg2: ChannelType,
                                arg3: size_t) -> MagickBooleanType;
    pub fn SetImageDepth(arg1: *mut Image, arg2: size_t) -> MagickBooleanType;
    pub fn SetImageType(arg1: *mut Image, arg2: ImageType) ->
     MagickBooleanType;
    pub fn GetImageBoundingBox(arg1: *Image, exception: *mut ExceptionInfo) ->
     RectangleInfo;
    pub fn GetImageChannelDepth(arg1: *Image, arg2: ChannelType,
                                arg3: *mut ExceptionInfo) -> size_t;
    pub fn GetImageDepth(arg1: *Image, arg2: *mut ExceptionInfo) -> size_t;
    pub fn GetImageQuantumDepth(arg1: *Image, arg2: MagickBooleanType) ->
     size_t;
    pub fn GetImagePixelCacheType(arg1: *Image) -> CacheType;
    pub fn GetVirtualIndexQueue(arg1: *Image) -> *IndexPacket;
    pub fn GetVirtualPixels(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                            arg4: size_t, arg5: size_t,
                            arg6: *mut ExceptionInfo) -> *PixelPacket;
    pub fn GetVirtualPixelQueue(arg1: *Image) -> *PixelPacket;
    pub fn AcquirePixelCachePixels(arg1: *Image, arg2: *mut MagickSizeType,
                                   arg3: *mut ExceptionInfo) -> *c_void;
    pub fn GetAuthenticIndexQueue(arg1: *Image) -> *mut IndexPacket;
    pub fn CacheComponentGenesis() -> MagickBooleanType;
    pub fn GetOneVirtualMagickPixel(arg1: *Image, arg2: ssize_t,
                                    arg3: ssize_t,
                                    arg4: *mut MagickPixelPacket,
                                    arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetOneVirtualPixel(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                              arg4: *mut PixelPacket,
                              arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn GetOneVirtualMethodPixel(arg1: *Image, arg2: VirtualPixelMethod,
                                    arg3: ssize_t, arg4: ssize_t,
                                    arg5: *mut PixelPacket,
                                    arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetOneAuthenticPixel(arg1: *mut Image, arg2: ssize_t,
                                arg3: ssize_t, arg4: *mut PixelPacket,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn PersistPixelCache(arg1: *mut Image, arg2: *c_schar,
                             arg3: MagickBooleanType,
                             arg4: *mut MagickOffsetType,
                             arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn SyncAuthenticPixels(arg1: *mut Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageExtent(arg1: *Image) -> MagickSizeType;
    pub fn GetAuthenticPixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                              arg4: size_t, arg5: size_t,
                              arg6: *mut ExceptionInfo) -> *mut PixelPacket;
    pub fn GetAuthenticPixelQueue(arg1: *Image) -> *mut PixelPacket;
    pub fn QueueAuthenticPixels(arg1: *mut Image, arg2: ssize_t,
                                arg3: ssize_t, arg4: size_t, arg5: size_t,
                                arg6: *mut ExceptionInfo) -> *mut PixelPacket;
    pub fn GetPixelCacheVirtualMethod(arg1: *Image) -> VirtualPixelMethod;
    pub fn SetPixelCacheVirtualMethod(arg1: *Image, arg2: VirtualPixelMethod)
     -> VirtualPixelMethod;
    pub fn CacheComponentTerminus();
    pub fn GetPixelCachePixels(arg1: *mut Image, arg2: *mut MagickSizeType,
                               arg3: *mut ExceptionInfo) -> *mut c_void;
    pub fn CombineImages(arg1: *Image, arg2: ChannelType,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn SeparateImage(arg1: *Image, arg2: ChannelType,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn SeparateImages(arg1: *Image, arg2: ChannelType,
                          arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn GetImageAlphaChannel(arg1: *Image) -> MagickBooleanType;
    pub fn SeparateImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    pub fn SetImageAlphaChannel(arg1: *mut Image, arg2: AlphaChannelType) ->
     MagickBooleanType;
    pub fn DecipherImage(arg1: *mut Image, arg2: *c_schar,
                         arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn EncipherImage(arg1: *mut Image, arg2: *c_schar,
                         arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn PasskeyDecipherImage(arg1: *mut Image, arg2: *StringInfo,
                                arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn PasskeyEncipherImage(arg1: *mut Image, arg2: *StringInfo,
                                arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetClientPath() -> *c_schar;
    pub fn GetClientName() -> *c_schar;
    pub fn SetClientName(arg1: *c_schar) -> *c_schar;
    pub fn SetClientPath(arg1: *c_schar) -> *c_schar;
    pub fn GetCoderList(arg1: *c_schar, arg2: *mut size_t,
                        arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetCoderInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *CoderInfo;
    pub fn GetCoderInfoList(arg1: *c_schar, arg2: *mut size_t,
                            arg3: *mut ExceptionInfo) -> *mut *CoderInfo;
    pub fn CoderComponentGenesis() -> MagickBooleanType;
    pub fn ListCoderInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn CoderComponentTerminus();
    pub fn AcquireImageColormap(arg1: *mut Image, arg2: size_t) ->
     MagickBooleanType;
    pub fn CycleColormapImage(arg1: *mut Image, arg2: ssize_t) ->
     MagickBooleanType;
    pub fn SortColormapByIntensity(arg1: *mut Image) -> MagickBooleanType;
    pub fn GetImageChannelDistortions(arg1: *mut Image, arg2: *Image,
                                      arg3: MetricType,
                                      arg4: *mut ExceptionInfo) ->
     *mut c_double;
    pub fn CompareImageChannels(arg1: *mut Image, arg2: *Image,
                                arg3: ChannelType, arg4: MetricType,
                                arg5: *mut c_double, arg6: *mut ExceptionInfo)
     -> *mut Image;
    pub fn CompareImages(arg1: *mut Image, arg2: *Image, arg3: MetricType,
                         arg4: *mut c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn SimilarityImage(arg1: *mut Image, arg2: *Image,
                           arg3: *mut RectangleInfo, arg4: *mut c_double,
                           arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn SimilarityMetricImage(arg1: *mut Image, arg2: *Image,
                                 arg3: MetricType, arg4: *mut RectangleInfo,
                                 arg5: *mut c_double,
                                 arg6: *mut ExceptionInfo) -> *mut Image;
    pub fn GetImageChannelDistortion(arg1: *mut Image, arg2: *Image,
                                     arg3: ChannelType, arg4: MetricType,
                                     arg5: *mut c_double,
                                     arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn GetImageDistortion(arg1: *mut Image, arg2: *Image,
                              arg3: MetricType, arg4: *mut c_double,
                              arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn IsImagesEqual(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    pub fn GetConfigureList(arg1: *c_schar, arg2: *mut size_t,
                            arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetConfigureOption(arg1: *c_schar) -> *mut c_schar;
    pub fn GetConfigureValue(arg1: *ConfigureInfo) -> *c_schar;
    pub fn GetConfigureInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *ConfigureInfo;
    pub fn GetConfigureInfoList(arg1: *c_schar, arg2: *mut size_t,
                                arg3: *mut ExceptionInfo) ->
     *mut *ConfigureInfo;
    pub fn DestroyConfigureOptions(arg1: *mut LinkedListInfo) ->
     *mut LinkedListInfo;
    pub fn GetConfigurePaths(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut LinkedListInfo;
    pub fn GetConfigureOptions(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut LinkedListInfo;
    pub fn ConfigureComponentGenesis() -> MagickBooleanType;
    pub fn ListConfigureInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ConfigureComponentTerminus();
    pub fn BorderImage(arg1: *Image, arg2: *RectangleInfo,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn FrameImage(arg1: *Image, arg2: *FrameInfo,
                      arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn RaiseImage(arg1: *mut Image, arg2: *RectangleInfo,
                      arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn GetDelegateCommand(arg1: *ImageInfo, arg2: *mut Image,
                              arg3: *c_schar, arg4: *c_schar,
                              arg5: *mut ExceptionInfo) -> *mut c_schar;
    pub fn GetDelegateList(arg1: *c_schar, arg2: *mut size_t,
                           arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetDelegateCommands(arg1: *DelegateInfo) -> *c_schar;
    pub fn GetDelegateInfo(arg1: *c_schar, arg2: *c_schar,
                           exception: *mut ExceptionInfo) -> *DelegateInfo;
    pub fn GetDelegateInfoList(arg1: *c_schar, arg2: *mut size_t,
                               arg3: *mut ExceptionInfo) ->
     *mut *DelegateInfo;
    pub fn GetDelegateMode(arg1: *DelegateInfo) -> ssize_t;
    pub fn DelegateComponentGenesis() -> MagickBooleanType;
    pub fn GetDelegateThreadSupport(arg1: *DelegateInfo) -> MagickBooleanType;
    pub fn InvokeDelegate(arg1: *mut ImageInfo, arg2: *mut Image,
                          arg3: *c_schar, arg4: *c_schar,
                          arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn ListDelegateInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn DelegateComponentTerminus();
    pub fn CompressImageColormap(arg1: *mut Image) -> MagickBooleanType;
    pub fn GetImageQuantizeError(arg1: *mut Image) -> MagickBooleanType;
    pub fn PosterizeImage(arg1: *mut Image, arg2: size_t,
                          arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn PosterizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                                 arg3: size_t, arg4: MagickBooleanType) ->
     MagickBooleanType;
    pub fn QuantizeImage(arg1: *QuantizeInfo, arg2: *mut Image) ->
     MagickBooleanType;
    pub fn QuantizeImages(arg1: *QuantizeInfo, arg2: *mut Image) ->
     MagickBooleanType;
    pub fn RemapImage(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image) ->
     MagickBooleanType;
    pub fn RemapImages(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image) ->
     MagickBooleanType;
    pub fn AcquireQuantizeInfo(arg1: *ImageInfo) -> *mut QuantizeInfo;
    pub fn CloneQuantizeInfo(arg1: *QuantizeInfo) -> *mut QuantizeInfo;
    pub fn DestroyQuantizeInfo(arg1: *mut QuantizeInfo) -> *mut QuantizeInfo;
    pub fn GetQuantizeInfo(arg1: *mut QuantizeInfo);
    pub fn GetNextImageRegistry() -> *mut c_schar;
    pub fn DefineImageRegistry(arg1: RegistryType, arg2: *c_schar,
                               arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn DeleteImageRegistry(arg1: *c_schar) -> MagickBooleanType;
    pub fn RegistryComponentGenesis() -> MagickBooleanType;
    pub fn SetImageRegistry(arg1: RegistryType, arg2: *c_schar, arg3: *c_void,
                            arg4: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn GetImageRegistry(arg1: RegistryType, arg2: *c_schar,
                            arg3: *mut ExceptionInfo) -> *mut c_void;
    pub fn RegistryComponentTerminus();
    pub fn RemoveImageRegistry(arg1: *c_schar) -> *mut c_void;
    pub fn ResetImageRegistryIterator();
    pub fn CloseCacheView(arg1: *mut CacheView) -> *mut CacheView;
    pub fn OpenCacheView(arg1: *Image) -> *mut CacheView;
    pub fn AllocateString(arg1: *c_schar) -> *mut c_schar;
    pub fn InterpretImageAttributes(arg1: *ImageInfo, arg2: *mut Image,
                                    arg3: *c_schar) -> *mut c_schar;
    pub fn PostscriptGeometry(arg1: *c_schar) -> *mut c_schar;
    pub fn TranslateText(arg1: *ImageInfo, arg2: *mut Image, arg3: *c_schar)
     -> *mut c_schar;
    pub fn GetImageAttribute(arg1: *Image, arg2: *c_schar) -> *ImageAttribute;
    pub fn GetImageClippingPathAttribute(arg1: *mut Image) -> *ImageAttribute;
    pub fn GetNextImageAttribute(arg1: *Image) -> *ImageAttribute;
    pub fn AcquireCacheViewIndexes(arg1: *CacheView) -> *IndexPacket;
    pub fn AcquireIndexes(arg1: *Image) -> *IndexPacket;
    pub fn AcquirePixels(arg1: *Image) -> *PixelPacket;
    pub fn AcquireCacheViewPixels(arg1: *CacheView, arg2: ssize_t,
                                  arg3: ssize_t, arg4: size_t, arg5: size_t,
                                  arg6: *mut ExceptionInfo) -> *PixelPacket;
    pub fn AcquireImagePixels(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                              arg4: size_t, arg5: size_t,
                              arg6: *mut ExceptionInfo) -> *PixelPacket;
    pub fn OpenMagickStream(arg1: *c_schar, arg2: *c_schar) -> *mut FILE;
    pub fn AllocateImage(arg1: *ImageInfo) -> *mut Image;
    pub fn AverageImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn ExtractSubimageFromImage(arg1: *mut Image, arg2: *Image,
                                    arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn GetImageFromMagickRegistry(arg1: *c_schar, id: *mut ssize_t,
                                      arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn GetImageList(arg1: *Image, arg2: ssize_t, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn GetNextImage(arg1: *Image) -> *mut Image;
    pub fn GetPreviousImage(arg1: *Image) -> *mut Image;
    pub fn FlattenImages(arg1: *mut Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn MaximumImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn MedianFilterImage(arg1: *Image, arg2: c_double,
                             arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ModeImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn MinimumImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn MosaicImages(arg1: *mut Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn PopImageList(arg1: *mut *mut Image) -> *mut Image;
    pub fn RecolorImage(arg1: *Image, arg2: size_t, arg3: *c_double,
                        arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ReduceNoiseImage(arg1: *Image, arg2: c_double,
                            arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ShiftImageList(arg1: *mut *mut Image) -> *mut Image;
    pub fn SpliceImageList(arg1: *mut Image, arg2: ssize_t, arg3: size_t,
                           arg4: *Image, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn ZoomImage(arg1: *Image, arg2: size_t, arg3: size_t,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn GetCacheViewIndexes(arg1: *mut CacheView) -> *mut IndexPacket;
    pub fn GetIndexes(arg1: *Image) -> *mut IndexPacket;
    pub fn ValidateColormapIndex(arg1: *mut Image, arg2: size_t) ->
     IndexPacket;
    pub fn GetImageGeometry(arg1: *mut Image, arg2: *c_schar, arg3: c_uint,
                            arg4: *mut RectangleInfo) -> c_int;
    pub fn ParseImageGeometry(arg1: *c_schar, arg2: *mut ssize_t,
                              arg3: *mut ssize_t, arg4: *mut size_t,
                              arg5: *mut size_t) -> c_int;
    pub fn AcquireOneCacheViewPixel(arg1: *CacheView, arg2: ssize_t,
                                    arg3: ssize_t, arg4: *mut PixelPacket,
                                    arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn AcquireOneCacheViewVirtualPixel(arg1: *CacheView,
                                           arg2: VirtualPixelMethod,
                                           arg3: ssize_t, arg4: ssize_t,
                                           arg5: *mut PixelPacket,
                                           arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn AffinityImage(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image)
     -> MagickBooleanType;
    pub fn AffinityImages(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image)
     -> MagickBooleanType;
    pub fn AllocateImageColormap(arg1: *mut Image, arg2: size_t) ->
     MagickBooleanType;
    pub fn ClipPathImage(arg1: *mut Image, arg2: *c_schar,
                         arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn CloneImageAttributes(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    pub fn ColorFloodfillImage(arg1: *mut Image, arg2: *DrawInfo,
                               arg3: PixelPacket, arg4: ssize_t,
                               arg5: ssize_t, arg6: PaintMethod) ->
     MagickBooleanType;
    pub fn DeleteImageAttribute(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DeleteMagickRegistry(arg1: ssize_t) -> MagickBooleanType;
    pub fn DescribeImage(arg1: *mut Image, arg2: *mut FILE,
                         arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn FormatImageAttribute(arg1: *mut Image, arg2: *c_schar,
                                arg3: *c_schar, ...) -> MagickBooleanType;
    pub fn FuzzyColorCompare(arg1: *Image, arg2: *PixelPacket,
                             arg3: *PixelPacket) -> MagickBooleanType;
    pub fn FuzzyOpacityCompare(arg1: *Image, arg2: *PixelPacket,
                               arg3: *PixelPacket) -> MagickBooleanType;
    pub fn LevelImageColors(arg1: *mut Image, arg2: ChannelType,
                            arg3: *MagickPixelPacket,
                            arg4: *MagickPixelPacket, arg5: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MagickMonitor(arg1: *c_schar, arg2: MagickOffsetType,
                         arg3: MagickSizeType, arg4: *mut c_void) ->
     MagickBooleanType;
    pub fn MapImage(arg1: *mut Image, arg2: *Image, arg3: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MapImages(arg1: *mut Image, arg2: *Image, arg3: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MatteFloodfillImage(arg1: *mut Image, arg2: PixelPacket,
                               arg3: Quantum, arg4: ssize_t, arg5: ssize_t,
                               arg6: PaintMethod) -> MagickBooleanType;
    pub fn OpaqueImage(arg1: *mut Image, arg2: PixelPacket, arg3: PixelPacket)
     -> MagickBooleanType;
    pub fn PaintFloodfillImage(arg1: *mut Image, arg2: ChannelType,
                               arg3: *MagickPixelPacket, arg4: ssize_t,
                               arg5: ssize_t, arg6: *DrawInfo,
                               arg7: PaintMethod) -> MagickBooleanType;
    pub fn PaintOpaqueImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                            arg3: *MagickPixelPacket) -> MagickBooleanType;
    pub fn PaintOpaqueImageChannel(arg1: *mut Image, arg2: ChannelType,
                                   arg3: *MagickPixelPacket,
                                   arg4: *MagickPixelPacket) ->
     MagickBooleanType;
    pub fn PaintTransparentImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                                 arg3: Quantum) -> MagickBooleanType;
    pub fn SetExceptionInfo(arg1: *mut ExceptionInfo, arg2: ExceptionType) ->
     MagickBooleanType;
    pub fn SetImageAttribute(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    pub fn SyncCacheViewPixels(arg1: *mut CacheView) -> MagickBooleanType;
    pub fn SyncImagePixels(arg1: *mut Image) -> MagickBooleanType;
    pub fn TransparentImage(arg1: *mut Image, arg2: PixelPacket,
                            arg3: Quantum) -> MagickBooleanType;
    pub fn AcquireOneMagickPixel(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                                 arg4: *mut ExceptionInfo) ->
     MagickPixelPacket;
    pub fn GetMonitorHandler() -> MonitorHandler;
    pub fn SetMonitorHandler(arg1: MonitorHandler) -> MonitorHandler;
    pub fn SizeBlob(image: *mut Image) -> MagickOffsetType;
    pub fn InterpolatePixelColor(arg1: *Image, arg2: *mut CacheView,
                                 arg3: InterpolatePixelMethod, arg4: c_double,
                                 arg5: c_double, arg6: *mut ExceptionInfo) ->
     MagickPixelPacket;
    pub fn ParseSizeGeometry(arg1: *Image, arg2: *c_schar,
                             arg3: *mut RectangleInfo) -> MagickStatusType;
    pub fn AcquireOnePixel(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                           arg4: *mut ExceptionInfo) -> PixelPacket;
    pub fn AcquireOneVirtualPixel(arg1: *Image, arg2: VirtualPixelMethod,
                                  arg3: ssize_t, arg4: ssize_t,
                                  arg5: *mut ExceptionInfo) -> PixelPacket;
    pub fn GetCacheView(arg1: *mut CacheView, arg2: ssize_t, arg3: ssize_t,
                        arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    pub fn GetCacheViewPixels(arg1: *mut CacheView, arg2: ssize_t,
                              arg3: ssize_t, arg4: size_t, arg5: size_t) ->
     *mut PixelPacket;
    pub fn GetImagePixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    pub fn GetOnePixel(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t) ->
     PixelPacket;
    pub fn GetPixels(arg1: *Image) -> *mut PixelPacket;
    pub fn SetCacheViewPixels(arg1: *mut CacheView, arg2: ssize_t,
                              arg3: ssize_t, arg4: size_t, arg5: size_t) ->
     *mut PixelPacket;
    pub fn SetImagePixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    pub fn InversesRGBCompandor(arg1: MagickRealType) -> MagickRealType;
    pub fn sRGBCompandor(arg1: MagickRealType) -> MagickRealType;
    pub fn GetImageListSize(arg1: *Image) -> size_t;
    pub fn PopImagePixels(arg1: *mut Image, arg2: QuantumType,
                          arg3: *mut c_uchar) -> size_t;
    pub fn PushImagePixels(arg1: *mut Image, arg2: QuantumType,
                           arg3: *c_uchar) -> size_t;
    pub fn FormatMagickString(arg1: *mut c_schar, arg2: size_t,
                              arg3: *c_schar, ...) -> ssize_t;
    pub fn GetImageListIndex(arg1: *Image) -> ssize_t;
    pub fn SetMagickRegistry(arg1: RegistryType, arg2: *c_void, arg3: size_t,
                             arg4: *mut ExceptionInfo) -> ssize_t;
    pub fn ChannelImage(arg1: *mut Image, arg2: ChannelType) -> c_uint;
    pub fn ChannelThresholdImage(arg1: *mut Image, arg2: *c_schar) -> c_uint;
    pub fn DispatchImage(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                         arg4: size_t, arg5: size_t, arg6: *c_schar,
                         arg7: StorageType, arg8: *mut c_void,
                         arg9: *mut ExceptionInfo) -> c_uint;
    pub fn FuzzyColorMatch(arg1: *PixelPacket, arg2: *PixelPacket,
                           arg3: c_double) -> c_uint;
    pub fn GetNumberScenes(arg1: *Image) -> c_uint;
    pub fn GetMagickGeometry(arg1: *c_schar, arg2: *mut ssize_t,
                             arg3: *mut ssize_t, arg4: *mut size_t,
                             arg5: *mut size_t) -> c_uint;
    pub fn IsSubimage(arg1: *c_schar, arg2: c_uint) -> c_uint;
    pub fn PushImageList(arg1: *mut *mut Image, arg2: *Image,
                         arg3: *mut ExceptionInfo) -> c_uint;
    pub fn QuantizationError(arg1: *mut Image) -> c_uint;
    pub fn RandomChannelThresholdImage(arg1: *mut Image, arg2: *c_schar,
                                       arg3: *c_schar,
                                       arg4: *mut ExceptionInfo) -> c_uint;
    pub fn SetImageList(arg1: *mut *mut Image, arg2: *Image, arg3: ssize_t,
                        arg4: *mut ExceptionInfo) -> c_uint;
    pub fn TransformColorspace(arg1: *mut Image, arg2: ColorspaceType) ->
     c_uint;
    pub fn ThresholdImage(arg1: *mut Image, arg2: c_double) -> c_uint;
    pub fn ThresholdImageChannel(arg1: *mut Image, arg2: *c_schar) -> c_uint;
    pub fn UnshiftImageList(arg1: *mut *mut Image, arg2: *Image,
                            arg3: *mut ExceptionInfo) -> c_uint;
    pub fn AcquireMemory(arg1: size_t) -> *mut c_void;
    pub fn AllocateNextImage(arg1: *ImageInfo, arg2: *mut Image);
    pub fn CloneMemory(arg1: *mut c_void, arg2: *c_void, arg3: size_t) ->
     *mut c_void;
    pub fn DestroyConstitute();
    pub fn DestroyImageAttributes(arg1: *mut Image);
    pub fn DestroyImages(arg1: *mut Image);
    pub fn DestroyMagick();
    pub fn DestroyMagickRegistry();
    pub fn GetConfigureBlob(arg1: *c_schar, arg2: *mut c_schar,
                            arg3: *mut size_t, arg4: *mut ExceptionInfo) ->
     *mut c_void;
    pub fn GetMagickRegistry(arg1: ssize_t, arg2: *mut RegistryType,
                             arg3: *mut size_t, arg4: *mut ExceptionInfo) ->
     *mut c_void;
    pub fn IdentityAffine(arg1: *mut AffineMatrix);
    pub fn LiberateMemory(arg1: *mut *mut c_void);
    pub fn LiberateSemaphoreInfo(arg1: *mut *mut SemaphoreInfo);
    pub fn FormatString(arg1: *mut c_schar, arg2: *c_schar, ...);
    pub fn HSLTransform(arg1: c_double, arg2: c_double, arg3: c_double,
                        arg4: *mut Quantum, arg5: *mut Quantum,
                        arg6: *mut Quantum);
    pub fn InitializeMagick(arg1: *c_schar);
    pub fn MagickIncarnate(arg1: *c_schar);
    pub fn ReacquireMemory(arg1: *mut *mut c_void, arg2: size_t);
    pub fn ResetImageAttributeIterator(arg1: *Image);
    pub fn SetCacheThreshold(arg1: size_t);
    pub fn SetImage(arg1: *mut Image, arg2: Quantum);
    pub fn Strip(arg1: *mut c_schar);
    pub fn TemporaryFilename(arg1: *mut c_schar);
    pub fn TransformHSL(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                        arg4: *mut c_double, arg5: *mut c_double,
                        arg6: *mut c_double);
    pub fn DisplayImages(arg1: *ImageInfo, arg2: *mut Image) ->
     MagickBooleanType;
    pub fn RemoteDisplayCommand(arg1: *ImageInfo, arg2: *c_schar,
                                arg3: *c_schar, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn AffineTransformImage(arg1: *Image, arg2: *AffineMatrix,
                                arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn DistortImage(arg1: *Image, arg2: DistortImageMethod, arg3: size_t,
                        arg4: *c_double, arg5: MagickBooleanType,
                        exception: *mut ExceptionInfo) -> *mut Image;
    pub fn DistortResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                              arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn RotateImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn SparseColorImage(arg1: *Image, arg2: ChannelType,
                            arg3: SparseColorMethod, arg4: size_t,
                            arg5: *c_double, arg6: *mut ExceptionInfo) ->
     *mut Image;
    pub fn DistributePixelCacheServer(arg1: c_int, arg2: *mut ExceptionInfo);
    pub fn AutoGammaImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn AutoGammaImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    pub fn AutoLevelImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn AutoLevelImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    pub fn BrightnessContrastImage(arg1: *mut Image, arg2: c_double,
                                   arg3: c_double) -> MagickBooleanType;
    pub fn BrightnessContrastImageChannel(arg1: *mut Image, arg2: ChannelType,
                                          arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn ClutImage(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    pub fn ClutImageChannel(arg1: *mut Image, arg2: ChannelType, arg3: *Image)
     -> MagickBooleanType;
    pub fn ColorDecisionListImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn ContrastImage(arg1: *mut Image, arg2: MagickBooleanType) ->
     MagickBooleanType;
    pub fn ContrastStretchImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn ContrastStretchImageChannel(arg1: *mut Image, arg2: ChannelType,
                                       arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn EqualizeImage(image: *mut Image) -> MagickBooleanType;
    pub fn EqualizeImageChannel(image: *mut Image, arg1: ChannelType) ->
     MagickBooleanType;
    pub fn GammaImage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    pub fn GammaImageChannel(arg1: *mut Image, arg2: ChannelType,
                             arg3: c_double) -> MagickBooleanType;
    pub fn GrayscaleImage(arg1: *mut Image, arg2: PixelIntensityMethod) ->
     MagickBooleanType;
    pub fn HaldClutImage(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    pub fn HaldClutImageChannel(arg1: *mut Image, arg2: ChannelType,
                                arg3: *Image) -> MagickBooleanType;
    pub fn LevelImage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    pub fn LevelImageChannel(arg1: *mut Image, arg2: ChannelType,
                             arg3: c_double, arg4: c_double, arg5: c_double)
     -> MagickBooleanType;
    pub fn LevelizeImage(arg1: *mut Image, arg2: c_double, arg3: c_double,
                         arg4: c_double) -> MagickBooleanType;
    pub fn LevelizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                                arg3: c_double, arg4: c_double,
                                arg5: c_double) -> MagickBooleanType;
    pub fn LevelColorsImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                            arg3: *MagickPixelPacket, arg4: MagickBooleanType)
     -> MagickBooleanType;
    pub fn LevelColorsImageChannel(arg1: *mut Image, arg2: ChannelType,
                                   arg3: *MagickPixelPacket,
                                   arg4: *MagickPixelPacket,
                                   arg5: MagickBooleanType) ->
     MagickBooleanType;
    pub fn LinearStretchImage(arg1: *mut Image, arg2: c_double,
                              arg3: c_double) -> MagickBooleanType;
    pub fn ModulateImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn NegateImage(arg1: *mut Image, arg2: MagickBooleanType) ->
     MagickBooleanType;
    pub fn NegateImageChannel(arg1: *mut Image, arg2: ChannelType,
                              arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn NormalizeImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn NormalizeImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    pub fn SigmoidalContrastImage(arg1: *mut Image, arg2: MagickBooleanType,
                                  arg3: *c_schar) -> MagickBooleanType;
    pub fn SigmoidalContrastImageChannel(arg1: *mut Image, arg2: ChannelType,
                                         arg3: MagickBooleanType,
                                         arg4: c_double, arg5: c_double) ->
     MagickBooleanType;
    pub fn EnhanceImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn GetImageChannelFeatures(arg1: *Image, arg2: size_t,
                                   arg3: *mut ExceptionInfo) ->
     *mut ChannelFeatures;
    pub fn ComplexImages(arg1: *Image, arg2: ComplexOperator,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ForwardFourierTransformImage(arg1: *Image, arg2: MagickBooleanType,
                                        arg3: *mut ExceptionInfo) ->
     *mut Image;
    pub fn InverseFourierTransformImage(arg1: *Image, arg2: *Image,
                                        arg3: MagickBooleanType,
                                        arg4: *mut ExceptionInfo) ->
     *mut Image;
    pub fn GetRandomValue(arg1: *mut RandomInfo) -> c_double;
    pub fn GetPseudoRandomValue(arg1: *mut RandomInfo) -> c_double;
    pub fn RandomComponentGenesis() -> MagickBooleanType;
    pub fn AcquireRandomInfo() -> *mut RandomInfo;
    pub fn DestroyRandomInfo(arg1: *mut RandomInfo) -> *mut RandomInfo;
    pub fn GetRandomKey(arg1: *mut RandomInfo, arg2: size_t) ->
     *mut StringInfo;
    pub fn GetRandomSecretKey(arg1: *RandomInfo) -> c_ulong;
    pub fn RandomComponentTerminus();
    pub fn SeedPseudoRandomGenerator(arg1: c_ulong);
    pub fn SetRandomKey(arg1: *mut RandomInfo, arg2: size_t,
                        arg3: *mut c_uchar);
    pub fn SetRandomSecretKey(arg1: c_ulong);
    pub fn SetRandomTrueRandom(arg1: MagickBooleanType);
    pub fn ExpandAffine(arg1: *AffineMatrix) -> c_double;
    pub fn GenerateDifferentialNoise(arg1: *mut RandomInfo, arg2: Quantum,
                                     arg3: NoiseType, arg4: MagickRealType) ->
     c_double;
    pub fn GetOptimalKernelWidth(arg1: c_double, arg2: c_double) -> size_t;
    pub fn GetOptimalKernelWidth1D(arg1: c_double, arg2: c_double) -> size_t;
    pub fn GetOptimalKernelWidth2D(arg1: c_double, arg2: c_double) -> size_t;
    pub fn ConvertHCLToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                           arg4: *mut Quantum, arg5: *mut Quantum,
                           arg6: *mut Quantum);
    pub fn ConvertHCLpToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                            arg4: *mut Quantum, arg5: *mut Quantum,
                            arg6: *mut Quantum);
    pub fn ConvertHSBToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                           arg4: *mut Quantum, arg5: *mut Quantum,
                           arg6: *mut Quantum);
    pub fn ConvertHSIToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                           arg4: *mut Quantum, arg5: *mut Quantum,
                           arg6: *mut Quantum);
    pub fn ConvertHSLToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                           arg4: *mut Quantum, arg5: *mut Quantum,
                           arg6: *mut Quantum);
    pub fn ConvertHSVToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                           arg4: *mut Quantum, arg5: *mut Quantum,
                           arg6: *mut Quantum);
    pub fn ConvertHWBToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                           arg4: *mut Quantum, arg5: *mut Quantum,
                           arg6: *mut Quantum);
    pub fn ConvertLCHabToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                             arg4: *mut Quantum, arg5: *mut Quantum,
                             arg6: *mut Quantum);
    pub fn ConvertLCHuvToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                             arg4: *mut Quantum, arg5: *mut Quantum,
                             arg6: *mut Quantum);
    pub fn ConvertRGBToHCL(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                           arg4: *mut c_double, arg5: *mut c_double,
                           arg6: *mut c_double);
    pub fn ConvertRGBToHCLp(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                            arg4: *mut c_double, arg5: *mut c_double,
                            arg6: *mut c_double);
    pub fn ConvertRGBToHSB(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                           arg4: *mut c_double, arg5: *mut c_double,
                           arg6: *mut c_double);
    pub fn ConvertRGBToHSI(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                           arg4: *mut c_double, arg5: *mut c_double,
                           arg6: *mut c_double);
    pub fn ConvertRGBToHSL(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                           arg4: *mut c_double, arg5: *mut c_double,
                           arg6: *mut c_double);
    pub fn ConvertRGBToHSV(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                           arg4: *mut c_double, arg5: *mut c_double,
                           arg6: *mut c_double);
    pub fn ConvertRGBToHWB(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                           arg4: *mut c_double, arg5: *mut c_double,
                           arg6: *mut c_double);
    pub fn ConvertRGBToLCHab(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                             arg4: *mut c_double, arg5: *mut c_double,
                             arg6: *mut c_double);
    pub fn ConvertRGBToLCHuv(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                             arg4: *mut c_double, arg5: *mut c_double,
                             arg6: *mut c_double);
    pub fn GetImageHistogram(arg1: *Image, arg2: *mut size_t,
                             arg3: *mut ExceptionInfo) -> *mut ColorPacket;
    pub fn UniqueImageColors(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn IsHistogramImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn IsPaletteImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn MinMaxStretchImage(arg1: *mut Image, arg2: ChannelType,
                              arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn GetNumberColors(arg1: *Image, arg2: *mut FILE,
                           arg3: *mut ExceptionInfo) -> size_t;
    pub fn IdentifyImage(arg1: *mut Image, arg2: *mut FILE,
                         arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn GetImageViewException(arg1: *ImageView, arg2: *mut ExceptionType)
     -> *mut c_schar;
    pub fn GetImageViewVirtualIndexes(arg1: *ImageView) -> *IndexPacket;
    pub fn GetImageViewVirtualPixels(arg1: *ImageView) -> *PixelPacket;
    pub fn GetImageViewImage(arg1: *ImageView) -> *mut Image;
    pub fn CloneImageView(arg1: *ImageView) -> *mut ImageView;
    pub fn DestroyImageView(arg1: *mut ImageView) -> *mut ImageView;
    pub fn NewImageView(arg1: *mut Image) -> *mut ImageView;
    pub fn NewImageViewRegion(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                              arg4: size_t, arg5: size_t) -> *mut ImageView;
    pub fn GetImageViewAuthenticIndexes(arg1: *ImageView) -> *mut IndexPacket;
    pub fn DuplexTransferImageViewIterator(arg1: *mut ImageView,
                                           arg2: *mut ImageView,
                                           arg3: *mut ImageView,
                                           arg4:
                                               DuplexTransferImageViewMethod,
                                           arg5: *mut c_void) ->
     MagickBooleanType;
    pub fn GetImageViewIterator(arg1: *mut ImageView,
                                arg2: GetImageViewMethod, arg3: *mut c_void)
     -> MagickBooleanType;
    pub fn IsImageView(arg1: *ImageView) -> MagickBooleanType;
    pub fn SetImageViewIterator(arg1: *mut ImageView,
                                arg2: SetImageViewMethod, arg3: *mut c_void)
     -> MagickBooleanType;
    pub fn TransferImageViewIterator(arg1: *mut ImageView,
                                     arg2: *mut ImageView,
                                     arg3: TransferImageViewMethod,
                                     arg4: *mut c_void) -> MagickBooleanType;
    pub fn UpdateImageViewIterator(arg1: *mut ImageView,
                                   arg2: UpdateImageViewMethod,
                                   arg3: *mut c_void) -> MagickBooleanType;
    pub fn GetImageViewAuthenticPixels(arg1: *ImageView) -> *mut PixelPacket;
    pub fn GetImageViewExtent(arg1: *ImageView) -> RectangleInfo;
    pub fn SetImageViewDescription(arg1: *mut ImageView, arg2: *c_schar);
    pub fn SetImageViewThreads(arg1: *mut ImageView, arg2: size_t);
    pub fn CloneImageList(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn CloneImages(arg1: *Image, arg2: *c_schar, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn DestroyImageList(arg1: *mut Image) -> *mut Image;
    pub fn DuplicateImages(arg1: *mut Image, arg2: size_t, arg3: *c_schar,
                           arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn GetFirstImageInList(arg1: *Image) -> *mut Image;
    pub fn GetImageFromList(arg1: *Image, arg2: ssize_t) -> *mut Image;
    pub fn GetLastImageInList(arg1: *Image) -> *mut Image;
    pub fn GetNextImageInList(arg1: *Image) -> *mut Image;
    pub fn GetPreviousImageInList(arg1: *Image) -> *mut Image;
    pub fn ImageListToArray(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut *mut Image;
    pub fn NewImageList() -> *mut Image;
    pub fn RemoveImageFromList(arg1: *mut *mut Image) -> *mut Image;
    pub fn RemoveLastImageFromList(arg1: *mut *mut Image) -> *mut Image;
    pub fn RemoveFirstImageFromList(arg1: *mut *mut Image) -> *mut Image;
    pub fn SpliceImageIntoList(arg1: *mut *mut Image, arg2: size_t,
                               arg3: *Image) -> *mut Image;
    pub fn SplitImageList(arg1: *mut Image) -> *mut Image;
    pub fn SyncNextImageInList(arg1: *Image) -> *mut Image;
    pub fn GetImageListLength(arg1: *Image) -> size_t;
    pub fn GetImageIndexInList(arg1: *Image) -> ssize_t;
    pub fn AppendImageToList(arg1: *mut *mut Image, arg2: *Image);
    pub fn DeleteImageFromList(arg1: *mut *mut Image);
    pub fn DeleteImages(arg1: *mut *mut Image, arg2: *c_schar,
                        arg3: *mut ExceptionInfo);
    pub fn InsertImageInList(arg1: *mut *mut Image, arg2: *mut Image);
    pub fn PrependImageToList(arg1: *mut *mut Image, arg2: *mut Image);
    pub fn ReplaceImageInList(arg1: *mut *mut Image, arg2: *mut Image);
    pub fn ReplaceImageInListReturnLast(arg1: *mut *mut Image,
                                        arg2: *mut Image);
    pub fn ReverseImageList(arg1: *mut *mut Image);
    pub fn SyncImageList(arg1: *mut Image);
    pub fn GetLogList(arg1: *c_schar, arg2: *mut size_t,
                      arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetLogName() -> *c_schar;
    pub fn SetLogName(arg1: *c_schar) -> *c_schar;
    pub fn GetLogInfoList(arg1: *c_schar, arg2: *mut size_t,
                          arg3: *mut ExceptionInfo) -> *mut *LogInfo;
    pub fn SetLogEventMask(arg1: *c_schar) -> LogEventType;
    pub fn IsEventLogging() -> MagickBooleanType;
    pub fn ListLogInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn LogComponentGenesis() -> MagickBooleanType;
    pub fn LogMagickEvent(arg1: LogEventType, arg2: *c_schar, arg3: *c_schar,
                          arg4: size_t, arg5: *c_schar, ...) ->
     MagickBooleanType;
    pub fn CloseMagickLog();
    pub fn LogComponentTerminus();
    pub fn SetLogFormat(arg1: *c_schar);
    pub fn GetMagicList(arg1: *c_schar, arg2: *mut size_t,
                        arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetMagicName(arg1: *MagicInfo) -> *c_schar;
    pub fn ListMagicInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn MagicComponentGenesis() -> MagickBooleanType;
    pub fn GetMagicInfo(arg1: *c_uchar, arg2: size_t,
                        arg3: *mut ExceptionInfo) -> *MagicInfo;
    pub fn GetMagicInfoList(arg1: *c_schar, arg2: *mut size_t,
                            arg3: *mut ExceptionInfo) -> *mut *MagicInfo;
    pub fn MagicComponentTerminus();
    pub fn GetMagickList(arg1: *c_schar, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetMagickDescription(arg1: *MagickInfo) -> *c_schar;
    pub fn GetMagickMimeType(arg1: *MagickInfo) -> *c_schar;
    pub fn GetImageDecoder(arg1: *MagickInfo) ->
     *mut extern "C" fn(arg1: *ImageInfo, arg2: *mut ExceptionInfo)
              -> *mut Image;
    pub fn GetImageEncoder(arg1: *MagickInfo) ->
     *mut extern "C" fn(arg1: *ImageInfo, arg2: *mut Image)
              -> MagickBooleanType;
    pub fn GetMagickPrecision() -> c_int;
    pub fn SetMagickPrecision(arg1: c_int) -> c_int;
    pub fn GetImageMagick(arg1: *c_uchar, arg2: size_t, arg3: *mut c_schar) ->
     MagickBooleanType;
    pub fn GetMagickAdjoin(arg1: *MagickInfo) -> MagickBooleanType;
    pub fn GetMagickBlobSupport(arg1: *MagickInfo) -> MagickBooleanType;
    pub fn GetMagickEndianSupport(arg1: *MagickInfo) -> MagickBooleanType;
    pub fn GetMagickRawSupport(arg1: *MagickInfo) -> MagickBooleanType;
    pub fn GetMagickSeekableStream(arg1: *MagickInfo) -> MagickBooleanType;
    pub fn IsMagickInstantiated() -> MagickBooleanType;
    pub fn MagickComponentGenesis() -> MagickBooleanType;
    pub fn UnregisterMagickInfo(arg1: *c_schar) -> MagickBooleanType;
    pub fn GetMagickInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *MagickInfo;
    pub fn GetMagickInfoList(arg1: *c_schar, arg2: *mut size_t,
                             arg3: *mut ExceptionInfo) -> *mut *MagickInfo;
    pub fn RegisterMagickInfo(arg1: *mut MagickInfo) -> *mut MagickInfo;
    pub fn SetMagickInfo(arg1: *c_schar) -> *mut MagickInfo;
    pub fn GetMagickThreadSupport(arg1: *MagickInfo) -> MagickStatusType;
    pub fn MagickComponentTerminus();
    pub fn MagickCoreGenesis(arg1: *c_schar, arg2: MagickBooleanType);
    pub fn MagickCoreTerminus();
    pub fn AcquireMagickMatrix(arg1: size_t, arg2: size_t) ->
     *mut *mut c_double;
    pub fn RelinquishMagickMatrix(arg1: *mut *mut c_double, arg2: size_t) ->
     *mut *mut c_double;
    pub fn GaussJordanElimination(arg1: *mut *mut c_double,
                                  arg2: *mut *mut c_double, arg3: size_t,
                                  arg4: size_t) -> MagickBooleanType;
    pub fn LeastSquaresAddTerms(arg1: *mut *mut c_double,
                                arg2: *mut *mut c_double, arg3: *c_double,
                                arg4: *c_double, arg5: size_t, arg6: size_t);
    pub fn AcquireVirtualMemory(arg1: size_t, arg2: size_t) ->
     *mut MemoryInfo;
    pub fn RelinquishVirtualMemory(arg1: *mut MemoryInfo) -> *mut MemoryInfo;
    pub fn AcquireAlignedMemory(arg1: size_t, arg2: size_t) -> *mut c_void;
    pub fn AcquireMagickMemory(arg1: size_t) -> *mut c_void;
    pub fn AcquireQuantumMemory(arg1: size_t, arg2: size_t) -> *mut c_void;
    pub fn CopyMagickMemory(arg1: *mut c_void, arg2: *c_void, arg3: size_t) ->
     *mut c_void;
    pub fn DestroyMagickMemory();
    pub fn GetMagickMemoryMethods(arg1: *mut AcquireMemoryHandler,
                                  arg2: *mut ResizeMemoryHandler,
                                  arg3: *mut DestroyMemoryHandler);
    pub fn GetVirtualMemoryBlob(arg1: *MemoryInfo) -> *mut c_void;
    pub fn RelinquishAlignedMemory(arg1: *mut c_void) -> *mut c_void;
    pub fn RelinquishMagickMemory(arg1: *mut c_void) -> *mut c_void;
    pub fn ResetMagickMemory(arg1: *mut c_void, arg2: c_int, arg3: size_t) ->
     *mut c_void;
    pub fn ResizeMagickMemory(arg1: *mut c_void, arg2: size_t) -> *mut c_void;
    pub fn ResizeQuantumMemory(arg1: *mut c_void, arg2: size_t, arg3: size_t)
     -> *mut c_void;
    pub fn SetMagickMemoryMethods(arg1: AcquireMemoryHandler,
                                  arg2: ResizeMemoryHandler,
                                  arg3: DestroyMemoryHandler);
    pub fn GetMagickHomeURL() -> *mut c_schar;
    pub fn GetMagickCopyright() -> *c_schar;
    pub fn GetMagickDelegates() -> *c_schar;
    pub fn GetMagickFeatures() -> *c_schar;
    pub fn GetMagickPackageName() -> *c_schar;
    pub fn GetMagickQuantumDepth(arg1: *mut size_t) -> *c_schar;
    pub fn GetMagickQuantumRange(arg1: *mut size_t) -> *c_schar;
    pub fn GetMagickReleaseDate() -> *c_schar;
    pub fn GetMagickVersion(arg1: *mut size_t) -> *c_schar;
    pub fn ListMagickVersion(arg1: *mut FILE);
    pub fn GetModuleList(arg1: *c_schar, arg2: MagickModuleType,
                         arg3: *mut size_t, arg4: *mut ExceptionInfo) ->
     *mut *mut c_schar;
    pub fn GetModuleInfoList(arg1: *c_schar, arg2: *mut size_t,
                             arg3: *mut ExceptionInfo) -> *mut *ModuleInfo;
    pub fn InitializeModuleList(arg1: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn InvokeDynamicImageFilter(arg1: *c_schar, arg2: *mut *mut Image,
                                    arg3: c_int, arg4: *mut *c_schar,
                                    arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ListModuleInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ModuleComponentGenesis() -> MagickBooleanType;
    pub fn OpenModule(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn OpenModules(arg1: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn GetModuleInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut ModuleInfo;
    pub fn DestroyModuleList();
    pub fn ModuleComponentTerminus();
    pub fn RegisterStaticModules();
    pub fn UnregisterStaticModules();
    pub fn GetMimeList(arg1: *c_schar, arg2: *mut size_t,
                       arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn MagickToMime(arg1: *c_schar) -> *mut c_schar;
    pub fn GetMimeDescription(arg1: *MimeInfo) -> *c_schar;
    pub fn GetMimeType(arg1: *MimeInfo) -> *c_schar;
    pub fn ListMimeInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn LoadMimeLists(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn MimeComponentGenesis() -> MagickBooleanType;
    pub fn GetMimeInfo(arg1: *c_schar, arg2: *c_uchar, arg3: size_t,
                       arg4: *mut ExceptionInfo) -> *MimeInfo;
    pub fn GetMimeInfoList(arg1: *c_schar, arg2: *mut size_t,
                           arg3: *mut ExceptionInfo) -> *mut *MimeInfo;
    pub fn MimeComponentTerminus();
    pub fn MontageImages(arg1: *Image, arg2: *MontageInfo,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn MontageImageList(arg1: *ImageInfo, arg2: *MontageInfo,
                            arg3: *Image, arg4: *mut ExceptionInfo) ->
     *mut Image;
    pub fn CloneMontageInfo(arg1: *ImageInfo, arg2: *MontageInfo) ->
     *mut MontageInfo;
    pub fn DestroyMontageInfo(arg1: *mut MontageInfo) -> *mut MontageInfo;
    pub fn GetMontageInfo(arg1: *ImageInfo, arg2: *mut MontageInfo);
    pub fn GetCommandOptions(arg1: CommandOption) -> *mut *mut c_schar;
    pub fn GetNextImageOption(arg1: *ImageInfo) -> *mut c_schar;
    pub fn RemoveImageOption(arg1: *mut ImageInfo, arg2: *c_schar) ->
     *mut c_schar;
    pub fn CommandOptionToMnemonic(arg1: CommandOption, arg2: ssize_t) ->
     *c_schar;
    pub fn GetImageOption(arg1: *ImageInfo, arg2: *c_schar) -> *c_schar;
    pub fn CloneImageOptions(arg1: *mut ImageInfo, arg2: *ImageInfo) ->
     MagickBooleanType;
    pub fn DefineImageOption(arg1: *mut ImageInfo, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DeleteImageOption(arg1: *mut ImageInfo, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn IsCommandOption(arg1: *c_schar) -> MagickBooleanType;
    pub fn ListCommandOptions(arg1: *mut FILE, arg2: CommandOption,
                              arg3: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn SetImageOption(arg1: *mut ImageInfo, arg2: *c_schar,
                          arg3: *c_schar) -> MagickBooleanType;
    pub fn GetCommandOptionFlags(arg1: CommandOption, arg2: MagickBooleanType,
                                 arg3: *c_schar) -> ssize_t;
    pub fn ParseChannelOption(arg1: *c_schar) -> ssize_t;
    pub fn ParseCommandOption(arg1: CommandOption, arg2: MagickBooleanType,
                              arg3: *c_schar) -> ssize_t;
    pub fn DestroyImageOptions(arg1: *mut ImageInfo);
    pub fn ResetImageOptions(arg1: *ImageInfo);
    pub fn ResetImageOptionIterator(arg1: *ImageInfo);
    pub fn OilPaintImage(arg1: *Image, arg2: c_double,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn FloodfillPaintImage(arg1: *mut Image, arg2: ChannelType,
                               arg3: *DrawInfo, arg4: *MagickPixelPacket,
                               arg5: ssize_t, arg6: ssize_t,
                               arg7: MagickBooleanType) -> MagickBooleanType;
    pub fn GradientImage(arg1: *mut Image, arg2: GradientType,
                         arg3: SpreadMethod, arg4: *PixelPacket,
                         arg5: *PixelPacket) -> MagickBooleanType;
    pub fn OpaquePaintImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                            arg3: *MagickPixelPacket, arg4: MagickBooleanType)
     -> MagickBooleanType;
    pub fn OpaquePaintImageChannel(arg1: *mut Image, arg2: ChannelType,
                                   arg3: *MagickPixelPacket,
                                   arg4: *MagickPixelPacket,
                                   arg5: MagickBooleanType) ->
     MagickBooleanType;
    pub fn TransparentPaintImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                                 arg3: Quantum, arg4: MagickBooleanType) ->
     MagickBooleanType;
    pub fn TransparentPaintImageChroma(arg1: *mut Image,
                                       arg2: *MagickPixelPacket,
                                       arg3: *MagickPixelPacket,
                                       arg4: Quantum, arg5: MagickBooleanType)
     -> MagickBooleanType;
    pub fn GetPolicyValue(name: *c_schar) -> *mut c_schar;
    pub fn GetPolicyList(arg1: *c_schar, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    pub fn GetPolicyInfoList(arg1: *c_schar, arg2: *mut size_t,
                             arg3: *mut ExceptionInfo) -> *mut *PolicyInfo;
    pub fn IsRightsAuthorized(arg1: PolicyDomain, arg2: PolicyRights,
                              arg3: *c_schar) -> MagickBooleanType;
    pub fn ListPolicyInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn PolicyComponentGenesis() -> MagickBooleanType;
    pub fn PolicyComponentTerminus();
    pub fn GetImageTotalInkDensity(image: *mut Image) -> c_double;
    pub fn GetNextImageProperty(arg1: *Image) -> *mut c_schar;
    pub fn InterpretImageProperties(arg1: *ImageInfo, arg2: *mut Image,
                                    arg3: *c_schar) -> *mut c_schar;
    pub fn RemoveImageProperty(arg1: *mut Image, arg2: *c_schar) ->
     *mut c_schar;
    pub fn GetImageProperty(arg1: *Image, arg2: *c_schar) -> *c_schar;
    pub fn GetMagickProperty(arg1: *ImageInfo, arg2: *mut Image,
                             arg3: *c_schar) -> *c_schar;
    pub fn CloneImageProperties(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    pub fn DefineImageProperty(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DeleteImageProperty(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn FormatImageProperty(arg1: *mut Image, arg2: *c_schar,
                               arg3: *c_schar, ...) -> MagickBooleanType;
    pub fn SetImageProperty(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    pub fn DestroyImageProperties(arg1: *mut Image);
    pub fn ResetImagePropertyIterator(arg1: *Image);
    pub fn AcquireUniqueFileResource(arg1: *mut c_schar) -> c_int;
    pub fn AcquireMagickResource(arg1: ResourceType, arg2: MagickSizeType) ->
     MagickBooleanType;
    pub fn GetPathTemplate(arg1: *mut c_schar) -> MagickBooleanType;
    pub fn ListMagickResourceInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo)
     -> MagickBooleanType;
    pub fn RelinquishUniqueFileResource(arg1: *c_schar) -> MagickBooleanType;
    pub fn ResourceComponentGenesis() -> MagickBooleanType;
    pub fn SetMagickResourceLimit(arg1: ResourceType, arg2: MagickSizeType) ->
     MagickBooleanType;
    pub fn GetMagickResource(arg1: ResourceType) -> MagickSizeType;
    pub fn GetMagickResourceLimit(arg1: ResourceType) -> MagickSizeType;
    pub fn AsynchronousResourceComponentTerminus();
    pub fn RelinquishMagickResource(arg1: ResourceType, arg2: MagickSizeType);
    pub fn ResourceComponentTerminus();
    pub fn GetImageDynamicThreshold(arg1: *Image, arg2: c_double,
                                    arg3: c_double,
                                    arg4: *mut MagickPixelPacket,
                                    arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn SegmentImage(arg1: *mut Image, arg2: ColorspaceType,
                        arg3: MagickBooleanType, arg4: c_double,
                        arg5: c_double) -> MagickBooleanType;
    pub fn DeskewImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    pub fn IntegralRotateImage(arg1: *Image, arg2: size_t,
                               arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ShearImage(arg1: *Image, arg2: c_double, arg3: c_double,
                      arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ShearRotateImage(arg1: *Image, arg2: c_double,
                            arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn SignatureImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn AddValueToSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void,
                               arg3: *c_void) -> MagickBooleanType;
    pub fn DeleteNodeByValueFromSplayTree(arg1: *mut SplayTreeInfo,
                                          arg2: *c_void) -> MagickBooleanType;
    pub fn DeleteNodeFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void) ->
     MagickBooleanType;
    pub fn GetNextKeyInSplayTree(arg1: *mut SplayTreeInfo) -> *c_void;
    pub fn GetNextValueInSplayTree(arg1: *mut SplayTreeInfo) -> *c_void;
    pub fn GetValueFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void) ->
     *c_void;
    pub fn CompareSplayTreeString(arg1: *c_void, arg2: *c_void) -> c_int;
    pub fn CompareSplayTreeStringInfo(arg1: *c_void, arg2: *c_void) -> c_int;
    pub fn CloneSplayTree(arg1: *mut SplayTreeInfo,
                          arg2:
                              extern "C" fn(arg1: *mut c_void) -> *mut c_void,
                          arg3:
                              extern "C" fn(arg1: *mut c_void) -> *mut c_void)
     -> *mut SplayTreeInfo;
    pub fn DestroySplayTree(arg1: *mut SplayTreeInfo) -> *mut SplayTreeInfo;
    pub fn NewSplayTree(arg1:
                            extern "C" fn(arg1: *c_void, arg2: *c_void)
                                -> c_int,
                        arg2: extern "C" fn(arg1: *mut c_void) -> *mut c_void,
                        arg3: extern "C" fn(arg1: *mut c_void) -> *mut c_void)
     -> *mut SplayTreeInfo;
    pub fn GetNumberOfNodesInSplayTree(arg1: *SplayTreeInfo) -> size_t;
    pub fn RemoveNodeByValueFromSplayTree(arg1: *mut SplayTreeInfo,
                                          arg2: *c_void) -> *mut c_void;
    pub fn RemoveNodeFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void) ->
     *mut c_void;
    pub fn ResetSplayTree(arg1: *mut SplayTreeInfo);
    pub fn ResetSplayTreeIterator(arg1: *mut SplayTreeInfo);
    pub fn Tokenizer(arg1: *mut TokenInfo, arg2: c_uint, arg3: *mut c_schar,
                     arg4: size_t, arg5: *c_schar, arg6: *c_schar,
                     arg7: *c_schar, arg8: *c_schar, arg9: c_schar,
                     arg10: *mut c_schar, arg11: *mut c_int,
                     arg12: *mut c_schar) -> c_int;
    pub fn GlobExpression(arg1: *c_schar, arg2: *c_schar,
                          arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn IsGlob(arg1: *c_schar) -> MagickBooleanType;
    pub fn IsMagickTrue(arg1: *c_schar) -> MagickBooleanType;
    pub fn AcquireTokenInfo() -> *mut TokenInfo;
    pub fn DestroyTokenInfo(arg1: *mut TokenInfo) -> *mut TokenInfo;
    pub fn GetMagickToken(arg1: *c_schar, arg2: *mut *c_schar,
                          arg3: *mut c_schar);
    pub fn AutoOrientImage(arg1: *Image, arg2: OrientationType,
                           arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ChopImage(arg1: *Image, arg2: *RectangleInfo,
                     arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ConsolidateCMYKImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn CropImage(arg1: *Image, arg2: *RectangleInfo,
                     arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn CropImageToTiles(arg1: *Image, arg2: *c_schar,
                            arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ExcerptImage(arg1: *Image, arg2: *RectangleInfo,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ExtentImage(arg1: *Image, arg2: *RectangleInfo,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn FlipImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn FlopImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn RollImage(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn ShaveImage(arg1: *Image, arg2: *RectangleInfo,
                      arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn SpliceImage(arg1: *Image, arg2: *RectangleInfo,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn TransposeImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn TransverseImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    pub fn TrimImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    pub fn TransformImage(arg1: *mut *mut Image, arg2: *c_schar,
                          arg3: *c_schar) -> MagickBooleanType;
    pub fn TransformImages(arg1: *mut *mut Image, arg2: *c_schar,
                           arg3: *c_schar) -> MagickBooleanType;
    pub fn AdaptiveThresholdImage(arg1: *Image, arg2: size_t, arg3: size_t,
                                  arg4: ssize_t, arg5: *mut ExceptionInfo) ->
     *mut Image;
    pub fn DestroyThresholdMap(arg1: *mut ThresholdMap) -> *mut ThresholdMap;
    pub fn GetThresholdMap(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut ThresholdMap;
    pub fn BilevelImage(arg1: *mut Image, arg2: c_double) ->
     MagickBooleanType;
    pub fn BilevelImageChannel(arg1: *mut Image, arg2: ChannelType,
                               arg3: c_double) -> MagickBooleanType;
    pub fn BlackThresholdImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn BlackThresholdImageChannel(arg1: *mut Image, arg2: ChannelType,
                                      arg3: *c_schar,
                                      arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ClampImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn ClampImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    pub fn ListThresholdMaps(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn OrderedDitherImage(arg1: *mut Image) -> MagickBooleanType;
    pub fn OrderedDitherImageChannel(arg1: *mut Image, arg2: ChannelType,
                                     arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn OrderedPosterizeImage(arg1: *mut Image, arg2: *c_schar,
                                 arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn OrderedPosterizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                                        arg3: *c_schar,
                                        arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn PerceptibleImage(arg1: *mut Image, arg2: c_double) ->
     MagickBooleanType;
    pub fn PerceptibleImageChannel(arg1: *mut Image, arg2: ChannelType,
                                   arg3: c_double) -> MagickBooleanType;
    pub fn RandomThresholdImage(arg1: *mut Image, arg2: *c_schar,
                                arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn RandomThresholdImageChannel(arg1: *mut Image, arg2: ChannelType,
                                       arg3: *c_schar,
                                       arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn WhiteThresholdImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn WhiteThresholdImageChannel(arg1: *mut Image, arg2: ChannelType,
                                      arg3: *c_schar,
                                      arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn Base64Encode(arg1: *c_uchar, arg2: size_t, arg3: *mut size_t) ->
     *mut c_schar;
    pub fn GetPathComponents(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    pub fn ListFiles(arg1: *c_schar, arg2: *c_schar, arg3: *mut size_t) ->
     *mut *mut c_schar;
    pub fn SystemCommand(arg1: MagickBooleanType, arg2: MagickBooleanType,
                         arg3: *c_schar, arg4: *mut ExceptionInfo) -> c_int;
    pub fn AcquireUniqueFilename(arg1: *mut c_schar) -> MagickBooleanType;
    pub fn AcquireUniqueSymbolicLink(arg1: *c_schar, arg2: *mut c_schar) ->
     MagickBooleanType;
    pub fn ExpandFilenames(arg1: *mut c_int, arg2: *mut *mut *mut c_schar) ->
     MagickBooleanType;
    pub fn GetPathAttributes(arg1: *c_schar, arg2: *mut c_void) ->
     MagickBooleanType;
    pub fn GetExecutionPath(arg1: *mut c_schar, arg2: size_t) ->
     MagickBooleanType;
    pub fn IsPathAccessible(arg1: *c_schar) -> MagickBooleanType;
    pub fn MultilineCensus(arg1: *c_schar) -> size_t;
    pub fn GetMagickPageSize() -> ssize_t;
    pub fn Base64Decode(arg1: *c_schar, arg2: *mut size_t) -> *mut c_uchar;
    pub fn AppendImageFormat(arg1: *c_schar, arg2: *mut c_schar);
    pub fn ChopPathComponents(arg1: *mut c_schar, arg2: size_t);
    pub fn ExpandFilename(arg1: *mut c_schar);
    pub fn GetPathComponent(arg1: *c_schar, arg2: PathType,
                            arg3: *mut c_schar);
    pub fn MagickDelay(arg1: MagickSizeType);
    pub fn CanonicalXMLContent(arg1: *c_schar, arg2: MagickBooleanType) ->
     *mut c_schar;
    pub fn XMLTreeInfoToXML(arg1: *mut XMLTreeInfo) -> *mut c_schar;
    pub fn GetXMLTreeAttribute(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *c_schar;
    pub fn GetXMLTreeContent(arg1: *mut XMLTreeInfo) -> *c_schar;
    pub fn GetXMLTreeProcessingInstructions(arg1: *mut XMLTreeInfo,
                                            arg2: *c_schar) -> *mut *c_schar;
    pub fn GetXMLTreeTag(arg1: *mut XMLTreeInfo) -> *c_schar;
    pub fn GetXMLTreeAttributes(arg1: *XMLTreeInfo, arg2: *mut SplayTreeInfo)
     -> MagickBooleanType;
    pub fn AddChildToXMLTree(arg1: *mut XMLTreeInfo, arg2: *c_schar,
                             arg3: size_t) -> *mut XMLTreeInfo;
    pub fn AddPathToXMLTree(arg1: *mut XMLTreeInfo, arg2: *c_schar,
                            arg3: size_t) -> *mut XMLTreeInfo;
    pub fn DestroyXMLTree(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    pub fn GetNextXMLTreeTag(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    pub fn GetXMLTreeChild(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *mut XMLTreeInfo;
    pub fn GetXMLTreeOrdered(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    pub fn GetXMLTreePath(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *mut XMLTreeInfo;
    pub fn GetXMLTreeSibling(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    pub fn InsertTagIntoXMLTree(arg1: *mut XMLTreeInfo,
                                arg2: *mut XMLTreeInfo, arg3: size_t) ->
     *mut XMLTreeInfo;
    pub fn NewXMLTree(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut XMLTreeInfo;
    pub fn NewXMLTreeTag(arg1: *c_schar) -> *mut XMLTreeInfo;
    pub fn ParseTagFromXMLTree(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    pub fn PruneTagFromXMLTree(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    pub fn SetXMLTreeAttribute(arg1: *mut XMLTreeInfo, arg2: *c_schar,
                               arg3: *c_schar) -> *mut XMLTreeInfo;
    pub fn SetXMLTreeContent(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *mut XMLTreeInfo;
    pub fn XImportImage(arg1: *ImageInfo, arg2: *mut XImportInfo) ->
     *mut Image;
    pub fn XGetImportInfo(arg1: *mut XImportInfo);
    pub fn AnimateImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                               arg3: *mut *mut c_schar,
                               arg4: *mut *mut c_schar,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn CompareImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                               arg3: *mut *mut c_schar,
                               arg4: *mut *mut c_schar,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn CompositeImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                                 arg3: *mut *mut c_schar,
                                 arg4: *mut *mut c_schar,
                                 arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ConjureImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                               arg3: *mut *mut c_schar,
                               arg4: *mut *mut c_schar,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn ConvertImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                               arg3: *mut *mut c_schar,
                               arg4: *mut *mut c_schar,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn PixelGetColorAsNormalizedString(arg1: *PixelWand) -> *mut c_schar;
    pub fn PixelGetColorAsString(arg1: *PixelWand) -> *mut c_schar;
    pub fn PixelGetException(arg1: *PixelWand, arg2: *mut ExceptionType) ->
     *mut c_schar;
    pub fn PixelGetAlpha(arg1: *PixelWand) -> c_double;
    pub fn PixelGetBlack(arg1: *PixelWand) -> c_double;
    pub fn PixelGetBlue(arg1: *PixelWand) -> c_double;
    pub fn PixelGetCyan(arg1: *PixelWand) -> c_double;
    pub fn PixelGetFuzz(arg1: *PixelWand) -> c_double;
    pub fn PixelGetGreen(arg1: *PixelWand) -> c_double;
    pub fn PixelGetMagenta(arg1: *PixelWand) -> c_double;
    pub fn PixelGetOpacity(arg1: *PixelWand) -> c_double;
    pub fn PixelGetRed(arg1: *PixelWand) -> c_double;
    pub fn PixelGetYellow(arg1: *PixelWand) -> c_double;
    pub fn PixelGetExceptionType(arg1: *PixelWand) -> ExceptionType;
    pub fn PixelGetIndex(arg1: *PixelWand) -> IndexPacket;
    pub fn IsPixelWand(arg1: *PixelWand) -> MagickBooleanType;
    pub fn IsPixelWandSimilar(arg1: *mut PixelWand, arg2: *mut PixelWand,
                              arg3: c_double) -> MagickBooleanType;
    pub fn PixelClearException(arg1: *mut PixelWand) -> MagickBooleanType;
    pub fn PixelSetColor(arg1: *mut PixelWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn ClonePixelWand(arg1: *PixelWand) -> *mut PixelWand;
    pub fn ClonePixelWands(arg1: *mut *PixelWand, arg2: size_t) ->
     *mut *mut PixelWand;
    pub fn DestroyPixelWand(arg1: *mut PixelWand) -> *mut PixelWand;
    pub fn DestroyPixelWands(arg1: *mut *mut PixelWand, arg2: size_t) ->
     *mut *mut PixelWand;
    pub fn NewPixelWand() -> *mut PixelWand;
    pub fn NewPixelWands(arg1: size_t) -> *mut *mut PixelWand;
    pub fn PixelGetAlphaQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetBlackQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetBlueQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetCyanQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetGreenQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetMagentaQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetOpacityQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetRedQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetYellowQuantum(arg1: *PixelWand) -> Quantum;
    pub fn PixelGetColorCount(arg1: *PixelWand) -> size_t;
    pub fn ClearPixelWand(arg1: *mut PixelWand);
    pub fn PixelGetHSL(arg1: *PixelWand, arg2: *mut c_double,
                       arg3: *mut c_double, arg4: *mut c_double);
    pub fn PixelGetMagickColor(arg1: *PixelWand,
                               arg2: *mut MagickPixelPacket);
    pub fn PixelGetQuantumColor(arg1: *PixelWand, arg2: *mut PixelPacket);
    pub fn PixelSetAlpha(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetAlphaQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetBlack(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetBlackQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetBlue(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetBlueQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetColorFromWand(arg1: *mut PixelWand, arg2: *PixelWand);
    pub fn PixelSetColorCount(arg1: *mut PixelWand, arg2: size_t);
    pub fn PixelSetCyan(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetCyanQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetFuzz(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetGreen(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetGreenQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetHSL(arg1: *mut PixelWand, arg2: c_double, arg3: c_double,
                       arg4: c_double);
    pub fn PixelSetIndex(arg1: *mut PixelWand, arg2: IndexPacket);
    pub fn PixelSetMagenta(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetMagentaQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetMagickColor(arg1: *mut PixelWand,
                               arg2: *MagickPixelPacket);
    pub fn PixelSetOpacity(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetOpacityQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetQuantumColor(arg1: *mut PixelWand, arg2: *PixelPacket);
    pub fn PixelSetRed(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetRedQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn PixelSetYellow(arg1: *mut PixelWand, arg2: c_double);
    pub fn PixelSetYellowQuantum(arg1: *mut PixelWand, arg2: Quantum);
    pub fn DrawGetTextAlignment(arg1: *DrawingWand) -> AlignType;
    pub fn DrawGetClipPath(arg1: *DrawingWand) -> *mut c_schar;
    pub fn DrawGetException(arg1: *DrawingWand, arg2: *mut ExceptionType) ->
     *mut c_schar;
    pub fn DrawGetFont(arg1: *DrawingWand) -> *mut c_schar;
    pub fn DrawGetFontFamily(arg1: *DrawingWand) -> *mut c_schar;
    pub fn DrawGetTextEncoding(arg1: *DrawingWand) -> *mut c_schar;
    pub fn DrawGetVectorGraphics(arg1: *mut DrawingWand) -> *mut c_schar;
    pub fn DrawGetClipUnits(arg1: *DrawingWand) -> ClipPathUnits;
    pub fn DrawGetTextDecoration(arg1: *DrawingWand) -> DecorationType;
    pub fn DrawGetFillOpacity(arg1: *DrawingWand) -> c_double;
    pub fn DrawGetFontSize(arg1: *DrawingWand) -> c_double;
    pub fn DrawGetOpacity(arg1: *DrawingWand) -> c_double;
    pub fn DrawGetStrokeDashArray(arg1: *DrawingWand, arg2: *mut size_t) ->
     *mut c_double;
    pub fn DrawGetStrokeDashOffset(arg1: *DrawingWand) -> c_double;
    pub fn DrawGetStrokeOpacity(arg1: *DrawingWand) -> c_double;
    pub fn DrawGetStrokeWidth(arg1: *DrawingWand) -> c_double;
    pub fn DrawGetTextKerning(arg1: *mut DrawingWand) -> c_double;
    pub fn DrawGetTextInterlineSpacing(arg1: *mut DrawingWand) -> c_double;
    pub fn DrawGetTextInterwordSpacing(arg1: *mut DrawingWand) -> c_double;
    pub fn PeekDrawingWand(arg1: *DrawingWand) -> *mut DrawInfo;
    pub fn CloneDrawingWand(arg1: *DrawingWand) -> *mut DrawingWand;
    pub fn DestroyDrawingWand(arg1: *mut DrawingWand) -> *mut DrawingWand;
    pub fn DrawAllocateWand(arg1: *DrawInfo, arg2: *mut Image) ->
     *mut DrawingWand;
    pub fn NewDrawingWand() -> *mut DrawingWand;
    pub fn DrawGetExceptionType(arg1: *DrawingWand) -> ExceptionType;
    pub fn DrawGetClipRule(arg1: *DrawingWand) -> FillRule;
    pub fn DrawGetFillRule(arg1: *DrawingWand) -> FillRule;
    pub fn DrawGetGravity(arg1: *DrawingWand) -> GravityType;
    pub fn DrawGetStrokeLineCap(arg1: *DrawingWand) -> LineCap;
    pub fn DrawGetStrokeLineJoin(arg1: *DrawingWand) -> LineJoin;
    pub fn DrawClearException(arg1: *mut DrawingWand) -> MagickBooleanType;
    pub fn DrawComposite(arg1: *mut DrawingWand, arg2: CompositeOperator,
                         arg3: c_double, arg4: c_double, arg5: c_double,
                         arg6: c_double, arg7: *mut MagickWand) ->
     MagickBooleanType;
    pub fn DrawGetFontResolution(arg1: *DrawingWand, arg2: *mut c_double,
                                 arg3: *mut c_double) -> MagickBooleanType;
    pub fn DrawGetStrokeAntialias(arg1: *DrawingWand) -> MagickBooleanType;
    pub fn DrawGetTextAntialias(arg1: *DrawingWand) -> MagickBooleanType;
    pub fn DrawPopPattern(arg1: *mut DrawingWand) -> MagickBooleanType;
    pub fn DrawPushPattern(arg1: *mut DrawingWand, arg2: *c_schar,
                           arg3: c_double, arg4: c_double, arg5: c_double,
                           arg6: c_double) -> MagickBooleanType;
    pub fn DrawRender(arg1: *mut DrawingWand) -> MagickBooleanType;
    pub fn DrawSetClipPath(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DrawSetFillPatternURL(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DrawSetFont(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DrawSetFontFamily(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DrawSetFontResolution(arg1: *mut DrawingWand, arg2: c_double,
                                 arg3: c_double) -> MagickBooleanType;
    pub fn DrawSetStrokeDashArray(arg1: *mut DrawingWand, arg2: size_t,
                                  arg3: *c_double) -> MagickBooleanType;
    pub fn DrawSetStrokePatternURL(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn DrawSetVectorGraphics(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn IsDrawingWand(arg1: *DrawingWand) -> MagickBooleanType;
    pub fn PopDrawingWand(arg1: *mut DrawingWand) -> MagickBooleanType;
    pub fn PushDrawingWand(arg1: *mut DrawingWand) -> MagickBooleanType;
    pub fn DrawGetFontStretch(arg1: *DrawingWand) -> StretchType;
    pub fn DrawGetFontStyle(arg1: *DrawingWand) -> StyleType;
    pub fn DrawGetFontWeight(arg1: *DrawingWand) -> size_t;
    pub fn DrawGetStrokeMiterLimit(arg1: *DrawingWand) -> size_t;
    pub fn ClearDrawingWand(arg1: *mut DrawingWand);
    pub fn DrawAffine(arg1: *mut DrawingWand, arg2: *AffineMatrix);
    pub fn DrawAnnotation(arg1: *mut DrawingWand, arg2: c_double,
                          arg3: c_double, arg4: *c_uchar);
    pub fn DrawArc(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                   arg4: c_double, arg5: c_double, arg6: c_double,
                   arg7: c_double);
    pub fn DrawBezier(arg1: *mut DrawingWand, arg2: size_t, arg3: *PointInfo);
    pub fn DrawGetBorderColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    pub fn DrawCircle(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                      arg4: c_double, arg5: c_double);
    pub fn DrawColor(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                     arg4: PaintMethod);
    pub fn DrawComment(arg1: *mut DrawingWand, arg2: *c_schar);
    pub fn DrawEllipse(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                       arg4: c_double, arg5: c_double, arg6: c_double,
                       arg7: c_double);
    pub fn DrawGetFillColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    pub fn DrawGetStrokeColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    pub fn DrawSetTextKerning(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSetTextInterlineSpacing(arg1: *mut DrawingWand,
                                       arg2: c_double);
    pub fn DrawSetTextInterwordSpacing(arg1: *mut DrawingWand,
                                       arg2: c_double);
    pub fn DrawGetTextUnderColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    pub fn DrawLine(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                    arg4: c_double, arg5: c_double);
    pub fn DrawMatte(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                     arg4: PaintMethod);
    pub fn DrawPathClose(arg1: *mut DrawingWand);
    pub fn DrawPathCurveToAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                                   arg3: c_double, arg4: c_double,
                                   arg5: c_double, arg6: c_double,
                                   arg7: c_double);
    pub fn DrawPathCurveToRelative(arg1: *mut DrawingWand, arg2: c_double,
                                   arg3: c_double, arg4: c_double,
                                   arg5: c_double, arg6: c_double,
                                   arg7: c_double);
    pub fn DrawPathCurveToQuadraticBezierAbsolute(arg1: *mut DrawingWand,
                                                  arg2: c_double,
                                                  arg3: c_double,
                                                  arg4: c_double,
                                                  arg5: c_double);
    pub fn DrawPathCurveToQuadraticBezierRelative(arg1: *mut DrawingWand,
                                                  arg2: c_double,
                                                  arg3: c_double,
                                                  arg4: c_double,
                                                  arg5: c_double);
    pub fn DrawPathCurveToQuadraticBezierSmoothAbsolute(arg1:
                                                            *mut DrawingWand,
                                                        arg2: c_double,
                                                        arg3: c_double);
    pub fn DrawPathCurveToQuadraticBezierSmoothRelative(arg1:
                                                            *mut DrawingWand,
                                                        arg2: c_double,
                                                        arg3: c_double);
    pub fn DrawPathCurveToSmoothAbsolute(arg1: *mut DrawingWand,
                                         arg2: c_double, arg3: c_double,
                                         arg4: c_double, arg5: c_double);
    pub fn DrawPathCurveToSmoothRelative(arg1: *mut DrawingWand,
                                         arg2: c_double, arg3: c_double,
                                         arg4: c_double, arg5: c_double);
    pub fn DrawPathEllipticArcAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                                       arg3: c_double, arg4: c_double,
                                       arg5: MagickBooleanType,
                                       arg6: MagickBooleanType,
                                       arg7: c_double, arg8: c_double);
    pub fn DrawPathEllipticArcRelative(arg1: *mut DrawingWand, arg2: c_double,
                                       arg3: c_double, arg4: c_double,
                                       arg5: MagickBooleanType,
                                       arg6: MagickBooleanType,
                                       arg7: c_double, arg8: c_double);
    pub fn DrawPathFinish(arg1: *mut DrawingWand);
    pub fn DrawPathLineToAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                                  arg3: c_double);
    pub fn DrawPathLineToRelative(arg1: *mut DrawingWand, arg2: c_double,
                                  arg3: c_double);
    pub fn DrawPathLineToHorizontalAbsolute(arg1: *mut DrawingWand,
                                            arg2: c_double);
    pub fn DrawPathLineToHorizontalRelative(arg1: *mut DrawingWand,
                                            arg2: c_double);
    pub fn DrawPathLineToVerticalAbsolute(arg1: *mut DrawingWand,
                                          arg2: c_double);
    pub fn DrawPathLineToVerticalRelative(arg1: *mut DrawingWand,
                                          arg2: c_double);
    pub fn DrawPathMoveToAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                                  arg3: c_double);
    pub fn DrawPathMoveToRelative(arg1: *mut DrawingWand, arg2: c_double,
                                  arg3: c_double);
    pub fn DrawPathStart(arg1: *mut DrawingWand);
    pub fn DrawPoint(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double);
    pub fn DrawPolygon(arg1: *mut DrawingWand, arg2: size_t,
                       arg3: *PointInfo);
    pub fn DrawPolyline(arg1: *mut DrawingWand, arg2: size_t,
                        arg3: *PointInfo);
    pub fn DrawPopClipPath(arg1: *mut DrawingWand);
    pub fn DrawPopDefs(arg1: *mut DrawingWand);
    pub fn DrawPushClipPath(arg1: *mut DrawingWand, arg2: *c_schar);
    pub fn DrawPushDefs(arg1: *mut DrawingWand);
    pub fn DrawRectangle(arg1: *mut DrawingWand, arg2: c_double,
                         arg3: c_double, arg4: c_double, arg5: c_double);
    pub fn DrawResetVectorGraphics(arg1: *mut DrawingWand);
    pub fn DrawRotate(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawRoundRectangle(arg1: *mut DrawingWand, arg2: c_double,
                              arg3: c_double, arg4: c_double, arg5: c_double,
                              arg6: c_double, arg7: c_double);
    pub fn DrawScale(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double);
    pub fn DrawSetBorderColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    pub fn DrawSetClipRule(arg1: *mut DrawingWand, arg2: FillRule);
    pub fn DrawSetClipUnits(arg1: *mut DrawingWand, arg2: ClipPathUnits);
    pub fn DrawSetFillColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    pub fn DrawSetFillOpacity(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSetFillRule(arg1: *mut DrawingWand, arg2: FillRule);
    pub fn DrawSetFontSize(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSetFontStretch(arg1: *mut DrawingWand, arg2: StretchType);
    pub fn DrawSetFontStyle(arg1: *mut DrawingWand, arg2: StyleType);
    pub fn DrawSetFontWeight(arg1: *mut DrawingWand, arg2: size_t);
    pub fn DrawSetGravity(arg1: *mut DrawingWand, arg2: GravityType);
    pub fn DrawSetOpacity(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSetStrokeAntialias(arg1: *mut DrawingWand,
                                  arg2: MagickBooleanType);
    pub fn DrawSetStrokeColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    pub fn DrawSetStrokeDashOffset(arg1: *mut DrawingWand,
                                   dashoffset: c_double);
    pub fn DrawSetStrokeLineCap(arg1: *mut DrawingWand, arg2: LineCap);
    pub fn DrawSetStrokeLineJoin(arg1: *mut DrawingWand, arg2: LineJoin);
    pub fn DrawSetStrokeMiterLimit(arg1: *mut DrawingWand, arg2: size_t);
    pub fn DrawSetStrokeOpacity(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSetStrokeWidth(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSetTextAlignment(arg1: *mut DrawingWand, arg2: AlignType);
    pub fn DrawSetTextAntialias(arg1: *mut DrawingWand,
                                arg2: MagickBooleanType);
    pub fn DrawSetTextDecoration(arg1: *mut DrawingWand,
                                 arg2: DecorationType);
    pub fn DrawSetTextEncoding(arg1: *mut DrawingWand, arg2: *c_schar);
    pub fn DrawSetTextUnderColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    pub fn DrawSetViewbox(arg1: *mut DrawingWand, arg2: ssize_t,
                          arg3: ssize_t, arg4: ssize_t, arg5: ssize_t);
    pub fn DrawSkewX(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSkewY(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawTranslate(arg1: *mut DrawingWand, arg2: c_double,
                         arg3: c_double);
    pub fn PixelGetIteratorException(arg1: *PixelIterator,
                                     arg2: *mut ExceptionType) ->
     *mut c_schar;
    pub fn PixelGetIteratorExceptionType(arg1: *PixelIterator) ->
     ExceptionType;
    pub fn IsPixelIterator(arg1: *PixelIterator) -> MagickBooleanType;
    pub fn PixelClearIteratorException(arg1: *mut PixelIterator) ->
     MagickBooleanType;
    pub fn PixelSetIteratorRow(arg1: *mut PixelIterator, arg2: ssize_t) ->
     MagickBooleanType;
    pub fn PixelSyncIterator(arg1: *mut PixelIterator) -> MagickBooleanType;
    pub fn ClonePixelIterator(arg1: *PixelIterator) -> *mut PixelIterator;
    pub fn DestroyPixelIterator(arg1: *mut PixelIterator) ->
     *mut PixelIterator;
    pub fn NewPixelIterator(arg1: *mut MagickWand) -> *mut PixelIterator;
    pub fn NewPixelRegionIterator(arg1: *mut MagickWand, arg2: ssize_t,
                                  arg3: ssize_t, arg4: size_t, arg5: size_t)
     -> *mut PixelIterator;
    pub fn PixelGetCurrentIteratorRow(arg1: *mut PixelIterator,
                                      arg2: *mut size_t) ->
     *mut *mut PixelWand;
    pub fn PixelGetNextIteratorRow(arg1: *mut PixelIterator,
                                   arg2: *mut size_t) -> *mut *mut PixelWand;
    pub fn PixelGetPreviousIteratorRow(arg1: *mut PixelIterator,
                                       arg2: *mut size_t) ->
     *mut *mut PixelWand;
    pub fn PixelGetIteratorRow(arg1: *mut PixelIterator) -> ssize_t;
    pub fn ClearPixelIterator(arg1: *mut PixelIterator);
    pub fn PixelResetIterator(arg1: *mut PixelIterator);
    pub fn PixelSetFirstIteratorRow(arg1: *mut PixelIterator);
    pub fn PixelSetLastIteratorRow(arg1: *mut PixelIterator);
    pub fn GetPixelViewException(arg1: *PixelView, arg2: *mut ExceptionType)
     -> *mut c_schar;
    pub fn DrawGetFillAlpha(arg1: *DrawingWand) -> c_double;
    pub fn DrawGetStrokeAlpha(arg1: *DrawingWand) -> c_double;
    pub fn DrawPeekGraphicWand(arg1: *DrawingWand) -> *mut DrawInfo;
    pub fn MagickDescribeImage(arg1: *mut MagickWand) -> *mut c_schar;
    pub fn MagickGetImageAttribute(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut c_schar;
    pub fn PixelIteratorGetException(arg1: *PixelIterator,
                                     arg2: *mut ExceptionType) ->
     *mut c_schar;
    pub fn MagickGetImageIndex(arg1: *mut MagickWand) -> ssize_t;
    pub fn DuplexTransferPixelViewIterator(arg1: *mut PixelView,
                                           arg2: *mut PixelView,
                                           arg3: *mut PixelView,
                                           arg4:
                                               DuplexTransferPixelViewMethod,
                                           arg5: *mut c_void) ->
     MagickBooleanType;
    pub fn GetPixelViewIterator(arg1: *mut PixelView,
                                arg2: GetPixelViewMethod, arg3: *mut c_void)
     -> MagickBooleanType;
    pub fn IsPixelView(arg1: *PixelView) -> MagickBooleanType;
    pub fn MagickClipPathImage(arg1: *mut MagickWand, arg2: *c_schar,
                               arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickColorFloodfillImage(arg1: *mut MagickWand, arg2: *PixelWand,
                                     arg3: c_double, arg4: *PixelWand,
                                     arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    pub fn MagickGetImageChannelExtrema(arg1: *mut MagickWand,
                                        arg2: ChannelType, arg3: *mut size_t,
                                        arg4: *mut size_t) ->
     MagickBooleanType;
    pub fn MagickGetImageExtrema(arg1: *mut MagickWand, arg2: *mut size_t,
                                 arg3: *mut size_t) -> MagickBooleanType;
    pub fn MagickGetImageMatte(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickGetImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                                arg3: ssize_t, arg4: size_t, arg5: size_t,
                                arg6: *c_schar, arg7: StorageType,
                                arg8: *mut c_void) -> MagickBooleanType;
    pub fn MagickMapImage(arg1: *mut MagickWand, arg2: *MagickWand,
                          arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickMatteFloodfillImage(arg1: *mut MagickWand, arg2: c_double,
                                     arg3: c_double, arg4: *PixelWand,
                                     arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    pub fn MagickMedianFilterImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickModeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickReduceNoiseImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickRemapImage(arg1: *mut MagickWand, arg2: *MagickWand,
                            arg3: DitherMethod) -> MagickBooleanType;
    pub fn MagickOpaqueImage(arg1: *mut MagickWand, arg2: *PixelWand,
                             arg3: *PixelWand, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickPaintFloodfillImage(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: *PixelWand, arg4: c_double,
                                     arg5: *PixelWand, arg6: ssize_t,
                                     arg7: ssize_t) -> MagickBooleanType;
    pub fn MagickPaintOpaqueImage(arg1: *mut MagickWand, arg2: *PixelWand,
                                  arg3: *PixelWand, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickPaintOpaqueImageChannel(arg1: *mut MagickWand,
                                         arg2: ChannelType, arg3: *PixelWand,
                                         arg4: *PixelWand, arg5: c_double) ->
     MagickBooleanType;
    pub fn MagickPaintTransparentImage(arg1: *mut MagickWand,
                                       arg2: *PixelWand, arg3: c_double,
                                       arg4: c_double) -> MagickBooleanType;
    pub fn MagickRecolorImage(arg1: *mut MagickWand, arg2: size_t,
                              arg3: *c_double) -> MagickBooleanType;
    pub fn MagickSetImageAttribute(arg1: *mut MagickWand, arg2: *c_schar,
                                   arg3: *c_schar) -> MagickBooleanType;
    pub fn MagickSetImageIndex(arg1: *mut MagickWand, arg2: ssize_t) ->
     MagickBooleanType;
    pub fn MagickSetImageOption(arg1: *mut MagickWand, arg2: *c_schar,
                                arg3: *c_schar, arg4: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                                arg3: ssize_t, arg4: size_t, arg5: size_t,
                                arg6: *c_schar, arg7: StorageType,
                                arg8: *c_void) -> MagickBooleanType;
    pub fn MagickTransparentImage(arg1: *mut MagickWand, arg2: *PixelWand,
                                  arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn SetPixelViewIterator(arg1: *mut PixelView,
                                arg2: SetPixelViewMethod, arg3: *mut c_void)
     -> MagickBooleanType;
    pub fn TransferPixelViewIterator(arg1: *mut PixelView,
                                     arg2: *mut PixelView,
                                     arg3: TransferPixelViewMethod,
                                     arg4: *mut c_void) -> MagickBooleanType;
    pub fn UpdatePixelViewIterator(arg1: *mut PixelView,
                                   arg2: UpdatePixelViewMethod,
                                   arg3: *mut c_void) -> MagickBooleanType;
    pub fn GetPixelViewWand(arg1: *PixelView) -> *mut MagickWand;
    pub fn MagickAverageImages(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickFlattenImages(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickMaximumImages(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickMinimumImages(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickMosaicImages(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickRegionOfInterestImage(arg1: *mut MagickWand, arg2: size_t,
                                       arg3: size_t, arg4: ssize_t,
                                       arg5: ssize_t) -> *mut MagickWand;
    pub fn MagickGetImageSize(arg1: *mut MagickWand) -> MagickSizeType;
    pub fn ClonePixelView(arg1: *PixelView) -> *mut PixelView;
    pub fn DestroyPixelView(arg1: *mut PixelView) -> *mut PixelView;
    pub fn NewPixelView(arg1: *mut MagickWand) -> *mut PixelView;
    pub fn NewPixelViewRegion(arg1: *mut MagickWand, arg2: ssize_t,
                              arg3: ssize_t, arg4: size_t, arg5: size_t) ->
     *mut PixelView;
    pub fn GetPixelViewPixels(arg1: *PixelView) -> *mut *mut PixelWand;
    pub fn PixelGetNextRow(arg1: *mut PixelIterator) -> *mut *mut PixelWand;
    pub fn GetPixelViewHeight(arg1: *PixelView) -> size_t;
    pub fn GetPixelViewWidth(arg1: *PixelView) -> size_t;
    pub fn GetPixelViewX(arg1: *PixelView) -> ssize_t;
    pub fn GetPixelViewY(arg1: *PixelView) -> ssize_t;
    pub fn MagickWriteImageBlob(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut c_uchar;
    pub fn DrawPopGraphicContext(arg1: *mut DrawingWand);
    pub fn DrawPushGraphicContext(arg1: *mut DrawingWand);
    pub fn DrawSetFillAlpha(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DrawSetStrokeAlpha(arg1: *mut DrawingWand, arg2: c_double);
    pub fn DisplayImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                               arg3: *mut *mut c_schar,
                               arg4: *mut *mut c_schar,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn IdentifyImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                                arg3: *mut *mut c_schar,
                                arg4: *mut *mut c_schar,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn ImportImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                              arg3: *mut *mut c_schar,
                              arg4: *mut *mut c_schar,
                              arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn MagickGetFilename(arg1: *MagickWand) -> *mut c_schar;
    pub fn MagickGetFormat(arg1: *mut MagickWand) -> *mut c_schar;
    pub fn MagickGetFont(arg1: *mut MagickWand) -> *mut c_schar;
    pub fn MagickGetHomeURL() -> *mut c_schar;
    pub fn MagickGetImageArtifact(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut c_schar;
    pub fn MagickGetImageArtifacts(arg1: *mut MagickWand, arg2: *c_schar,
                                   arg3: *mut size_t) -> *mut *mut c_schar;
    pub fn MagickGetImageProfiles(arg1: *mut MagickWand, arg2: *c_schar,
                                  arg3: *mut size_t) -> *mut *mut c_schar;
    pub fn MagickGetImageProperty(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut c_schar;
    pub fn MagickGetImageProperties(arg1: *mut MagickWand, arg2: *c_schar,
                                    arg3: *mut size_t) -> *mut *mut c_schar;
    pub fn MagickGetOption(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut c_schar;
    pub fn MagickGetOptions(arg1: *mut MagickWand, arg2: *c_schar,
                            arg3: *mut size_t) -> *mut *mut c_schar;
    pub fn MagickQueryConfigureOption(arg1: *c_schar) -> *mut c_schar;
    pub fn MagickQueryConfigureOptions(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    pub fn MagickQueryFonts(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    pub fn MagickQueryFormats(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    pub fn MagickGetColorspace(arg1: *mut MagickWand) -> ColorspaceType;
    pub fn MagickGetCompression(arg1: *mut MagickWand) -> CompressionType;
    pub fn MagickGetCopyright() -> *c_schar;
    pub fn MagickGetPackageName() -> *c_schar;
    pub fn MagickGetQuantumDepth(arg1: *mut size_t) -> *c_schar;
    pub fn MagickGetQuantumRange(arg1: *mut size_t) -> *c_schar;
    pub fn MagickGetReleaseDate() -> *c_schar;
    pub fn MagickGetVersion(arg1: *mut size_t) -> *c_schar;
    pub fn MagickGetPointsize(arg1: *mut MagickWand) -> c_double;
    pub fn MagickGetSamplingFactors(arg1: *mut MagickWand, arg2: *mut size_t)
     -> *mut c_double;
    pub fn MagickQueryFontMetrics(arg1: *mut MagickWand, arg2: *DrawingWand,
                                  arg3: *c_schar) -> *mut c_double;
    pub fn MagickQueryMultilineFontMetrics(arg1: *mut MagickWand,
                                           arg2: *DrawingWand, arg3: *c_schar)
     -> *mut c_double;
    pub fn MagickGetGravity(arg1: *mut MagickWand) -> GravityType;
    pub fn MagickGetType(arg1: *mut MagickWand) -> ImageType;
    pub fn MagickGetInterlaceScheme(arg1: *mut MagickWand) -> InterlaceType;
    pub fn MagickGetInterpolateMethod(arg1: *mut MagickWand) ->
     InterpolatePixelMethod;
    pub fn MagickGetOrientation(arg1: *mut MagickWand) -> OrientationType;
    pub fn MagickDeleteImageArtifact(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickDeleteImageProperty(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickDeleteOption(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickGetAntialias(arg1: *MagickWand) -> MagickBooleanType;
    pub fn MagickGetPage(arg1: *MagickWand, arg2: *mut size_t,
                         arg3: *mut size_t, arg4: *mut ssize_t,
                         arg5: *mut ssize_t) -> MagickBooleanType;
    pub fn MagickGetResolution(arg1: *MagickWand, arg2: *mut c_double,
                               arg3: *mut c_double) -> MagickBooleanType;
    pub fn MagickGetSize(arg1: *MagickWand, arg2: *mut size_t,
                         arg3: *mut size_t) -> MagickBooleanType;
    pub fn MagickGetSizeOffset(arg1: *MagickWand, arg2: *mut ssize_t) ->
     MagickBooleanType;
    pub fn MagickProfileImage(arg1: *mut MagickWand, arg2: *c_schar,
                              arg3: *c_void, arg4: size_t) ->
     MagickBooleanType;
    pub fn MagickSetAntialias(arg1: *mut MagickWand, arg2: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MagickSetBackgroundColor(arg1: *mut MagickWand, arg2: *PixelWand)
     -> MagickBooleanType;
    pub fn MagickSetColorspace(arg1: *mut MagickWand, arg2: ColorspaceType) ->
     MagickBooleanType;
    pub fn MagickSetCompression(arg1: *mut MagickWand, arg2: CompressionType)
     -> MagickBooleanType;
    pub fn MagickSetCompressionQuality(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    pub fn MagickSetDepth(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    pub fn MagickSetExtract(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetFilename(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetFormat(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetFont(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetGravity(arg1: *mut MagickWand, arg2: GravityType) ->
     MagickBooleanType;
    pub fn MagickSetImageArtifact(arg1: *mut MagickWand, arg2: *c_schar,
                                  arg3: *c_schar) -> MagickBooleanType;
    pub fn MagickSetImageProfile(arg1: *mut MagickWand, arg2: *c_schar,
                                 arg3: *c_void, arg4: size_t) ->
     MagickBooleanType;
    pub fn MagickSetImageProperty(arg1: *mut MagickWand, arg2: *c_schar,
                                  arg3: *c_schar) -> MagickBooleanType;
    pub fn MagickSetInterlaceScheme(arg1: *mut MagickWand,
                                    arg2: InterlaceType) -> MagickBooleanType;
    pub fn MagickSetInterpolateMethod(arg1: *mut MagickWand,
                                      arg2: InterpolatePixelMethod) ->
     MagickBooleanType;
    pub fn MagickSetOption(arg1: *mut MagickWand, arg2: *c_schar,
                           arg3: *c_schar) -> MagickBooleanType;
    pub fn MagickSetOrientation(arg1: *mut MagickWand, arg2: OrientationType)
     -> MagickBooleanType;
    pub fn MagickSetPage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                         arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    pub fn MagickSetPassphrase(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetPointsize(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickSetResolution(arg1: *mut MagickWand, arg2: c_double,
                               arg3: c_double) -> MagickBooleanType;
    pub fn MagickSetResourceLimit(_type: ResourceType, limit: MagickSizeType)
     -> MagickBooleanType;
    pub fn MagickSetSamplingFactors(arg1: *mut MagickWand, arg2: size_t,
                                    arg3: *c_double) -> MagickBooleanType;
    pub fn MagickSetSize(arg1: *mut MagickWand, arg2: size_t, arg3: size_t) ->
     MagickBooleanType;
    pub fn MagickSetSizeOffset(arg1: *mut MagickWand, arg2: size_t,
                               arg3: size_t, arg4: ssize_t) ->
     MagickBooleanType;
    pub fn MagickSetType(arg1: *mut MagickWand, arg2: ImageType) ->
     MagickBooleanType;
    pub fn MagickSetProgressMonitor(arg1: *mut MagickWand,
                                    arg2: MagickProgressMonitor,
                                    arg3: *mut c_void) ->
     MagickProgressMonitor;
    pub fn MagickGetResource(arg1: ResourceType) -> MagickSizeType;
    pub fn MagickGetResourceLimit(arg1: ResourceType) -> MagickSizeType;
    pub fn MagickGetBackgroundColor(arg1: *mut MagickWand) -> *mut PixelWand;
    pub fn MagickGetOrientationType(arg1: *mut MagickWand) -> OrientationType;
    pub fn MagickGetCompressionQuality(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageProfile(arg1: *mut MagickWand, arg2: *c_schar,
                                 arg3: *mut size_t) -> *mut c_uchar;
    pub fn MagickRemoveImageProfile(arg1: *mut MagickWand, arg2: *c_schar,
                                    arg3: *mut size_t) -> *mut c_uchar;
    pub fn MagickGetImageChannelFeatures(arg1: *mut MagickWand, arg2: size_t)
     -> *mut ChannelFeatures;
    pub fn MagickGetImageChannelStatistics(arg1: *mut MagickWand) ->
     *mut ChannelStatistics;
    pub fn MagickGetImageFilename(arg1: *mut MagickWand) -> *mut c_schar;
    pub fn MagickGetImageFormat(arg1: *mut MagickWand) -> *mut c_schar;
    pub fn MagickGetImageSignature(arg1: *mut MagickWand) -> *mut c_schar;
    pub fn MagickIdentifyImage(arg1: *mut MagickWand) -> *mut c_schar;
    pub fn MagickGetImageColorspace(arg1: *mut MagickWand) -> ColorspaceType;
    pub fn MagickGetImageCompose(arg1: *mut MagickWand) -> CompositeOperator;
    pub fn MagickGetImageCompression(arg1: *mut MagickWand) ->
     CompressionType;
    pub fn MagickGetImageDispose(arg1: *mut MagickWand) -> DisposeType;
    pub fn MagickGetImageChannelDistortions(arg1: *mut MagickWand,
                                            arg2: *MagickWand,
                                            arg3: MetricType) ->
     *mut c_double;
    pub fn MagickGetImageFuzz(arg1: *mut MagickWand) -> c_double;
    pub fn MagickGetImageGamma(arg1: *mut MagickWand) -> c_double;
    pub fn MagickGetImageTotalInkDensity(arg1: *mut MagickWand) -> c_double;
    pub fn MagickGetImageEndian(arg1: *mut MagickWand) -> EndianType;
    pub fn MagickGetImageGravity(arg1: *mut MagickWand) -> GravityType;
    pub fn MagickDestroyImage(arg1: *mut Image) -> *mut Image;
    pub fn GetImageFromMagickWand(arg1: *MagickWand) -> *mut Image;
    pub fn MagickGetImageType(arg1: *mut MagickWand) -> ImageType;
    pub fn MagickGetImageInterlaceScheme(arg1: *mut MagickWand) ->
     InterlaceType;
    pub fn MagickGetImageInterpolateMethod(arg1: *mut MagickWand) ->
     InterpolatePixelMethod;
    pub fn MagickAdaptiveBlurImage(arg1: *mut MagickWand, arg2: c_double,
                                   arg3: c_double) -> MagickBooleanType;
    pub fn MagickAdaptiveBlurImageChannel(arg1: *mut MagickWand,
                                          arg2: ChannelType, arg3: c_double,
                                          arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickAdaptiveResizeImage(arg1: *mut MagickWand, arg2: size_t,
                                     arg3: size_t) -> MagickBooleanType;
    pub fn MagickAdaptiveSharpenImage(arg1: *mut MagickWand, arg2: c_double,
                                      arg3: c_double) -> MagickBooleanType;
    pub fn MagickAdaptiveSharpenImageChannel(arg1: *mut MagickWand,
                                             arg2: ChannelType,
                                             arg3: c_double, arg4: c_double)
     -> MagickBooleanType;
    pub fn MagickAdaptiveThresholdImage(arg1: *mut MagickWand, arg2: size_t,
                                        arg3: size_t, arg4: ssize_t) ->
     MagickBooleanType;
    pub fn MagickAddImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    pub fn MagickAddNoiseImage(arg1: *mut MagickWand, arg2: NoiseType) ->
     MagickBooleanType;
    pub fn MagickAddNoiseImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: NoiseType) ->
     MagickBooleanType;
    pub fn MagickAffineTransformImage(arg1: *mut MagickWand,
                                      arg2: *DrawingWand) ->
     MagickBooleanType;
    pub fn MagickAnnotateImage(arg1: *mut MagickWand, arg2: *DrawingWand,
                               arg3: c_double, arg4: c_double, arg5: c_double,
                               arg6: *c_schar) -> MagickBooleanType;
    pub fn MagickAnimateImages(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickAutoGammaImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickAutoGammaImageChannel(arg1: *mut MagickWand,
                                       arg2: ChannelType) ->
     MagickBooleanType;
    pub fn MagickAutoLevelImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickAutoLevelImageChannel(arg1: *mut MagickWand,
                                       arg2: ChannelType) ->
     MagickBooleanType;
    pub fn MagickBlackThresholdImage(arg1: *mut MagickWand, arg2: *PixelWand)
     -> MagickBooleanType;
    pub fn MagickBlueShiftImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickBlurImage(arg1: *mut MagickWand, arg2: c_double,
                           arg3: c_double) -> MagickBooleanType;
    pub fn MagickBlurImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickBorderImage(arg1: *mut MagickWand, arg2: *PixelWand,
                             arg3: size_t, arg4: size_t) -> MagickBooleanType;
    pub fn MagickBrightnessContrastImage(arg1: *mut MagickWand,
                                         arg2: c_double, arg3: c_double) ->
     MagickBooleanType;
    pub fn MagickBrightnessContrastImageChannel(arg1: *mut MagickWand,
                                                arg2: ChannelType,
                                                arg3: c_double,
                                                arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickCharcoalImage(arg1: *mut MagickWand, arg2: c_double,
                               arg3: c_double) -> MagickBooleanType;
    pub fn MagickChopImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                           arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    pub fn MagickClampImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickClampImageChannel(arg1: *mut MagickWand, arg2: ChannelType)
     -> MagickBooleanType;
    pub fn MagickClipImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickClipImagePath(arg1: *mut MagickWand, arg2: *c_schar,
                               arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickClutImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    pub fn MagickClutImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: *MagickWand) -> MagickBooleanType;
    pub fn MagickColorDecisionListImage(arg1: *mut MagickWand, arg2: *c_schar)
     -> MagickBooleanType;
    pub fn MagickColorizeImage(arg1: *mut MagickWand, arg2: *PixelWand,
                               arg3: *PixelWand) -> MagickBooleanType;
    pub fn MagickColorMatrixImage(arg1: *mut MagickWand, arg2: *KernelInfo) ->
     MagickBooleanType;
    pub fn MagickCommentImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickCompositeImage(arg1: *mut MagickWand, arg2: *MagickWand,
                                arg3: CompositeOperator, arg4: ssize_t,
                                arg5: ssize_t) -> MagickBooleanType;
    pub fn MagickCompositeLayers(arg1: *mut MagickWand, arg2: *MagickWand,
                                 arg3: CompositeOperator, arg4: ssize_t,
                                 arg5: ssize_t) -> MagickBooleanType;
    pub fn MagickCompositeImageChannel(arg1: *mut MagickWand,
                                       arg2: ChannelType, arg3: *MagickWand,
                                       arg4: CompositeOperator, arg5: ssize_t,
                                       arg6: ssize_t) -> MagickBooleanType;
    pub fn MagickConstituteImage(arg1: *mut MagickWand, arg2: size_t,
                                 arg3: size_t, arg4: *c_schar,
                                 arg5: StorageType, arg6: *c_void) ->
     MagickBooleanType;
    pub fn MagickContrastImage(arg1: *mut MagickWand, arg2: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MagickContrastStretchImage(arg1: *mut MagickWand, arg2: c_double,
                                      arg3: c_double) -> MagickBooleanType;
    pub fn MagickContrastStretchImageChannel(arg1: *mut MagickWand,
                                             arg2: ChannelType,
                                             arg3: c_double, arg4: c_double)
     -> MagickBooleanType;
    pub fn MagickConvolveImage(arg1: *mut MagickWand, arg2: size_t,
                               arg3: *c_double) -> MagickBooleanType;
    pub fn MagickConvolveImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: size_t,
                                      arg4: *c_double) -> MagickBooleanType;
    pub fn MagickCropImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                           arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    pub fn MagickCycleColormapImage(arg1: *mut MagickWand, arg2: ssize_t) ->
     MagickBooleanType;
    pub fn MagickDecipherImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickDeskewImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickDespeckleImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickDisplayImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickDisplayImages(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickDistortImage(arg1: *mut MagickWand, arg2: DistortImageMethod,
                              arg3: size_t, arg4: *c_double,
                              arg5: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickDrawImage(arg1: *mut MagickWand, arg2: *DrawingWand) ->
     MagickBooleanType;
    pub fn MagickEdgeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickEmbossImage(arg1: *mut MagickWand, arg2: c_double,
                             arg3: c_double) -> MagickBooleanType;
    pub fn MagickEncipherImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickEnhanceImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickEqualizeImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickEqualizeImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType) -> MagickBooleanType;
    pub fn MagickEvaluateImage(arg1: *mut MagickWand,
                               arg2: MagickEvaluateOperator, arg3: c_double)
     -> MagickBooleanType;
    pub fn MagickEvaluateImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType,
                                      arg3: MagickEvaluateOperator,
                                      arg4: c_double) -> MagickBooleanType;
    pub fn MagickExportImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                                   arg3: ssize_t, arg4: size_t, arg5: size_t,
                                   arg6: *c_schar, arg7: StorageType,
                                   arg8: *mut c_void) -> MagickBooleanType;
    pub fn MagickExtentImage(arg1: *mut MagickWand, arg2: size_t,
                             arg3: size_t, arg4: ssize_t, arg5: ssize_t) ->
     MagickBooleanType;
    pub fn MagickFilterImage(arg1: *mut MagickWand, arg2: *KernelInfo) ->
     MagickBooleanType;
    pub fn MagickFilterImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                    arg3: *KernelInfo) -> MagickBooleanType;
    pub fn MagickFlipImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickFloodfillPaintImage(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: *PixelWand, arg4: c_double,
                                     arg5: *PixelWand, arg6: ssize_t,
                                     arg7: ssize_t, arg8: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MagickFlopImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickForwardFourierTransformImage(arg1: *mut MagickWand,
                                              arg2: MagickBooleanType) ->
     MagickBooleanType;
    pub fn MagickFrameImage(arg1: *mut MagickWand, arg2: *PixelWand,
                            arg3: size_t, arg4: size_t, arg5: ssize_t,
                            arg6: ssize_t) -> MagickBooleanType;
    pub fn MagickFunctionImage(arg1: *mut MagickWand, arg2: MagickFunction,
                               arg3: size_t, arg4: *c_double) ->
     MagickBooleanType;
    pub fn MagickFunctionImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: MagickFunction,
                                      arg4: size_t, arg5: *c_double) ->
     MagickBooleanType;
    pub fn MagickGammaImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickGammaImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                   arg3: c_double) -> MagickBooleanType;
    pub fn MagickGaussianBlurImage(arg1: *mut MagickWand, arg2: c_double,
                                   arg3: c_double) -> MagickBooleanType;
    pub fn MagickGaussianBlurImageChannel(arg1: *mut MagickWand,
                                          arg2: ChannelType, arg3: c_double,
                                          arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickGetImageAlphaChannel(arg1: *mut MagickWand) ->
     MagickBooleanType;
    pub fn MagickGetImageBackgroundColor(arg1: *mut MagickWand,
                                         arg2: *mut PixelWand) ->
     MagickBooleanType;
    pub fn MagickGetImageBluePrimary(arg1: *mut MagickWand,
                                     arg2: *mut c_double, arg3: *mut c_double)
     -> MagickBooleanType;
    pub fn MagickGetImageBorderColor(arg1: *mut MagickWand,
                                     arg2: *mut PixelWand) ->
     MagickBooleanType;
    pub fn MagickGetImageChannelDistortion(arg1: *mut MagickWand,
                                           arg2: *MagickWand,
                                           arg3: ChannelType,
                                           arg4: MetricType,
                                           arg5: *mut c_double) ->
     MagickBooleanType;
    pub fn MagickGetImageChannelKurtosis(arg1: *mut MagickWand,
                                         arg2: ChannelType,
                                         arg3: *mut c_double,
                                         arg4: *mut c_double) ->
     MagickBooleanType;
    pub fn MagickGetImageChannelMean(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: *mut c_double, arg4: *mut c_double)
     -> MagickBooleanType;
    pub fn MagickGetImageChannelRange(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: *mut c_double,
                                      arg4: *mut c_double) ->
     MagickBooleanType;
    pub fn MagickGetImageColormapColor(arg1: *mut MagickWand, arg2: size_t,
                                       arg3: *mut PixelWand) ->
     MagickBooleanType;
    pub fn MagickGetImageDistortion(arg1: *mut MagickWand, arg2: *MagickWand,
                                    arg3: MetricType, arg4: *mut c_double) ->
     MagickBooleanType;
    pub fn MagickGetImageGreenPrimary(arg1: *mut MagickWand,
                                      arg2: *mut c_double,
                                      arg3: *mut c_double) ->
     MagickBooleanType;
    pub fn MagickGetImageMatteColor(arg1: *mut MagickWand,
                                    arg2: *mut PixelWand) ->
     MagickBooleanType;
    pub fn MagickGetImageLength(arg1: *mut MagickWand,
                                arg2: *mut MagickSizeType) ->
     MagickBooleanType;
    pub fn MagickGetImagePage(arg1: *mut MagickWand, arg2: *mut size_t,
                              arg3: *mut size_t, arg4: *mut ssize_t,
                              arg5: *mut ssize_t) -> MagickBooleanType;
    pub fn MagickGetImagePixelColor(arg1: *mut MagickWand, arg2: ssize_t,
                                    arg3: ssize_t, arg4: *mut PixelWand) ->
     MagickBooleanType;
    pub fn MagickGetImageRange(arg1: *mut MagickWand, arg2: *mut c_double,
                               arg3: *mut c_double) -> MagickBooleanType;
    pub fn MagickGetImageRedPrimary(arg1: *mut MagickWand,
                                    arg2: *mut c_double, arg3: *mut c_double)
     -> MagickBooleanType;
    pub fn MagickGetImageResolution(arg1: *mut MagickWand,
                                    arg2: *mut c_double, arg3: *mut c_double)
     -> MagickBooleanType;
    pub fn MagickGetImageWhitePoint(arg1: *mut MagickWand,
                                    arg2: *mut c_double, arg3: *mut c_double)
     -> MagickBooleanType;
    pub fn MagickHaldClutImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    pub fn MagickHaldClutImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: *MagickWand) ->
     MagickBooleanType;
    pub fn MagickHasNextImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickHasPreviousImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickImplodeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickImportImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                                   arg3: ssize_t, arg4: size_t, arg5: size_t,
                                   arg6: *c_schar, arg7: StorageType,
                                   arg8: *c_void) -> MagickBooleanType;
    pub fn MagickInverseFourierTransformImage(arg1: *mut MagickWand,
                                              arg2: *mut MagickWand,
                                              arg3: MagickBooleanType) ->
     MagickBooleanType;
    pub fn MagickLabelImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickLevelImage(arg1: *mut MagickWand, arg2: c_double,
                            arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickLevelImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                   arg3: c_double, arg4: c_double,
                                   arg5: c_double) -> MagickBooleanType;
    pub fn MagickLinearStretchImage(arg1: *mut MagickWand, arg2: c_double,
                                    arg3: c_double) -> MagickBooleanType;
    pub fn MagickLiquidRescaleImage(arg1: *mut MagickWand, arg2: size_t,
                                    arg3: size_t, arg4: c_double,
                                    arg5: c_double) -> MagickBooleanType;
    pub fn MagickMagnifyImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickMinifyImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickModulateImage(arg1: *mut MagickWand, arg2: c_double,
                               arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickMorphologyImage(arg1: *mut MagickWand,
                                 arg2: MorphologyMethod, arg3: ssize_t,
                                 arg4: *mut KernelInfo) -> MagickBooleanType;
    pub fn MagickMorphologyImageChannel(arg1: *mut MagickWand,
                                        arg2: ChannelType,
                                        arg3: MorphologyMethod, arg4: ssize_t,
                                        arg5: *mut KernelInfo) ->
     MagickBooleanType;
    pub fn MagickMotionBlurImage(arg1: *mut MagickWand, arg2: c_double,
                                 arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickMotionBlurImageChannel(arg1: *mut MagickWand,
                                        arg2: ChannelType, arg3: c_double,
                                        arg4: c_double, arg5: c_double) ->
     MagickBooleanType;
    pub fn MagickNegateImage(arg1: *mut MagickWand, arg2: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MagickNegateImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                    arg3: MagickBooleanType) ->
     MagickBooleanType;
    pub fn MagickNewImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                          arg4: *PixelWand) -> MagickBooleanType;
    pub fn MagickNextImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickNormalizeImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickNormalizeImageChannel(arg1: *mut MagickWand,
                                       arg2: ChannelType) ->
     MagickBooleanType;
    pub fn MagickOilPaintImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickOpaquePaintImage(arg1: *mut MagickWand, arg2: *PixelWand,
                                  arg3: *PixelWand, arg4: c_double,
                                  arg5: MagickBooleanType) ->
     MagickBooleanType;
    pub fn MagickOpaquePaintImageChannel(arg1: *mut MagickWand,
                                         arg2: ChannelType, arg3: *PixelWand,
                                         arg4: *PixelWand, arg5: c_double,
                                         arg6: MagickBooleanType) ->
     MagickBooleanType;
    pub fn MagickOrderedPosterizeImage(arg1: *mut MagickWand, arg2: *c_schar)
     -> MagickBooleanType;
    pub fn MagickOrderedPosterizeImageChannel(arg1: *mut MagickWand,
                                              arg2: ChannelType,
                                              arg3: *c_schar) ->
     MagickBooleanType;
    pub fn MagickOptimizeImageTransparency(arg1: *mut MagickWand) ->
     MagickBooleanType;
    pub fn MagickTransparentPaintImage(arg1: *mut MagickWand,
                                       arg2: *PixelWand, arg3: c_double,
                                       arg4: c_double,
                                       invert: MagickBooleanType) ->
     MagickBooleanType;
    pub fn MagickPingImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickPingImageBlob(arg1: *mut MagickWand, arg2: *c_void,
                               arg3: size_t) -> MagickBooleanType;
    pub fn MagickPingImageFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    pub fn MagickPolaroidImage(arg1: *mut MagickWand, arg2: *DrawingWand,
                               arg3: c_double) -> MagickBooleanType;
    pub fn MagickPosterizeImage(arg1: *mut MagickWand, arg2: size_t,
                                arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickPreviousImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickQuantizeImage(arg1: *mut MagickWand, arg2: size_t,
                               arg3: ColorspaceType, arg4: size_t,
                               arg5: MagickBooleanType,
                               arg6: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickQuantizeImages(arg1: *mut MagickWand, arg2: size_t,
                                arg3: ColorspaceType, arg4: size_t,
                                arg5: MagickBooleanType,
                                arg6: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickRadialBlurImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickRadialBlurImageChannel(arg1: *mut MagickWand,
                                        arg2: ChannelType, arg3: c_double) ->
     MagickBooleanType;
    pub fn MagickRaiseImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                            arg4: ssize_t, arg5: ssize_t,
                            arg6: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickRandomThresholdImage(arg1: *mut MagickWand, arg2: c_double,
                                      arg3: c_double) -> MagickBooleanType;
    pub fn MagickRandomThresholdImageChannel(arg1: *mut MagickWand,
                                             arg2: ChannelType,
                                             arg3: c_double, arg4: c_double)
     -> MagickBooleanType;
    pub fn MagickReadImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickReadImageBlob(arg1: *mut MagickWand, arg2: *c_void,
                               arg3: size_t) -> MagickBooleanType;
    pub fn MagickReadImageFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    pub fn MagickRemoveImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickResampleImage(arg1: *mut MagickWand, arg2: c_double,
                               arg3: c_double, arg4: FilterTypes,
                               arg5: c_double) -> MagickBooleanType;
    pub fn MagickResetImagePage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickResizeImage(arg1: *mut MagickWand, arg2: size_t,
                             arg3: size_t, arg4: FilterTypes, arg5: c_double)
     -> MagickBooleanType;
    pub fn MagickRollImage(arg1: *mut MagickWand, arg2: ssize_t,
                           arg3: ssize_t) -> MagickBooleanType;
    pub fn MagickRotateImage(arg1: *mut MagickWand, arg2: *PixelWand,
                             arg3: c_double) -> MagickBooleanType;
    pub fn MagickSampleImage(arg1: *mut MagickWand, arg2: size_t,
                             arg3: size_t) -> MagickBooleanType;
    pub fn MagickScaleImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t)
     -> MagickBooleanType;
    pub fn MagickSegmentImage(arg1: *mut MagickWand, arg2: ColorspaceType,
                              arg3: MagickBooleanType, arg4: c_double,
                              arg5: c_double) -> MagickBooleanType;
    pub fn MagickSelectiveBlurImage(arg1: *mut MagickWand, arg2: c_double,
                                    arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickSelectiveBlurImageChannel(arg1: *mut MagickWand,
                                           arg2: ChannelType, arg3: c_double,
                                           arg4: c_double, arg5: c_double) ->
     MagickBooleanType;
    pub fn MagickSeparateImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType) -> MagickBooleanType;
    pub fn MagickSepiaToneImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickSetImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    pub fn MagickSetImageAlphaChannel(arg1: *mut MagickWand,
                                      arg2: AlphaChannelType) ->
     MagickBooleanType;
    pub fn MagickSetImageBackgroundColor(arg1: *mut MagickWand,
                                         arg2: *PixelWand) ->
     MagickBooleanType;
    pub fn MagickSetImageBias(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickSetImageBluePrimary(arg1: *mut MagickWand, arg2: c_double,
                                     arg3: c_double) -> MagickBooleanType;
    pub fn MagickSetImageBorderColor(arg1: *mut MagickWand, arg2: *PixelWand)
     -> MagickBooleanType;
    pub fn MagickSetImageChannelDepth(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: size_t) ->
     MagickBooleanType;
    pub fn MagickSetImageClipMask(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    pub fn MagickSetImageColor(arg1: *mut MagickWand, arg2: *PixelWand) ->
     MagickBooleanType;
    pub fn MagickSetImageColormapColor(arg1: *mut MagickWand, arg2: size_t,
                                       arg3: *PixelWand) -> MagickBooleanType;
    pub fn MagickSetImageColorspace(arg1: *mut MagickWand,
                                    arg2: ColorspaceType) ->
     MagickBooleanType;
    pub fn MagickSetImageCompose(arg1: *mut MagickWand,
                                 arg2: CompositeOperator) ->
     MagickBooleanType;
    pub fn MagickSetImageCompression(arg1: *mut MagickWand,
                                     arg2: CompressionType) ->
     MagickBooleanType;
    pub fn MagickSetImageDelay(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    pub fn MagickSetImageDepth(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    pub fn MagickSetImageDispose(arg1: *mut MagickWand, arg2: DisposeType) ->
     MagickBooleanType;
    pub fn MagickSetImageCompressionQuality(arg1: *mut MagickWand,
                                            arg2: size_t) ->
     MagickBooleanType;
    pub fn MagickSetImageEndian(arg1: *mut MagickWand, arg2: EndianType) ->
     MagickBooleanType;
    pub fn MagickSetImageExtent(arg1: *mut MagickWand, arg2: size_t,
                                arg3: size_t) -> MagickBooleanType;
    pub fn MagickSetImageFilename(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetImageFormat(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickSetImageFuzz(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickSetImageGamma(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickSetImageGravity(arg1: *mut MagickWand, arg2: GravityType) ->
     MagickBooleanType;
    pub fn MagickSetImageGreenPrimary(arg1: *mut MagickWand, arg2: c_double,
                                      arg3: c_double) -> MagickBooleanType;
    pub fn MagickSetImageInterlaceScheme(arg1: *mut MagickWand,
                                         arg2: InterlaceType) ->
     MagickBooleanType;
    pub fn MagickSetImageInterpolateMethod(arg1: *mut MagickWand,
                                           arg2: InterpolatePixelMethod) ->
     MagickBooleanType;
    pub fn MagickSetImageIterations(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    pub fn MagickSetImageMatte(arg1: *mut MagickWand, arg2: MagickBooleanType)
     -> MagickBooleanType;
    pub fn MagickSetImageMatteColor(arg1: *mut MagickWand, arg2: *PixelWand)
     -> MagickBooleanType;
    pub fn MagickSetImageOpacity(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickSetImageOrientation(arg1: *mut MagickWand,
                                     arg2: OrientationType) ->
     MagickBooleanType;
    pub fn MagickSetImagePage(arg1: *mut MagickWand, arg2: size_t,
                              arg3: size_t, arg4: ssize_t, arg5: ssize_t) ->
     MagickBooleanType;
    pub fn MagickSetImageRedPrimary(arg1: *mut MagickWand, arg2: c_double,
                                    arg3: c_double) -> MagickBooleanType;
    pub fn MagickSetImageRenderingIntent(arg1: *mut MagickWand,
                                         arg2: RenderingIntent) ->
     MagickBooleanType;
    pub fn MagickSetImageResolution(arg1: *mut MagickWand, arg2: c_double,
                                    arg3: c_double) -> MagickBooleanType;
    pub fn MagickSetImageScene(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    pub fn MagickSetImageTicksPerSecond(arg1: *mut MagickWand, arg2: ssize_t)
     -> MagickBooleanType;
    pub fn MagickSetImageType(arg1: *mut MagickWand, arg2: ImageType) ->
     MagickBooleanType;
    pub fn MagickSetImageUnits(arg1: *mut MagickWand, arg2: ResolutionType) ->
     MagickBooleanType;
    pub fn MagickSetImageWhitePoint(arg1: *mut MagickWand, arg2: c_double,
                                    arg3: c_double) -> MagickBooleanType;
    pub fn MagickShadeImage(arg1: *mut MagickWand, arg2: MagickBooleanType,
                            arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickShadowImage(arg1: *mut MagickWand, arg2: c_double,
                             arg3: c_double, arg4: ssize_t, arg5: ssize_t) ->
     MagickBooleanType;
    pub fn MagickSharpenImage(arg1: *mut MagickWand, arg2: c_double,
                              arg3: c_double) -> MagickBooleanType;
    pub fn MagickSharpenImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickShaveImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t)
     -> MagickBooleanType;
    pub fn MagickShearImage(arg1: *mut MagickWand, arg2: *PixelWand,
                            arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickSigmoidalContrastImage(arg1: *mut MagickWand,
                                        arg2: MagickBooleanType,
                                        arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickSigmoidalContrastImageChannel(arg1: *mut MagickWand,
                                               arg2: ChannelType,
                                               arg3: MagickBooleanType,
                                               arg4: c_double, arg5: c_double)
     -> MagickBooleanType;
    pub fn MagickSketchImage(arg1: *mut MagickWand, arg2: c_double,
                             arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    pub fn MagickSolarizeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickSolarizeImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: c_double) ->
     MagickBooleanType;
    pub fn MagickSparseColorImage(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: SparseColorMethod, arg4: size_t,
                                  arg5: *c_double) -> MagickBooleanType;
    pub fn MagickSpliceImage(arg1: *mut MagickWand, arg2: size_t,
                             arg3: size_t, arg4: ssize_t, arg5: ssize_t) ->
     MagickBooleanType;
    pub fn MagickSpreadImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickStatisticImage(arg1: *mut MagickWand, arg2: StatisticType,
                                arg3: size_t, arg4: size_t) ->
     MagickBooleanType;
    pub fn MagickStatisticImageChannel(arg1: *mut MagickWand,
                                       arg2: ChannelType, arg3: StatisticType,
                                       arg4: size_t, arg5: size_t) ->
     MagickBooleanType;
    pub fn MagickStripImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickSwirlImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickTintImage(arg1: *mut MagickWand, arg2: *PixelWand,
                           arg3: *PixelWand) -> MagickBooleanType;
    pub fn MagickTransformImageColorspace(arg1: *mut MagickWand,
                                          arg2: ColorspaceType) ->
     MagickBooleanType;
    pub fn MagickTransposeImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickTransverseImage(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickThresholdImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickThresholdImageChannel(arg1: *mut MagickWand,
                                       arg2: ChannelType, arg3: c_double) ->
     MagickBooleanType;
    pub fn MagickThumbnailImage(arg1: *mut MagickWand, arg2: size_t,
                                arg3: size_t) -> MagickBooleanType;
    pub fn MagickTrimImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    pub fn MagickUniqueImageColors(arg1: *mut MagickWand) ->
     MagickBooleanType;
    pub fn MagickUnsharpMaskImage(arg1: *mut MagickWand, arg2: c_double,
                                  arg3: c_double, arg4: c_double,
                                  arg5: c_double) -> MagickBooleanType;
    pub fn MagickUnsharpMaskImageChannel(arg1: *mut MagickWand,
                                         arg2: ChannelType, arg3: c_double,
                                         arg4: c_double, arg5: c_double,
                                         arg6: c_double) -> MagickBooleanType;
    pub fn MagickVignetteImage(arg1: *mut MagickWand, arg2: c_double,
                               arg3: c_double, arg4: ssize_t, arg5: ssize_t)
     -> MagickBooleanType;
    pub fn MagickWaveImage(arg1: *mut MagickWand, arg2: c_double,
                           arg3: c_double) -> MagickBooleanType;
    pub fn MagickWhiteThresholdImage(arg1: *mut MagickWand, arg2: *PixelWand)
     -> MagickBooleanType;
    pub fn MagickWriteImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    pub fn MagickWriteImageFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    pub fn MagickWriteImages(arg1: *mut MagickWand, arg2: *c_schar,
                             arg3: MagickBooleanType) -> MagickBooleanType;
    pub fn MagickWriteImagesFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    pub fn MagickSetImageProgressMonitor(arg1: *mut MagickWand,
                                         arg2: MagickProgressMonitor,
                                         arg3: *mut c_void) ->
     MagickProgressMonitor;
    pub fn MagickAppendImages(arg1: *mut MagickWand, arg2: MagickBooleanType)
     -> *mut MagickWand;
    pub fn MagickCoalesceImages(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickCombineImages(arg1: *mut MagickWand, arg2: ChannelType) ->
     *mut MagickWand;
    pub fn MagickCompareImageChannels(arg1: *mut MagickWand,
                                      arg2: *MagickWand, arg3: ChannelType,
                                      arg4: MetricType, arg5: *mut c_double)
     -> *mut MagickWand;
    pub fn MagickCompareImages(arg1: *mut MagickWand, arg2: *MagickWand,
                               arg3: MetricType, arg4: *mut c_double) ->
     *mut MagickWand;
    pub fn MagickCompareImageLayers(arg1: *mut MagickWand,
                                    arg2: ImageLayerMethod) ->
     *mut MagickWand;
    pub fn MagickDeconstructImages(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickEvaluateImages(arg1: *mut MagickWand,
                                arg2: MagickEvaluateOperator) ->
     *mut MagickWand;
    pub fn MagickFxImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut MagickWand;
    pub fn MagickFxImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                arg3: *c_schar) -> *mut MagickWand;
    pub fn MagickGetImage(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickGetImageClipMask(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn MagickGetImageRegion(arg1: *mut MagickWand, arg2: size_t,
                                arg3: size_t, arg4: ssize_t, arg5: ssize_t) ->
     *mut MagickWand;
    pub fn MagickMergeImageLayers(arg1: *mut MagickWand,
                                  arg2: ImageLayerMethod) -> *mut MagickWand;
    pub fn MagickMorphImages(arg1: *mut MagickWand, arg2: size_t) ->
     *mut MagickWand;
    pub fn MagickMontageImage(arg1: *mut MagickWand, arg2: *DrawingWand,
                              arg3: *c_schar, arg4: *c_schar,
                              arg5: MontageMode, arg6: *c_schar) ->
     *mut MagickWand;
    pub fn MagickOptimizeImageLayers(arg1: *mut MagickWand) ->
     *mut MagickWand;
    pub fn MagickPreviewImages(wand: *mut MagickWand, arg1: PreviewType) ->
     *mut MagickWand;
    pub fn MagickSimilarityImage(arg1: *mut MagickWand, arg2: *MagickWand,
                                 arg3: *mut RectangleInfo,
                                 arg4: *mut c_double) -> *mut MagickWand;
    pub fn MagickSmushImages(arg1: *mut MagickWand, arg2: MagickBooleanType,
                             arg3: ssize_t) -> *mut MagickWand;
    pub fn MagickSteganoImage(arg1: *mut MagickWand, arg2: *MagickWand,
                              arg3: ssize_t) -> *mut MagickWand;
    pub fn MagickStereoImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     *mut MagickWand;
    pub fn MagickTextureImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     *mut MagickWand;
    pub fn MagickTransformImage(arg1: *mut MagickWand, arg2: *c_schar,
                                arg3: *c_schar) -> *mut MagickWand;
    pub fn MagickGetImageOrientation(arg1: *mut MagickWand) ->
     OrientationType;
    pub fn MagickGetImageHistogram(arg1: *mut MagickWand, arg2: *mut size_t)
     -> *mut *mut PixelWand;
    pub fn MagickGetImageRenderingIntent(arg1: *mut MagickWand) ->
     RenderingIntent;
    pub fn MagickGetImageUnits(arg1: *mut MagickWand) -> ResolutionType;
    pub fn MagickGetImageColors(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageCompressionQuality(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageDelay(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageChannelDepth(arg1: *mut MagickWand,
                                      arg2: ChannelType) -> size_t;
    pub fn MagickGetImageDepth(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageHeight(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageIterations(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageScene(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageTicksPerSecond(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageWidth(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetNumberImages(arg1: *mut MagickWand) -> size_t;
    pub fn MagickGetImageBlob(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut c_uchar;
    pub fn MagickGetImagesBlob(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut c_uchar;
    pub fn MagickGetImageVirtualPixelMethod(arg1: *mut MagickWand) ->
     VirtualPixelMethod;
    pub fn MagickSetImageVirtualPixelMethod(arg1: *mut MagickWand,
                                            arg2: VirtualPixelMethod) ->
     VirtualPixelMethod;
    pub fn MagickCommandGenesis(arg1: *mut ImageInfo, arg2: MagickCommand,
                                arg3: c_int, arg4: *mut *mut c_schar,
                                arg5: *mut *mut c_schar,
                                arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn MogrifyImage(arg1: *mut ImageInfo, arg2: c_int,
                        arg3: *mut *c_schar, arg4: *mut *mut Image,
                        arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn MogrifyImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                               arg3: *mut *mut c_schar,
                               arg4: *mut *mut c_schar,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn MogrifyImageInfo(arg1: *mut ImageInfo, arg2: c_int,
                            arg3: *mut *c_schar, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn MogrifyImageList(arg1: *mut ImageInfo, arg2: c_int,
                            arg3: *mut *c_schar, arg4: *mut *mut Image,
                            arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn MogrifyImages(arg1: *mut ImageInfo, arg2: MagickBooleanType,
                         arg3: c_int, arg4: *mut *c_schar,
                         arg5: *mut *mut Image, arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    pub fn MontageImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                               arg3: *mut *mut c_schar,
                               arg4: *mut *mut c_schar,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn StreamImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                              arg3: *mut *mut c_schar,
                              arg4: *mut *mut c_schar,
                              arg5: *mut ExceptionInfo) -> MagickBooleanType;
    pub fn GetWandViewException(arg1: *WandView, arg2: *mut ExceptionType) ->
     *mut c_schar;
    pub fn DuplexTransferWandViewIterator(arg1: *mut WandView,
                                          arg2: *mut WandView,
                                          arg3: *mut WandView,
                                          arg4: DuplexTransferWandViewMethod,
                                          arg5: *mut c_void) ->
     MagickBooleanType;
    pub fn GetWandViewIterator(arg1: *mut WandView, arg2: GetWandViewMethod,
                               arg3: *mut c_void) -> MagickBooleanType;
    pub fn IsWandView(arg1: *WandView) -> MagickBooleanType;
    pub fn SetWandViewIterator(arg1: *mut WandView, arg2: SetWandViewMethod,
                               arg3: *mut c_void) -> MagickBooleanType;
    pub fn TransferWandViewIterator(arg1: *mut WandView, arg2: *mut WandView,
                                    arg3: TransferWandViewMethod,
                                    arg4: *mut c_void) -> MagickBooleanType;
    pub fn UpdateWandViewIterator(arg1: *mut WandView,
                                  arg2: UpdateWandViewMethod,
                                  arg3: *mut c_void) -> MagickBooleanType;
    pub fn GetWandViewWand(arg1: *WandView) -> *mut MagickWand;
    pub fn GetWandViewPixels(arg1: *WandView) -> *mut *mut PixelWand;
    pub fn GetWandViewExtent(arg1: *WandView) -> RectangleInfo;
    pub fn SetWandViewDescription(arg1: *mut WandView, arg2: *c_schar);
    pub fn SetWandViewThreads(arg1: *mut WandView, arg2: size_t);
    pub fn CloneWandView(arg1: *WandView) -> *mut WandView;
    pub fn DestroyWandView(arg1: *mut WandView) -> *mut WandView;
    pub fn NewWandView(arg1: *mut MagickWand) -> *mut WandView;
    pub fn NewWandViewExtent(arg1: *mut MagickWand, arg2: ssize_t,
                             arg3: ssize_t, arg4: size_t, arg5: size_t) ->
     *mut WandView;
    pub fn MagickGetException(arg1: *MagickWand, arg2: *mut ExceptionType) ->
     *mut c_schar;
    pub fn MagickGetExceptionType(arg1: *MagickWand) -> ExceptionType;
    pub fn IsMagickWand(arg1: *MagickWand) -> MagickBooleanType;
    pub fn MagickClearException(arg1: *mut MagickWand) -> MagickBooleanType;
    pub fn MagickSetIteratorIndex(arg1: *mut MagickWand, arg2: ssize_t) ->
     MagickBooleanType;
    pub fn CloneMagickWand(arg1: *MagickWand) -> *mut MagickWand;
    pub fn DestroyMagickWand(arg1: *mut MagickWand) -> *mut MagickWand;
    pub fn NewMagickWand() -> *mut MagickWand;
    pub fn NewMagickWandFromImage(arg1: *Image) -> *mut MagickWand;
    pub fn MagickGetIteratorIndex(arg1: *mut MagickWand) -> ssize_t;
    pub fn ClearMagickWand(arg1: *mut MagickWand);
    pub fn MagickWandGenesis();
    pub fn MagickWandTerminus();
    pub fn MagickRelinquishMemory(arg1: *mut c_void) -> *mut c_void;
    pub fn MagickResetIterator(arg1: *mut MagickWand);
    pub fn MagickSetFirstIterator(arg1: *mut MagickWand);
    pub fn MagickSetLastIterator(arg1: *mut MagickWand);
}
