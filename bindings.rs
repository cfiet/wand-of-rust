/* automatically generated by rust-bindgen */

use std::libc::*;

pub type Struct__MagickWand = c_void;
pub type MagickWand = Struct__MagickWand;
pub type MagickRealType = c_float;
pub type SignedQuantum = ssize_t;
pub type Quantum = c_ushort;
pub type MagickStatusType = c_uint;
pub type MagickOffsetType = c_longlong;
pub type MagickSizeType = c_ulonglong;
pub type QuantumAny = MagickSizeType;
pub type ChannelType = c_uint;
pub static UndefinedChannel: c_uint = 0;
pub static RedChannel: c_uint = 1;
pub static GrayChannel: c_uint = 1;
pub static CyanChannel: c_uint = 1;
pub static GreenChannel: c_uint = 2;
pub static MagentaChannel: c_uint = 2;
pub static BlueChannel: c_uint = 4;
pub static YellowChannel: c_uint = 4;
pub static AlphaChannel: c_uint = 8;
pub static OpacityChannel: c_uint = 8;
pub static MatteChannel: c_uint = 8;
pub static BlackChannel: c_uint = 32;
pub static IndexChannel: c_uint = 32;
pub static CompositeChannels: c_uint = 47;
pub static AllChannels: c_uint = 134217727;
pub static TrueAlphaChannel: c_uint = 64;
pub static RGBChannels: c_uint = 128;
pub static GrayChannels: c_uint = 128;
pub static SyncChannels: c_uint = 256;
pub static DefaultChannels: c_uint = 134217719;
pub type ClassType = c_uint;
pub static UndefinedClass: c_uint = 0;
pub static DirectClass: c_uint = 1;
pub static PseudoClass: c_uint = 2;
pub type MagickBooleanType = c_uint;
pub static MagickFalse: c_uint = 0;
pub static MagickTrue: c_uint = 1;
pub type Struct__BlobInfo = c_void;
pub type BlobInfo = Struct__BlobInfo;
pub type ExceptionInfo = Struct__ExceptionInfo;
pub type Image = Struct__Image;
pub type ImageInfo = Struct__ImageInfo;
pub type GeometryFlags = c_uint;
pub static NoValue: c_uint = 0;
pub static XValue: c_uint = 1;
pub static XiValue: c_uint = 1;
pub static YValue: c_uint = 2;
pub static PsiValue: c_uint = 2;
pub static WidthValue: c_uint = 4;
pub static RhoValue: c_uint = 4;
pub static HeightValue: c_uint = 8;
pub static SigmaValue: c_uint = 8;
pub static ChiValue: c_uint = 16;
pub static XiNegative: c_uint = 32;
pub static XNegative: c_uint = 32;
pub static PsiNegative: c_uint = 64;
pub static YNegative: c_uint = 64;
pub static ChiNegative: c_uint = 128;
pub static PercentValue: c_uint = 4096;
pub static AspectValue: c_uint = 8192;
pub static NormalizeValue: c_uint = 8192;
pub static LessValue: c_uint = 16384;
pub static GreaterValue: c_uint = 32768;
pub static MinimumValue: c_uint = 65536;
pub static CorrelateNormalizeValue: c_uint = 65536;
pub static AreaValue: c_uint = 131072;
pub static DecimalValue: c_uint = 262144;
pub static SeparatorValue: c_uint = 524288;
pub static AllValues: c_uint = 2147483647;
pub type GravityType = c_uint;
pub static UndefinedGravity: c_uint = 0;
pub static ForgetGravity: c_uint = 0;
pub static NorthWestGravity: c_uint = 1;
pub static NorthGravity: c_uint = 2;
pub static NorthEastGravity: c_uint = 3;
pub static WestGravity: c_uint = 4;
pub static CenterGravity: c_uint = 5;
pub static EastGravity: c_uint = 6;
pub static SouthWestGravity: c_uint = 7;
pub static SouthGravity: c_uint = 8;
pub static SouthEastGravity: c_uint = 9;
pub static StaticGravity: c_uint = 10;
pub struct Struct__AffineMatrix {
    pub sx: c_double,
    pub rx: c_double,
    pub ry: c_double,
    pub sy: c_double,
    pub tx: c_double,
    pub ty: c_double,
}
pub type AffineMatrix = Struct__AffineMatrix;
pub struct Struct__GeometryInfo {
    pub rho: c_double,
    pub sigma: c_double,
    pub xi: c_double,
    pub psi: c_double,
    pub chi: c_double,
}
pub type GeometryInfo = Struct__GeometryInfo;
pub struct Struct__OffsetInfo {
    pub x: ssize_t,
    pub y: ssize_t,
}
pub type OffsetInfo = Struct__OffsetInfo;
pub struct Struct__RectangleInfo {
    pub width: size_t,
    pub height: size_t,
    pub x: ssize_t,
    pub y: ssize_t,
}
pub type RectangleInfo = Struct__RectangleInfo;
pub type KernelInfoType = c_uint;
pub static UndefinedKernel: c_uint = 0;
pub static UnityKernel: c_uint = 1;
pub static GaussianKernel: c_uint = 2;
pub static DoGKernel: c_uint = 3;
pub static LoGKernel: c_uint = 4;
pub static BlurKernel: c_uint = 5;
pub static CometKernel: c_uint = 6;
pub static LaplacianKernel: c_uint = 7;
pub static SobelKernel: c_uint = 8;
pub static FreiChenKernel: c_uint = 9;
pub static RobertsKernel: c_uint = 10;
pub static PrewittKernel: c_uint = 11;
pub static CompassKernel: c_uint = 12;
pub static KirschKernel: c_uint = 13;
pub static DiamondKernel: c_uint = 14;
pub static SquareKernel: c_uint = 15;
pub static RectangleKernel: c_uint = 16;
pub static OctagonKernel: c_uint = 17;
pub static DiskKernel: c_uint = 18;
pub static PlusKernel: c_uint = 19;
pub static CrossKernel: c_uint = 20;
pub static RingKernel: c_uint = 21;
pub static PeaksKernel: c_uint = 22;
pub static EdgesKernel: c_uint = 23;
pub static CornersKernel: c_uint = 24;
pub static DiagonalsKernel: c_uint = 25;
pub static LineEndsKernel: c_uint = 26;
pub static LineJunctionsKernel: c_uint = 27;
pub static RidgesKernel: c_uint = 28;
pub static ConvexHullKernel: c_uint = 29;
pub static ThinSEKernel: c_uint = 30;
pub static SkeletonKernel: c_uint = 31;
pub static ChebyshevKernel: c_uint = 32;
pub static ManhattanKernel: c_uint = 33;
pub static OctagonalKernel: c_uint = 34;
pub static EuclideanKernel: c_uint = 35;
pub static UserDefinedKernel: c_uint = 36;
pub static BinomialKernel: c_uint = 37;
pub type MorphologyMethod = c_uint;
pub static UndefinedMorphology: c_uint = 0;
pub static ConvolveMorphology: c_uint = 1;
pub static CorrelateMorphology: c_uint = 2;
pub static ErodeMorphology: c_uint = 3;
pub static DilateMorphology: c_uint = 4;
pub static ErodeIntensityMorphology: c_uint = 5;
pub static DilateIntensityMorphology: c_uint = 6;
pub static DistanceMorphology: c_uint = 7;
pub static OpenMorphology: c_uint = 8;
pub static CloseMorphology: c_uint = 9;
pub static OpenIntensityMorphology: c_uint = 10;
pub static CloseIntensityMorphology: c_uint = 11;
pub static SmoothMorphology: c_uint = 12;
pub static EdgeInMorphology: c_uint = 13;
pub static EdgeOutMorphology: c_uint = 14;
pub static EdgeMorphology: c_uint = 15;
pub static TopHatMorphology: c_uint = 16;
pub static BottomHatMorphology: c_uint = 17;
pub static HitAndMissMorphology: c_uint = 18;
pub static ThinningMorphology: c_uint = 19;
pub static ThickenMorphology: c_uint = 20;
pub static VoronoiMorphology: c_uint = 21;
pub static IterativeDistanceMorphology: c_uint = 22;
pub struct Struct_KernelInfo {
    pub _type: KernelInfoType,
    pub width: size_t,
    pub height: size_t,
    pub x: ssize_t,
    pub y: ssize_t,
    pub values: *mut c_double,
    pub minimum: c_double,
    pub maximum: c_double,
    pub negative_range: c_double,
    pub positive_range: c_double,
    pub angle: c_double,
    pub next: *mut Struct_KernelInfo,
    pub signature: size_t,
}
pub type KernelInfo = Struct_KernelInfo;
pub type ColorspaceType = c_uint;
pub static UndefinedColorspace: c_uint = 0;
pub static RGBColorspace: c_uint = 1;
pub static GRAYColorspace: c_uint = 2;
pub static TransparentColorspace: c_uint = 3;
pub static OHTAColorspace: c_uint = 4;
pub static LabColorspace: c_uint = 5;
pub static XYZColorspace: c_uint = 6;
pub static YCbCrColorspace: c_uint = 7;
pub static YCCColorspace: c_uint = 8;
pub static YIQColorspace: c_uint = 9;
pub static YPbPrColorspace: c_uint = 10;
pub static YUVColorspace: c_uint = 11;
pub static CMYKColorspace: c_uint = 12;
pub static sRGBColorspace: c_uint = 13;
pub static HSBColorspace: c_uint = 14;
pub static HSLColorspace: c_uint = 15;
pub static HWBColorspace: c_uint = 16;
pub static Rec601LumaColorspace: c_uint = 17;
pub static Rec601YCbCrColorspace: c_uint = 18;
pub static Rec709LumaColorspace: c_uint = 19;
pub static Rec709YCbCrColorspace: c_uint = 20;
pub static LogColorspace: c_uint = 21;
pub static CMYColorspace: c_uint = 22;
pub static LuvColorspace: c_uint = 23;
pub static HCLColorspace: c_uint = 24;
pub static LCHColorspace: c_uint = 25;
pub static LMSColorspace: c_uint = 26;
pub type StorageType = c_uint;
pub static UndefinedPixel: c_uint = 0;
pub static CharPixel: c_uint = 1;
pub static DoublePixel: c_uint = 2;
pub static FloatPixel: c_uint = 3;
pub static IntegerPixel: c_uint = 4;
pub static LongPixel: c_uint = 5;
pub static QuantumPixel: c_uint = 6;
pub static ShortPixel: c_uint = 7;
pub type InterpolatePixelMethod = c_uint;
pub static UndefinedInterpolatePixel: c_uint = 0;
pub static AverageInterpolatePixel: c_uint = 1;
pub static BicubicInterpolatePixel: c_uint = 2;
pub static BilinearInterpolatePixel: c_uint = 3;
pub static FilterInterpolatePixel: c_uint = 4;
pub static IntegerInterpolatePixel: c_uint = 5;
pub static MeshInterpolatePixel: c_uint = 6;
pub static NearestNeighborInterpolatePixel: c_uint = 7;
pub static SplineInterpolatePixel: c_uint = 8;
pub static Average9InterpolatePixel: c_uint = 9;
pub static Average16InterpolatePixel: c_uint = 10;
pub static BlendInterpolatePixel: c_uint = 11;
pub static BackgroundInterpolatePixel: c_uint = 12;
pub static CatromInterpolatePixel: c_uint = 13;
pub type PixelComponent = c_uint;
pub static PixelRed: c_uint = 0;
pub static PixelCyan: c_uint = 0;
pub static PixelGray: c_uint = 0;
pub static PixelY: c_uint = 0;
pub static PixelGreen: c_uint = 1;
pub static PixelMagenta: c_uint = 1;
pub static PixelCb: c_uint = 1;
pub static PixelBlue: c_uint = 2;
pub static PixelYellow: c_uint = 2;
pub static PixelCr: c_uint = 2;
pub static PixelAlpha: c_uint = 3;
pub static PixelBlack: c_uint = 4;
pub static PixelIndex: c_uint = 4;
pub static MaskPixelComponent: c_uint = 5;
pub struct Struct__DoublePixelPacket {
    pub red: c_double,
    pub green: c_double,
    pub blue: c_double,
    pub opacity: c_double,
    pub index: c_double,
}
pub type DoublePixelPacket = Struct__DoublePixelPacket;
pub struct Struct__LongPixelPacket {
    pub red: c_uint,
    pub green: c_uint,
    pub blue: c_uint,
    pub opacity: c_uint,
    pub index: c_uint,
}
pub type LongPixelPacket = Struct__LongPixelPacket;
pub struct Struct__MagickPixelPacket {
    pub storage_class: ClassType,
    pub colorspace: ColorspaceType,
    pub matte: MagickBooleanType,
    pub fuzz: c_double,
    pub depth: size_t,
    pub red: MagickRealType,
    pub green: MagickRealType,
    pub blue: MagickRealType,
    pub opacity: MagickRealType,
    pub index: MagickRealType,
}
pub type MagickPixelPacket = Struct__MagickPixelPacket;
pub type IndexPacket = Quantum;
pub struct Struct__PixelPacket {
    pub blue: Quantum,
    pub green: Quantum,
    pub red: Quantum,
    pub opacity: Quantum,
}
pub type PixelPacket = Struct__PixelPacket;
pub struct Struct__QuantumPixelPacket {
    pub red: Quantum,
    pub green: Quantum,
    pub blue: Quantum,
    pub opacity: Quantum,
    pub index: Quantum,
}
pub type QuantumPixelPacket = Struct__QuantumPixelPacket;
pub type Struct__CacheView = c_void;
pub type CacheView_ = Struct__CacheView;
pub type Struct_SemaphoreInfo = c_void;
pub type SemaphoreInfo = Struct_SemaphoreInfo;
pub type ExceptionType = c_uint;
pub static UndefinedException: c_uint = 0;
pub static WarningException: c_uint = 300;
pub static ResourceLimitWarning: c_uint = 300;
pub static TypeWarning: c_uint = 305;
pub static OptionWarning: c_uint = 310;
pub static DelegateWarning: c_uint = 315;
pub static MissingDelegateWarning: c_uint = 320;
pub static CorruptImageWarning: c_uint = 325;
pub static FileOpenWarning: c_uint = 330;
pub static BlobWarning: c_uint = 335;
pub static StreamWarning: c_uint = 340;
pub static CacheWarning: c_uint = 345;
pub static CoderWarning: c_uint = 350;
pub static FilterWarning: c_uint = 352;
pub static ModuleWarning: c_uint = 355;
pub static DrawWarning: c_uint = 360;
pub static ImageWarning: c_uint = 365;
pub static WandWarning: c_uint = 370;
pub static RandomWarning: c_uint = 375;
pub static XServerWarning: c_uint = 380;
pub static MonitorWarning: c_uint = 385;
pub static RegistryWarning: c_uint = 390;
pub static ConfigureWarning: c_uint = 395;
pub static PolicyWarning: c_uint = 399;
pub static ErrorException: c_uint = 400;
pub static ResourceLimitError: c_uint = 400;
pub static TypeError: c_uint = 405;
pub static OptionError: c_uint = 410;
pub static DelegateError: c_uint = 415;
pub static MissingDelegateError: c_uint = 420;
pub static CorruptImageError: c_uint = 425;
pub static FileOpenError: c_uint = 430;
pub static BlobError: c_uint = 435;
pub static StreamError: c_uint = 440;
pub static CacheError: c_uint = 445;
pub static CoderError: c_uint = 450;
pub static FilterError: c_uint = 452;
pub static ModuleError: c_uint = 455;
pub static DrawError: c_uint = 460;
pub static ImageError: c_uint = 465;
pub static WandError: c_uint = 470;
pub static RandomError: c_uint = 475;
pub static XServerError: c_uint = 480;
pub static MonitorError: c_uint = 485;
pub static RegistryError: c_uint = 490;
pub static ConfigureError: c_uint = 495;
pub static PolicyError: c_uint = 499;
pub static FatalErrorException: c_uint = 700;
pub static ResourceLimitFatalError: c_uint = 700;
pub static TypeFatalError: c_uint = 705;
pub static OptionFatalError: c_uint = 710;
pub static DelegateFatalError: c_uint = 715;
pub static MissingDelegateFatalError: c_uint = 720;
pub static CorruptImageFatalError: c_uint = 725;
pub static FileOpenFatalError: c_uint = 730;
pub static BlobFatalError: c_uint = 735;
pub static StreamFatalError: c_uint = 740;
pub static CacheFatalError: c_uint = 745;
pub static CoderFatalError: c_uint = 750;
pub static FilterFatalError: c_uint = 752;
pub static ModuleFatalError: c_uint = 755;
pub static DrawFatalError: c_uint = 760;
pub static ImageFatalError: c_uint = 765;
pub static WandFatalError: c_uint = 770;
pub static RandomFatalError: c_uint = 775;
pub static XServerFatalError: c_uint = 780;
pub static MonitorFatalError: c_uint = 785;
pub static RegistryFatalError: c_uint = 790;
pub static ConfigureFatalError: c_uint = 795;
pub static PolicyFatalError: c_uint = 799;
pub struct Struct__ExceptionInfo {
    pub severity: ExceptionType,
    pub error_number: c_int,
    pub reason: *mut c_schar,
    pub description: *mut c_schar,
    pub exceptions: *mut c_void,
    pub relinquish: MagickBooleanType,
    pub semaphore: *mut SemaphoreInfo,
    pub signature: size_t,
}
pub type ErrorHandler = *u8;
pub type FatalErrorHandler = *u8;
pub type WarningHandler = *u8;
pub type ComplianceType = c_uint;
pub static UndefinedCompliance: c_uint = 0;
pub static NoCompliance: c_uint = 0;
pub static SVGCompliance: c_uint = 1;
pub static X11Compliance: c_uint = 2;
pub static XPMCompliance: c_uint = 4;
pub static AllCompliance: c_uint = 2147483647;
pub struct Struct__ColorInfo {
    pub path: *mut c_schar,
    pub name: *mut c_schar,
    pub compliance: ComplianceType,
    pub color: MagickPixelPacket,
    pub exempt: MagickBooleanType,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__ColorInfo,
    pub next: *mut Struct__ColorInfo,
    pub signature: size_t,
}
pub type ColorInfo = Struct__ColorInfo;
pub struct Struct__ErrorInfo {
    pub mean_error_per_pixel: c_double,
    pub normalized_mean_error: c_double,
    pub normalized_maximum_error: c_double,
}
pub type ErrorInfo = Struct__ErrorInfo;
pub type AlphaChannelType = c_uint;
pub static UndefinedAlphaChannel: c_uint = 0;
pub static ActivateAlphaChannel: c_uint = 1;
pub static BackgroundAlphaChannel: c_uint = 2;
pub static CopyAlphaChannel: c_uint = 3;
pub static DeactivateAlphaChannel: c_uint = 4;
pub static ExtractAlphaChannel: c_uint = 5;
pub static OpaqueAlphaChannel: c_uint = 6;
pub static ResetAlphaChannel: c_uint = 7;
pub static SetAlphaChannel: c_uint = 8;
pub static ShapeAlphaChannel: c_uint = 9;
pub static TransparentAlphaChannel: c_uint = 10;
pub static FlattenAlphaChannel: c_uint = 11;
pub static RemoveAlphaChannel: c_uint = 12;
pub type ImageType = c_uint;
pub static UndefinedType: c_uint = 0;
pub static BilevelType: c_uint = 1;
pub static GrayscaleType: c_uint = 2;
pub static GrayscaleMatteType: c_uint = 3;
pub static PaletteType: c_uint = 4;
pub static PaletteMatteType: c_uint = 5;
pub static TrueColorType: c_uint = 6;
pub static TrueColorMatteType: c_uint = 7;
pub static ColorSeparationType: c_uint = 8;
pub static ColorSeparationMatteType: c_uint = 9;
pub static OptimizeType: c_uint = 10;
pub static PaletteBilevelMatteType: c_uint = 11;
pub type InterlaceType = c_uint;
pub static UndefinedInterlace: c_uint = 0;
pub static NoInterlace: c_uint = 1;
pub static LineInterlace: c_uint = 2;
pub static PlaneInterlace: c_uint = 3;
pub static PartitionInterlace: c_uint = 4;
pub static GIFInterlace: c_uint = 5;
pub static JPEGInterlace: c_uint = 6;
pub static PNGInterlace: c_uint = 7;
pub type OrientationType = c_uint;
pub static UndefinedOrientation: c_uint = 0;
pub static TopLeftOrientation: c_uint = 1;
pub static TopRightOrientation: c_uint = 2;
pub static BottomRightOrientation: c_uint = 3;
pub static BottomLeftOrientation: c_uint = 4;
pub static LeftTopOrientation: c_uint = 5;
pub static RightTopOrientation: c_uint = 6;
pub static RightBottomOrientation: c_uint = 7;
pub static LeftBottomOrientation: c_uint = 8;
pub type ResolutionType = c_uint;
pub static UndefinedResolution: c_uint = 0;
pub static PixelsPerInchResolution: c_uint = 1;
pub static PixelsPerCentimeterResolution: c_uint = 2;
pub struct Struct__PrimaryInfo {
    pub x: c_double,
    pub y: c_double,
    pub z: c_double,
}
pub type PrimaryInfo = Struct__PrimaryInfo;
pub struct Struct__SegmentInfo {
    pub x1: c_double,
    pub y1: c_double,
    pub x2: c_double,
    pub y2: c_double,
}
pub type SegmentInfo = Struct__SegmentInfo;
pub type TransmitType = c_uint;
pub static UndefinedTransmitType: c_uint = 0;
pub static FileTransmitType: c_uint = 1;
pub static BlobTransmitType: c_uint = 2;
pub static StreamTransmitType: c_uint = 3;
pub static ImageTransmitType: c_uint = 4;
pub struct Struct__ChromaticityInfo {
    pub red_primary: PrimaryInfo,
    pub green_primary: PrimaryInfo,
    pub blue_primary: PrimaryInfo,
    pub white_point: PrimaryInfo,
}
pub type ChromaticityInfo = Struct__ChromaticityInfo;
pub type StreamHandler = *u8;
pub type MapMode = c_uint;
pub static ReadMode: c_uint = 0;
pub static WriteMode: c_uint = 1;
pub static IOMode: c_uint = 2;
pub type VirtualPixelMethod = c_uint;
pub static UndefinedVirtualPixelMethod: c_uint = 0;
pub static BackgroundVirtualPixelMethod: c_uint = 1;
pub static ConstantVirtualPixelMethod: c_uint = 2;
pub static DitherVirtualPixelMethod: c_uint = 3;
pub static EdgeVirtualPixelMethod: c_uint = 4;
pub static MirrorVirtualPixelMethod: c_uint = 5;
pub static RandomVirtualPixelMethod: c_uint = 6;
pub static TileVirtualPixelMethod: c_uint = 7;
pub static TransparentVirtualPixelMethod: c_uint = 8;
pub static MaskVirtualPixelMethod: c_uint = 9;
pub static BlackVirtualPixelMethod: c_uint = 10;
pub static GrayVirtualPixelMethod: c_uint = 11;
pub static WhiteVirtualPixelMethod: c_uint = 12;
pub static HorizontalTileVirtualPixelMethod: c_uint = 13;
pub static VerticalTileVirtualPixelMethod: c_uint = 14;
pub static HorizontalTileEdgeVirtualPixelMethod: c_uint = 15;
pub static VerticalTileEdgeVirtualPixelMethod: c_uint = 16;
pub static CheckerTileVirtualPixelMethod: c_uint = 17;
pub type CacheView = Struct__CacheView;
pub type CompositeOperator = c_uint;
pub static UndefinedCompositeOp: c_uint = 0;
pub static NoCompositeOp: c_uint = 1;
pub static ModulusAddCompositeOp: c_uint = 2;
pub static AtopCompositeOp: c_uint = 3;
pub static BlendCompositeOp: c_uint = 4;
pub static BumpmapCompositeOp: c_uint = 5;
pub static ChangeMaskCompositeOp: c_uint = 6;
pub static ClearCompositeOp: c_uint = 7;
pub static ColorBurnCompositeOp: c_uint = 8;
pub static ColorDodgeCompositeOp: c_uint = 9;
pub static ColorizeCompositeOp: c_uint = 10;
pub static CopyBlackCompositeOp: c_uint = 11;
pub static CopyBlueCompositeOp: c_uint = 12;
pub static CopyCompositeOp: c_uint = 13;
pub static CopyCyanCompositeOp: c_uint = 14;
pub static CopyGreenCompositeOp: c_uint = 15;
pub static CopyMagentaCompositeOp: c_uint = 16;
pub static CopyOpacityCompositeOp: c_uint = 17;
pub static CopyRedCompositeOp: c_uint = 18;
pub static CopyYellowCompositeOp: c_uint = 19;
pub static DarkenCompositeOp: c_uint = 20;
pub static DstAtopCompositeOp: c_uint = 21;
pub static DstCompositeOp: c_uint = 22;
pub static DstInCompositeOp: c_uint = 23;
pub static DstOutCompositeOp: c_uint = 24;
pub static DstOverCompositeOp: c_uint = 25;
pub static DifferenceCompositeOp: c_uint = 26;
pub static DisplaceCompositeOp: c_uint = 27;
pub static DissolveCompositeOp: c_uint = 28;
pub static ExclusionCompositeOp: c_uint = 29;
pub static HardLightCompositeOp: c_uint = 30;
pub static HueCompositeOp: c_uint = 31;
pub static InCompositeOp: c_uint = 32;
pub static LightenCompositeOp: c_uint = 33;
pub static LinearLightCompositeOp: c_uint = 34;
pub static LuminizeCompositeOp: c_uint = 35;
pub static MinusDstCompositeOp: c_uint = 36;
pub static ModulateCompositeOp: c_uint = 37;
pub static MultiplyCompositeOp: c_uint = 38;
pub static OutCompositeOp: c_uint = 39;
pub static OverCompositeOp: c_uint = 40;
pub static OverlayCompositeOp: c_uint = 41;
pub static PlusCompositeOp: c_uint = 42;
pub static ReplaceCompositeOp: c_uint = 43;
pub static SaturateCompositeOp: c_uint = 44;
pub static ScreenCompositeOp: c_uint = 45;
pub static SoftLightCompositeOp: c_uint = 46;
pub static SrcAtopCompositeOp: c_uint = 47;
pub static SrcCompositeOp: c_uint = 48;
pub static SrcInCompositeOp: c_uint = 49;
pub static SrcOutCompositeOp: c_uint = 50;
pub static SrcOverCompositeOp: c_uint = 51;
pub static ModulusSubtractCompositeOp: c_uint = 52;
pub static ThresholdCompositeOp: c_uint = 53;
pub static XorCompositeOp: c_uint = 54;
pub static DivideDstCompositeOp: c_uint = 55;
pub static DistortCompositeOp: c_uint = 56;
pub static BlurCompositeOp: c_uint = 57;
pub static PegtopLightCompositeOp: c_uint = 58;
pub static VividLightCompositeOp: c_uint = 59;
pub static PinLightCompositeOp: c_uint = 60;
pub static LinearDodgeCompositeOp: c_uint = 61;
pub static LinearBurnCompositeOp: c_uint = 62;
pub static MathematicsCompositeOp: c_uint = 63;
pub static DivideSrcCompositeOp: c_uint = 64;
pub static MinusSrcCompositeOp: c_uint = 65;
pub static DarkenIntensityCompositeOp: c_uint = 66;
pub static LightenIntensityCompositeOp: c_uint = 67;
pub type CompressionType = c_uint;
pub static UndefinedCompression: c_uint = 0;
pub static NoCompression: c_uint = 1;
pub static BZipCompression: c_uint = 2;
pub static DXT1Compression: c_uint = 3;
pub static DXT3Compression: c_uint = 4;
pub static DXT5Compression: c_uint = 5;
pub static FaxCompression: c_uint = 6;
pub static Group4Compression: c_uint = 7;
pub static JPEGCompression: c_uint = 8;
pub static JPEG2000Compression: c_uint = 9;
pub static LosslessJPEGCompression: c_uint = 10;
pub static LZWCompression: c_uint = 11;
pub static RLECompression: c_uint = 12;
pub static ZipCompression: c_uint = 13;
pub static ZipSCompression: c_uint = 14;
pub static PizCompression: c_uint = 15;
pub static Pxr24Compression: c_uint = 16;
pub static B44Compression: c_uint = 17;
pub static B44ACompression: c_uint = 18;
pub static LZMACompression: c_uint = 19;
pub static JBIG1Compression: c_uint = 20;
pub static JBIG2Compression: c_uint = 21;
pub type Struct__Ascii85Info = c_void;
pub type Ascii85Info = Struct__Ascii85Info;
pub type PreviewType = c_uint;
pub static UndefinedPreview: c_uint = 0;
pub static RotatePreview: c_uint = 1;
pub static ShearPreview: c_uint = 2;
pub static RollPreview: c_uint = 3;
pub static HuePreview: c_uint = 4;
pub static SaturationPreview: c_uint = 5;
pub static BrightnessPreview: c_uint = 6;
pub static GammaPreview: c_uint = 7;
pub static SpiffPreview: c_uint = 8;
pub static DullPreview: c_uint = 9;
pub static GrayscalePreview: c_uint = 10;
pub static QuantizePreview: c_uint = 11;
pub static DespecklePreview: c_uint = 12;
pub static ReduceNoisePreview: c_uint = 13;
pub static AddNoisePreview: c_uint = 14;
pub static SharpenPreview: c_uint = 15;
pub static BlurPreview: c_uint = 16;
pub static ThresholdPreview: c_uint = 17;
pub static EdgeDetectPreview: c_uint = 18;
pub static SpreadPreview: c_uint = 19;
pub static SolarizePreview: c_uint = 20;
pub static ShadePreview: c_uint = 21;
pub static RaisePreview: c_uint = 22;
pub static SegmentPreview: c_uint = 23;
pub static SwirlPreview: c_uint = 24;
pub static ImplodePreview: c_uint = 25;
pub static WavePreview: c_uint = 26;
pub static OilPaintPreview: c_uint = 27;
pub static CharcoalDrawingPreview: c_uint = 28;
pub static JPEGPreview: c_uint = 29;
pub type DisposeType = c_uint;
pub static UnrecognizedDispose: c_uint = 0;
pub static UndefinedDispose: c_uint = 0;
pub static NoneDispose: c_uint = 1;
pub static BackgroundDispose: c_uint = 2;
pub static PreviousDispose: c_uint = 3;
pub type ImageLayerMethod = c_uint;
pub static UndefinedLayer: c_uint = 0;
pub static CoalesceLayer: c_uint = 1;
pub static CompareAnyLayer: c_uint = 2;
pub static CompareClearLayer: c_uint = 3;
pub static CompareOverlayLayer: c_uint = 4;
pub static DisposeLayer: c_uint = 5;
pub static OptimizeLayer: c_uint = 6;
pub static OptimizeImageLayer: c_uint = 7;
pub static OptimizePlusLayer: c_uint = 8;
pub static OptimizeTransLayer: c_uint = 9;
pub static RemoveDupsLayer: c_uint = 10;
pub static RemoveZeroLayer: c_uint = 11;
pub static CompositeLayer: c_uint = 12;
pub static MergeLayer: c_uint = 13;
pub static FlattenLayer: c_uint = 14;
pub static MosaicLayer: c_uint = 15;
pub static TrimBoundsLayer: c_uint = 16;
pub type Struct__HashmapInfo = c_void;
pub type HashmapInfo = Struct__HashmapInfo;
pub type Struct__LinkedListInfo = c_void;
pub type LinkedListInfo = Struct__LinkedListInfo;
pub struct Struct__LocaleInfo {
    pub path: *mut c_schar,
    pub tag: *mut c_schar,
    pub message: *mut c_schar,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__LocaleInfo,
    pub next: *mut Struct__LocaleInfo,
    pub signature: size_t,
}
pub type LocaleInfo = Struct__LocaleInfo;
pub type MagickProgressMonitor = *u8;
pub struct Struct__StringInfo {
    pub path: [c_schar, ..4096u],
    pub datum: *mut c_uchar,
    pub length: size_t,
    pub signature: size_t,
}
pub type StringInfo = Struct__StringInfo;
pub struct Struct__ProfileInfo {
    pub name: *mut c_schar,
    pub length: size_t,
    pub info: *mut c_uchar,
    pub signature: size_t,
}
pub type ProfileInfo = Struct__ProfileInfo;
pub type RenderingIntent = c_uint;
pub static UndefinedIntent: c_uint = 0;
pub static SaturationIntent: c_uint = 1;
pub static PerceptualIntent: c_uint = 2;
pub static AbsoluteIntent: c_uint = 3;
pub static RelativeIntent: c_uint = 4;
pub type EndianType = c_uint;
pub static UndefinedEndian: c_uint = 0;
pub static LSBEndian: c_uint = 1;
pub static MSBEndian: c_uint = 2;
pub type QuantumAlphaType = c_uint;
pub static UndefinedQuantumAlpha: c_uint = 0;
pub static AssociatedQuantumAlpha: c_uint = 1;
pub static DisassociatedQuantumAlpha: c_uint = 2;
pub type QuantumFormatType = c_uint;
pub static UndefinedQuantumFormat: c_uint = 0;
pub static FloatingPointQuantumFormat: c_uint = 1;
pub static SignedQuantumFormat: c_uint = 2;
pub static UnsignedQuantumFormat: c_uint = 3;
pub type QuantumType = c_uint;
pub static UndefinedQuantum: c_uint = 0;
pub static AlphaQuantum: c_uint = 1;
pub static BlackQuantum: c_uint = 2;
pub static BlueQuantum: c_uint = 3;
pub static CMYKAQuantum: c_uint = 4;
pub static CMYKQuantum: c_uint = 5;
pub static CyanQuantum: c_uint = 6;
pub static GrayAlphaQuantum: c_uint = 7;
pub static GrayQuantum: c_uint = 8;
pub static GreenQuantum: c_uint = 9;
pub static IndexAlphaQuantum: c_uint = 10;
pub static IndexQuantum: c_uint = 11;
pub static MagentaQuantum: c_uint = 12;
pub static OpacityQuantum: c_uint = 13;
pub static RedQuantum: c_uint = 14;
pub static RGBAQuantum: c_uint = 15;
pub static BGRAQuantum: c_uint = 16;
pub static RGBOQuantum: c_uint = 17;
pub static RGBQuantum: c_uint = 18;
pub static YellowQuantum: c_uint = 19;
pub static GrayPadQuantum: c_uint = 20;
pub static RGBPadQuantum: c_uint = 21;
pub static CbYCrYQuantum: c_uint = 22;
pub static CbYCrQuantum: c_uint = 23;
pub static CbYCrAQuantum: c_uint = 24;
pub static CMYKOQuantum: c_uint = 25;
pub static BGRQuantum: c_uint = 26;
pub static BGROQuantum: c_uint = 27;
pub type Struct__QuantumInfo = c_void;
pub type QuantumInfo = Struct__QuantumInfo;
pub type FilterTypes = c_uint;
pub static UndefinedFilter: c_uint = 0;
pub static PointFilter: c_uint = 1;
pub static BoxFilter: c_uint = 2;
pub static TriangleFilter: c_uint = 3;
pub static HermiteFilter: c_uint = 4;
pub static HanningFilter: c_uint = 5;
pub static HammingFilter: c_uint = 6;
pub static BlackmanFilter: c_uint = 7;
pub static GaussianFilter: c_uint = 8;
pub static QuadraticFilter: c_uint = 9;
pub static CubicFilter: c_uint = 10;
pub static CatromFilter: c_uint = 11;
pub static MitchellFilter: c_uint = 12;
pub static JincFilter: c_uint = 13;
pub static SincFilter: c_uint = 14;
pub static SincFastFilter: c_uint = 15;
pub static KaiserFilter: c_uint = 16;
pub static WelshFilter: c_uint = 17;
pub static ParzenFilter: c_uint = 18;
pub static BohmanFilter: c_uint = 19;
pub static BartlettFilter: c_uint = 20;
pub static LagrangeFilter: c_uint = 21;
pub static LanczosFilter: c_uint = 22;
pub static LanczosSharpFilter: c_uint = 23;
pub static Lanczos2Filter: c_uint = 24;
pub static Lanczos2SharpFilter: c_uint = 25;
pub static RobidouxFilter: c_uint = 26;
pub static RobidouxSharpFilter: c_uint = 27;
pub static CosineFilter: c_uint = 28;
pub static SplineFilter: c_uint = 29;
pub static LanczosRadiusFilter: c_uint = 30;
pub static SentinelFilter: c_uint = 31;
pub type Struct__ResampleFilter = c_void;
pub type ResampleFilter = Struct__ResampleFilter;
pub type TimerState = c_uint;
pub static UndefinedTimerState: c_uint = 0;
pub static StoppedTimerState: c_uint = 1;
pub static RunningTimerState: c_uint = 2;
pub struct Struct__Timer {
    pub start: c_double,
    pub stop: c_double,
    pub total: c_double,
}
pub type Timer = Struct__Timer;
pub struct Struct__TimerInfo {
    pub user: Timer,
    pub elapsed: Timer,
    pub state: TimerState,
    pub signature: size_t,
}
pub type TimerInfo = Struct__TimerInfo;
pub struct Struct__Image {
    pub storage_class: ClassType,
    pub colorspace: ColorspaceType,
    pub compression: CompressionType,
    pub quality: size_t,
    pub orientation: OrientationType,
    pub taint: MagickBooleanType,
    pub matte: MagickBooleanType,
    pub columns: size_t,
    pub rows: size_t,
    pub depth: size_t,
    pub colors: size_t,
    pub colormap: *mut PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub gamma: c_double,
    pub chromaticity: ChromaticityInfo,
    pub rendering_intent: RenderingIntent,
    pub profiles: *mut c_void,
    pub units: ResolutionType,
    pub montage: *mut c_schar,
    pub directory: *mut c_schar,
    pub geometry: *mut c_schar,
    pub offset: ssize_t,
    pub x_resolution: c_double,
    pub y_resolution: c_double,
    pub page: RectangleInfo,
    pub extract_info: RectangleInfo,
    pub tile_info: RectangleInfo,
    pub bias: c_double,
    pub blur: c_double,
    pub fuzz: c_double,
    pub filter: FilterTypes,
    pub interlace: InterlaceType,
    pub endian: EndianType,
    pub gravity: GravityType,
    pub compose: CompositeOperator,
    pub dispose: DisposeType,
    pub clip_mask: *mut Struct__Image,
    pub scene: size_t,
    pub delay: size_t,
    pub ticks_per_second: ssize_t,
    pub iterations: size_t,
    pub total_colors: size_t,
    pub start_loop: ssize_t,
    pub error: ErrorInfo,
    pub timer: TimerInfo,
    pub progress_monitor: MagickProgressMonitor,
    pub client_data: *mut c_void,
    pub cache: *mut c_void,
    pub attributes: *mut c_void,
    pub ascii85: *mut Ascii85Info,
    pub blob: *mut BlobInfo,
    pub filename: [c_schar, ..4096u],
    pub magick_filename: [c_schar, ..4096u],
    pub magick: [c_schar, ..4096u],
    pub magick_columns: size_t,
    pub magick_rows: size_t,
    pub exception: ExceptionInfo,
    pub debug: MagickBooleanType,
    pub reference_count: ssize_t,
    pub semaphore: *mut SemaphoreInfo,
    pub color_profile: ProfileInfo,
    pub iptc_profile: ProfileInfo,
    pub generic_profile: *mut ProfileInfo,
    pub generic_profiles: size_t,
    pub signature: size_t,
    pub previous: *mut Struct__Image,
    pub list: *mut Struct__Image,
    pub next: *mut Struct__Image,
    pub interpolate: InterpolatePixelMethod,
    pub black_point_compensation: MagickBooleanType,
    pub transparent_color: PixelPacket,
    pub mask: *mut Struct__Image,
    pub tile_offset: RectangleInfo,
    pub properties: *mut c_void,
    pub artifacts: *mut c_void,
    pub _type: ImageType,
    pub dither: MagickBooleanType,
    pub extent: MagickSizeType,
    pub ping: MagickBooleanType,
    pub channels: size_t,
}
pub struct Struct__ImageInfo {
    pub compression: CompressionType,
    pub orientation: OrientationType,
    pub temporary: MagickBooleanType,
    pub adjoin: MagickBooleanType,
    pub affirm: MagickBooleanType,
    pub antialias: MagickBooleanType,
    pub size: *mut c_schar,
    pub extract: *mut c_schar,
    pub page: *mut c_schar,
    pub scenes: *mut c_schar,
    pub scene: size_t,
    pub number_scenes: size_t,
    pub depth: size_t,
    pub interlace: InterlaceType,
    pub endian: EndianType,
    pub units: ResolutionType,
    pub quality: size_t,
    pub sampling_factor: *mut c_schar,
    pub server_name: *mut c_schar,
    pub font: *mut c_schar,
    pub texture: *mut c_schar,
    pub density: *mut c_schar,
    pub pointsize: c_double,
    pub fuzz: c_double,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub dither: MagickBooleanType,
    pub monochrome: MagickBooleanType,
    pub colors: size_t,
    pub colorspace: ColorspaceType,
    pub _type: ImageType,
    pub preview_type: PreviewType,
    pub group: ssize_t,
    pub ping: MagickBooleanType,
    pub verbose: MagickBooleanType,
    pub view: *mut c_schar,
    pub authenticate: *mut c_schar,
    pub channel: ChannelType,
    pub attributes: *mut Image,
    pub options: *mut c_void,
    pub progress_monitor: MagickProgressMonitor,
    pub client_data: *mut c_void,
    pub cache: *mut c_void,
    pub stream: StreamHandler,
    pub file: *mut FILE,
    pub blob: *mut c_void,
    pub length: size_t,
    pub magick: [c_schar, ..4096u],
    pub unique: [c_schar, ..4096u],
    pub zero: [c_schar, ..4096u],
    pub filename: [c_schar, ..4096u],
    pub debug: MagickBooleanType,
    pub tile: *mut c_schar,
    pub subimage: size_t,
    pub subrange: size_t,
    pub pen: PixelPacket,
    pub signature: size_t,
    pub virtual_pixel_method: VirtualPixelMethod,
    pub transparent_color: PixelPacket,
    pub profile: *mut c_void,
    pub synchronize: MagickBooleanType,
}
pub type StretchType = c_uint;
pub static UndefinedStretch: c_uint = 0;
pub static NormalStretch: c_uint = 1;
pub static UltraCondensedStretch: c_uint = 2;
pub static ExtraCondensedStretch: c_uint = 3;
pub static CondensedStretch: c_uint = 4;
pub static SemiCondensedStretch: c_uint = 5;
pub static SemiExpandedStretch: c_uint = 6;
pub static ExpandedStretch: c_uint = 7;
pub static ExtraExpandedStretch: c_uint = 8;
pub static UltraExpandedStretch: c_uint = 9;
pub static AnyStretch: c_uint = 10;
pub type StyleType = c_uint;
pub static UndefinedStyle: c_uint = 0;
pub static NormalStyle: c_uint = 1;
pub static ItalicStyle: c_uint = 2;
pub static ObliqueStyle: c_uint = 3;
pub static AnyStyle: c_uint = 4;
pub struct Struct__TypeInfo {
    pub face: size_t,
    pub path: *mut c_schar,
    pub name: *mut c_schar,
    pub description: *mut c_schar,
    pub family: *mut c_schar,
    pub style: StyleType,
    pub stretch: StretchType,
    pub weight: size_t,
    pub encoding: *mut c_schar,
    pub foundry: *mut c_schar,
    pub format: *mut c_schar,
    pub metrics: *mut c_schar,
    pub glyphs: *mut c_schar,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__TypeInfo,
    pub next: *mut Struct__TypeInfo,
    pub signature: size_t,
}
pub type TypeInfo = Struct__TypeInfo;
pub type AlignType = c_uint;
pub static UndefinedAlign: c_uint = 0;
pub static LeftAlign: c_uint = 1;
pub static CenterAlign: c_uint = 2;
pub static RightAlign: c_uint = 3;
pub type ClipPathUnits = c_uint;
pub static UndefinedPathUnits: c_uint = 0;
pub static UserSpace: c_uint = 1;
pub static UserSpaceOnUse: c_uint = 2;
pub static ObjectBoundingBox: c_uint = 3;
pub type DecorationType = c_uint;
pub static UndefinedDecoration: c_uint = 0;
pub static NoDecoration: c_uint = 1;
pub static UnderlineDecoration: c_uint = 2;
pub static OverlineDecoration: c_uint = 3;
pub static LineThroughDecoration: c_uint = 4;
pub type DirectionType = c_uint;
pub static UndefinedDirection: c_uint = 0;
pub static RightToLeftDirection: c_uint = 1;
pub static LeftToRightDirection: c_uint = 2;
pub type FillRule = c_uint;
pub static UndefinedRule: c_uint = 0;
pub static EvenOddRule: c_uint = 1;
pub static NonZeroRule: c_uint = 2;
pub type GradientType = c_uint;
pub static UndefinedGradient: c_uint = 0;
pub static LinearGradient: c_uint = 1;
pub static RadialGradient: c_uint = 2;
pub type LineCap = c_uint;
pub static UndefinedCap: c_uint = 0;
pub static ButtCap: c_uint = 1;
pub static RoundCap: c_uint = 2;
pub static SquareCap: c_uint = 3;
pub type LineJoin = c_uint;
pub static UndefinedJoin: c_uint = 0;
pub static MiterJoin: c_uint = 1;
pub static RoundJoin: c_uint = 2;
pub static BevelJoin: c_uint = 3;
pub type PaintMethod = c_uint;
pub static UndefinedMethod: c_uint = 0;
pub static PointMethod: c_uint = 1;
pub static ReplaceMethod: c_uint = 2;
pub static FloodfillMethod: c_uint = 3;
pub static FillToBorderMethod: c_uint = 4;
pub static ResetMethod: c_uint = 5;
pub type PrimitiveType = c_uint;
pub static UndefinedPrimitive: c_uint = 0;
pub static PointPrimitive: c_uint = 1;
pub static LinePrimitive: c_uint = 2;
pub static RectanglePrimitive: c_uint = 3;
pub static RoundRectanglePrimitive: c_uint = 4;
pub static ArcPrimitive: c_uint = 5;
pub static EllipsePrimitive: c_uint = 6;
pub static CirclePrimitive: c_uint = 7;
pub static PolylinePrimitive: c_uint = 8;
pub static PolygonPrimitive: c_uint = 9;
pub static BezierPrimitive: c_uint = 10;
pub static ColorPrimitive: c_uint = 11;
pub static MattePrimitive: c_uint = 12;
pub static TextPrimitive: c_uint = 13;
pub static ImagePrimitive: c_uint = 14;
pub static PathPrimitive: c_uint = 15;
pub type ReferenceType = c_uint;
pub static UndefinedReference: c_uint = 0;
pub static GradientReference: c_uint = 1;
pub type SpreadMethod = c_uint;
pub static UndefinedSpread: c_uint = 0;
pub static PadSpread: c_uint = 1;
pub static ReflectSpread: c_uint = 2;
pub static RepeatSpread: c_uint = 3;
pub struct Struct__PointInfo {
    pub x: c_double,
    pub y: c_double,
}
pub type PointInfo = Struct__PointInfo;
pub struct Struct__StopInfo {
    pub color: MagickPixelPacket,
    pub offset: MagickRealType,
}
pub type StopInfo = Struct__StopInfo;
pub struct Struct__GradientInfo {
    pub _type: GradientType,
    pub bounding_box: RectangleInfo,
    pub gradient_vector: SegmentInfo,
    pub stops: *mut StopInfo,
    pub number_stops: size_t,
    pub spread: SpreadMethod,
    pub debug: MagickBooleanType,
    pub signature: size_t,
    pub center: PointInfo,
    pub radius: MagickRealType,
}
pub type GradientInfo = Struct__GradientInfo;
pub struct Struct__ElementReference {
    pub id: *mut c_schar,
    pub _type: ReferenceType,
    pub gradient: GradientInfo,
    pub signature: size_t,
    pub previous: *mut Struct__ElementReference,
    pub next: *mut Struct__ElementReference,
}
pub type ElementReference = Struct__ElementReference;
pub struct Struct__DrawInfo {
    pub primitive: *mut c_schar,
    pub geometry: *mut c_schar,
    pub viewbox: RectangleInfo,
    pub affine: AffineMatrix,
    pub gravity: GravityType,
    pub fill: PixelPacket,
    pub stroke: PixelPacket,
    pub stroke_width: c_double,
    pub gradient: GradientInfo,
    pub fill_pattern: *mut Image,
    pub tile: *mut Image,
    pub stroke_pattern: *mut Image,
    pub stroke_antialias: MagickBooleanType,
    pub text_antialias: MagickBooleanType,
    pub fill_rule: FillRule,
    pub linecap: LineCap,
    pub linejoin: LineJoin,
    pub miterlimit: size_t,
    pub dash_offset: c_double,
    pub decorate: DecorationType,
    pub compose: CompositeOperator,
    pub text: *mut c_schar,
    pub face: size_t,
    pub font: *mut c_schar,
    pub metrics: *mut c_schar,
    pub family: *mut c_schar,
    pub style: StyleType,
    pub stretch: StretchType,
    pub weight: size_t,
    pub encoding: *mut c_schar,
    pub pointsize: c_double,
    pub density: *mut c_schar,
    pub align: AlignType,
    pub undercolor: PixelPacket,
    pub border_color: PixelPacket,
    pub server_name: *mut c_schar,
    pub dash_pattern: *mut c_double,
    pub clip_mask: *mut c_schar,
    pub bounds: SegmentInfo,
    pub clip_units: ClipPathUnits,
    pub opacity: Quantum,
    pub render: MagickBooleanType,
    pub element_reference: ElementReference,
    pub debug: MagickBooleanType,
    pub signature: size_t,
    pub kerning: c_double,
    pub interword_spacing: c_double,
    pub interline_spacing: c_double,
    pub direction: DirectionType,
}
pub type DrawInfo = Struct__DrawInfo;
pub struct Struct__PrimitiveInfo {
    pub point: PointInfo,
    pub coordinates: size_t,
    pub primitive: PrimitiveType,
    pub method: PaintMethod,
    pub text: *mut c_schar,
}
pub type PrimitiveInfo = Struct__PrimitiveInfo;
pub struct Struct__TypeMetric {
    pub pixels_per_em: PointInfo,
    pub ascent: c_double,
    pub descent: c_double,
    pub width: c_double,
    pub height: c_double,
    pub max_advance: c_double,
    pub underline_position: c_double,
    pub underline_thickness: c_double,
    pub bounds: SegmentInfo,
    pub origin: PointInfo,
}
pub type TypeMetric = Struct__TypeMetric;
pub type CacheType = c_uint;
pub static UndefinedCache: c_uint = 0;
pub static MemoryCache: c_uint = 1;
pub static MapCache: c_uint = 2;
pub static DiskCache: c_uint = 3;
pub static PingCache: c_uint = 4;
pub struct Struct__CoderInfo {
    pub path: *mut c_schar,
    pub magick: *mut c_schar,
    pub name: *mut c_schar,
    pub exempt: MagickBooleanType,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__CoderInfo,
    pub next: *mut Struct__CoderInfo,
    pub signature: size_t,
}
pub type CoderInfo = Struct__CoderInfo;
pub type MetricType = c_uint;
pub static UndefinedMetric: c_uint = 0;
pub static AbsoluteErrorMetric: c_uint = 1;
pub static MeanAbsoluteErrorMetric: c_uint = 2;
pub static MeanErrorPerPixelMetric: c_uint = 3;
pub static MeanSquaredErrorMetric: c_uint = 4;
pub static PeakAbsoluteErrorMetric: c_uint = 5;
pub static PeakSignalToNoiseRatioMetric: c_uint = 6;
pub static RootMeanSquaredErrorMetric: c_uint = 7;
pub static NormalizedCrossCorrelationErrorMetric: c_uint = 8;
pub static FuzzErrorMetric: c_uint = 9;
pub struct Struct__ConfigureInfo {
    pub path: *mut c_schar,
    pub name: *mut c_schar,
    pub value: *mut c_schar,
    pub exempt: MagickBooleanType,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__ConfigureInfo,
    pub next: *mut Struct__ConfigureInfo,
    pub signature: size_t,
}
pub type ConfigureInfo = Struct__ConfigureInfo;
pub struct Struct__FrameInfo {
    pub width: size_t,
    pub height: size_t,
    pub x: ssize_t,
    pub y: ssize_t,
    pub inner_bevel: ssize_t,
    pub outer_bevel: ssize_t,
}
pub type FrameInfo = Struct__FrameInfo;
pub struct Struct__DelegateInfo {
    pub path: *mut c_schar,
    pub decode: *mut c_schar,
    pub encode: *mut c_schar,
    pub commands: *mut c_schar,
    pub mode: ssize_t,
    pub thread_support: MagickBooleanType,
    pub spawn: MagickBooleanType,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__DelegateInfo,
    pub next: *mut Struct__DelegateInfo,
    pub signature: size_t,
}
pub type DelegateInfo = Struct__DelegateInfo;
pub type DitherMethod = c_uint;
pub static UndefinedDitherMethod: c_uint = 0;
pub static NoDitherMethod: c_uint = 1;
pub static RiemersmaDitherMethod: c_uint = 2;
pub static FloydSteinbergDitherMethod: c_uint = 3;
pub struct Struct__QuantizeInfo {
    pub number_colors: size_t,
    pub tree_depth: size_t,
    pub dither: MagickBooleanType,
    pub colorspace: ColorspaceType,
    pub measure_error: MagickBooleanType,
    pub signature: size_t,
    pub dither_method: DitherMethod,
}
pub type QuantizeInfo = Struct__QuantizeInfo;
pub type RegistryType = c_uint;
pub static UndefinedRegistryType: c_uint = 0;
pub static ImageRegistryType: c_uint = 1;
pub static ImageInfoRegistryType: c_uint = 2;
pub static StringRegistryType: c_uint = 3;
pub type MagickLayerMethod = c_uint;
pub static UndefinedMagickLayerMethod: c_uint = 0;
pub type ExtendedSignedIntegralType = MagickOffsetType;
pub type ExtendedUnsignedIntegralType = MagickSizeType;
pub type ExtendedRationalType = MagickRealType;
pub type Struct__ViewInfo = c_void;
pub type ViewInfo = Struct__ViewInfo;
pub type MonitorHandler = *u8;
pub struct Struct__ImageAttribute {
    pub key: *mut c_schar,
    pub value: *mut c_schar,
    pub compression: MagickBooleanType,
    pub previous: *mut Struct__ImageAttribute,
    pub next: *mut Struct__ImageAttribute,
}
pub type ImageAttribute = Struct__ImageAttribute;
pub type DistortImageMethod = c_uint;
pub static UndefinedDistortion: c_uint = 0;
pub static AffineDistortion: c_uint = 1;
pub static AffineProjectionDistortion: c_uint = 2;
pub static ScaleRotateTranslateDistortion: c_uint = 3;
pub static PerspectiveDistortion: c_uint = 4;
pub static PerspectiveProjectionDistortion: c_uint = 5;
pub static BilinearForwardDistortion: c_uint = 6;
pub static BilinearDistortion: c_uint = 6;
pub static BilinearReverseDistortion: c_uint = 7;
pub static PolynomialDistortion: c_uint = 8;
pub static ArcDistortion: c_uint = 9;
pub static PolarDistortion: c_uint = 10;
pub static DePolarDistortion: c_uint = 11;
pub static Cylinder2PlaneDistortion: c_uint = 12;
pub static Plane2CylinderDistortion: c_uint = 13;
pub static BarrelDistortion: c_uint = 14;
pub static BarrelInverseDistortion: c_uint = 15;
pub static ShepardsDistortion: c_uint = 16;
pub static ResizeDistortion: c_uint = 17;
pub static SentinelDistortion: c_uint = 18;
pub type SparseColorMethod = c_uint;
pub static UndefinedColorInterpolate: c_uint = 0;
pub static BarycentricColorInterpolate: c_uint = 1;
pub static BilinearColorInterpolate: c_uint = 7;
pub static PolynomialColorInterpolate: c_uint = 8;
pub static ShepardsColorInterpolate: c_uint = 16;
pub static VoronoiColorInterpolate: c_uint = 18;
pub static InverseColorInterpolate: c_uint = 19;
pub struct Struct__ChannelFeatures {
    pub angular_second_moment: [c_double, ..4u],
    pub contrast: [c_double, ..4u],
    pub correlation: [c_double, ..4u],
    pub variance_sum_of_squares: [c_double, ..4u],
    pub inverse_difference_moment: [c_double, ..4u],
    pub sum_average: [c_double, ..4u],
    pub sum_variance: [c_double, ..4u],
    pub sum_entropy: [c_double, ..4u],
    pub entropy: [c_double, ..4u],
    pub difference_variance: [c_double, ..4u],
    pub difference_entropy: [c_double, ..4u],
    pub measure_of_correlation_1: [c_double, ..4u],
    pub measure_of_correlation_2: [c_double, ..4u],
    pub maximum_correlation_coefficient: [c_double, ..4u],
}
pub type ChannelFeatures = Struct__ChannelFeatures;
pub type NoiseType = c_uint;
pub static UndefinedNoise: c_uint = 0;
pub static UniformNoise: c_uint = 1;
pub static GaussianNoise: c_uint = 2;
pub static MultiplicativeGaussianNoise: c_uint = 3;
pub static ImpulseNoise: c_uint = 4;
pub static LaplacianNoise: c_uint = 5;
pub static PoissonNoise: c_uint = 6;
pub static RandomNoise: c_uint = 7;
pub type Struct__RandomInfo = c_void;
pub type RandomInfo = Struct__RandomInfo;
pub struct Struct__ColorPacket {
    pub pixel: PixelPacket,
    pub index: IndexPacket,
    pub count: MagickSizeType,
}
pub type ColorPacket = Struct__ColorPacket;
pub type Struct__ImageView = c_void;
pub type ImageView = Struct__ImageView;
pub type DuplexTransferImageViewMethod = *u8;
pub type GetImageViewMethod = *u8;
pub type SetImageViewMethod = *u8;
pub type TransferImageViewMethod = *u8;
pub type UpdateImageViewMethod = *u8;
pub type LogEventType = c_uint;
pub static UndefinedEvents: c_uint = 0;
pub static NoEvents: c_uint = 0;
pub static TraceEvent: c_uint = 1;
pub static AnnotateEvent: c_uint = 2;
pub static BlobEvent: c_uint = 4;
pub static CacheEvent: c_uint = 8;
pub static CoderEvent: c_uint = 16;
pub static ConfigureEvent: c_uint = 32;
pub static DeprecateEvent: c_uint = 64;
pub static DrawEvent: c_uint = 128;
pub static ExceptionEvent: c_uint = 256;
pub static ImageEvent: c_uint = 512;
pub static LocaleEvent: c_uint = 1024;
pub static ModuleEvent: c_uint = 2048;
pub static PolicyEvent: c_uint = 4096;
pub static ResourceEvent: c_uint = 8192;
pub static TransformEvent: c_uint = 16384;
pub static UserEvent: c_uint = 36864;
pub static WandEvent: c_uint = 65536;
pub static X11Event: c_uint = 131072;
pub static AccelerateEvent: c_uint = 262144;
pub static AllEvents: c_uint = 2147483647;
pub type Struct__LogInfo = c_void;
pub type LogInfo = Struct__LogInfo;
pub struct Struct__MagicInfo {
    pub path: *mut c_schar,
    pub name: *mut c_schar,
    pub target: *mut c_schar,
    pub magic: *mut c_uchar,
    pub length: size_t,
    pub offset: MagickOffsetType,
    pub exempt: MagickBooleanType,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__MagicInfo,
    pub next: *mut Struct__MagicInfo,
    pub signature: size_t,
}
pub type MagicInfo = Struct__MagicInfo;
pub type MagickFormatType = c_uint;
pub static UndefinedFormatType: c_uint = 0;
pub static ImplicitFormatType: c_uint = 1;
pub static ExplicitFormatType: c_uint = 2;
pub type MagickThreadSupport = c_uint;
pub static NoThreadSupport: c_uint = 0;
pub static DecoderThreadSupport: c_uint = 1;
pub static EncoderThreadSupport: c_uint = 2;
pub type DecodeImageHandler = c_void;
pub type EncodeImageHandler = c_void;
pub type IsImageFormatHandler = c_void;
pub struct Struct__MagickInfo {
    pub name: *mut c_schar,
    pub description: *mut c_schar,
    pub version: *mut c_schar,
    pub note: *mut c_schar,
    pub module: *mut c_schar,
    pub image_info: *mut ImageInfo,
    pub decoder: *mut *u8,
    pub encoder: *mut *u8,
    pub magick: *mut *u8,
    pub client_data: *mut c_void,
    pub adjoin: MagickBooleanType,
    pub raw: MagickBooleanType,
    pub endian_support: MagickBooleanType,
    pub blob_support: MagickBooleanType,
    pub seekable_stream: MagickBooleanType,
    pub format_type: MagickFormatType,
    pub thread_support: MagickStatusType,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__MagickInfo,
    pub next: *mut Struct__MagickInfo,
    pub signature: size_t,
}
pub type MagickInfo = Struct__MagickInfo;
pub type AcquireMemoryHandler = *u8;
pub type DestroyMemoryHandler = *u8;
pub type ResizeMemoryHandler = *u8;
pub type MagickModuleType = c_uint;
pub static MagickImageCoderModule: c_uint = 0;
pub static MagickImageFilterModule: c_uint = 1;
pub struct Struct__ModuleInfo {
    pub path: *mut c_schar,
    pub tag: *mut c_schar,
    pub handle: *mut c_void,
    pub unregister_module: *u8,
    pub register_module: *u8,
    pub timestamp: time_t,
    pub stealth: MagickBooleanType,
    pub previous: *mut Struct__ModuleInfo,
    pub next: *mut Struct__ModuleInfo,
    pub signature: size_t,
}
pub type ModuleInfo = Struct__ModuleInfo;
pub type ImageFilterHandler = c_void;
pub type Struct__MimeInfo = c_void;
pub type MimeInfo = Struct__MimeInfo;
pub type MontageMode = c_uint;
pub static UndefinedMode: c_uint = 0;
pub static FrameMode: c_uint = 1;
pub static UnframeMode: c_uint = 2;
pub static ConcatenateMode: c_uint = 3;
pub struct Struct__MontageInfo {
    pub geometry: *mut c_schar,
    pub tile: *mut c_schar,
    pub title: *mut c_schar,
    pub frame: *mut c_schar,
    pub texture: *mut c_schar,
    pub font: *mut c_schar,
    pub pointsize: c_double,
    pub border_width: size_t,
    pub shadow: MagickBooleanType,
    pub fill: PixelPacket,
    pub stroke: PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub gravity: GravityType,
    pub filename: [c_schar, ..4096u],
    pub debug: MagickBooleanType,
    pub signature: size_t,
}
pub type MontageInfo = Struct__MontageInfo;
pub type CommandOption = c_int;
pub static MagickUndefinedOptions: c_int = -1;
pub static MagickAlignOptions: c_int = 0;
pub static MagickAlphaOptions: c_int = 1;
pub static MagickBooleanOptions: c_int = 2;
pub static MagickChannelOptions: c_int = 3;
pub static MagickClassOptions: c_int = 4;
pub static MagickClipPathOptions: c_int = 5;
pub static MagickCoderOptions: c_int = 6;
pub static MagickColorOptions: c_int = 7;
pub static MagickColorspaceOptions: c_int = 8;
pub static MagickCommandOptions: c_int = 9;
pub static MagickComposeOptions: c_int = 10;
pub static MagickCompressOptions: c_int = 11;
pub static MagickConfigureOptions: c_int = 12;
pub static MagickDataTypeOptions: c_int = 13;
pub static MagickDebugOptions: c_int = 14;
pub static MagickDecorateOptions: c_int = 15;
pub static MagickDelegateOptions: c_int = 16;
pub static MagickDirectionOptions: c_int = 17;
pub static MagickDisposeOptions: c_int = 18;
pub static MagickDistortOptions: c_int = 19;
pub static MagickDitherOptions: c_int = 20;
pub static MagickEndianOptions: c_int = 21;
pub static MagickEvaluateOptions: c_int = 22;
pub static MagickFillRuleOptions: c_int = 23;
pub static MagickFilterOptions: c_int = 24;
pub static MagickFontOptions: c_int = 25;
pub static MagickFontsOptions: c_int = 26;
pub static MagickFormatOptions: c_int = 27;
pub static MagickFunctionOptions: c_int = 28;
pub static MagickGravityOptions: c_int = 29;
pub static MagickIntentOptions: c_int = 30;
pub static MagickInterlaceOptions: c_int = 31;
pub static MagickInterpolateOptions: c_int = 32;
pub static MagickKernelOptions: c_int = 33;
pub static MagickLayerOptions: c_int = 34;
pub static MagickLineCapOptions: c_int = 35;
pub static MagickLineJoinOptions: c_int = 36;
pub static MagickListOptions: c_int = 37;
pub static MagickLocaleOptions: c_int = 38;
pub static MagickLogEventOptions: c_int = 39;
pub static MagickLogOptions: c_int = 40;
pub static MagickMagicOptions: c_int = 41;
pub static MagickMethodOptions: c_int = 42;
pub static MagickMetricOptions: c_int = 43;
pub static MagickMimeOptions: c_int = 44;
pub static MagickModeOptions: c_int = 45;
pub static MagickModuleOptions: c_int = 46;
pub static MagickMorphologyOptions: c_int = 47;
pub static MagickNoiseOptions: c_int = 48;
pub static MagickOrientationOptions: c_int = 49;
pub static MagickPolicyOptions: c_int = 50;
pub static MagickPolicyDomainOptions: c_int = 51;
pub static MagickPolicyRightsOptions: c_int = 52;
pub static MagickPreviewOptions: c_int = 53;
pub static MagickPrimitiveOptions: c_int = 54;
pub static MagickQuantumFormatOptions: c_int = 55;
pub static MagickResolutionOptions: c_int = 56;
pub static MagickResourceOptions: c_int = 57;
pub static MagickSparseColorOptions: c_int = 58;
pub static MagickStatisticOptions: c_int = 59;
pub static MagickStorageOptions: c_int = 60;
pub static MagickStretchOptions: c_int = 61;
pub static MagickStyleOptions: c_int = 62;
pub static MagickThresholdOptions: c_int = 63;
pub static MagickTypeOptions: c_int = 64;
pub static MagickValidateOptions: c_int = 65;
pub static MagickVirtualPixelOptions: c_int = 66;
pub type ValidateType = c_uint;
pub static UndefinedValidate: c_uint = 0;
pub static NoValidate: c_uint = 0;
pub static CompareValidate: c_uint = 1;
pub static CompositeValidate: c_uint = 2;
pub static ConvertValidate: c_uint = 4;
pub static FormatsInMemoryValidate: c_uint = 8;
pub static FormatsOnDiskValidate: c_uint = 16;
pub static IdentifyValidate: c_uint = 32;
pub static ImportExportValidate: c_uint = 64;
pub static MontageValidate: c_uint = 128;
pub static StreamValidate: c_uint = 256;
pub static AllValidate: c_uint = 2147483647;
pub struct Struct__OptionInfo {
    pub mnemonic: *c_schar,
    pub _type: ssize_t,
    pub flags: ssize_t,
    pub stealth: MagickBooleanType,
}
pub type OptionInfo = Struct__OptionInfo;
pub type CommandOptionFlags = c_uint;
pub static UndefinedOptionFlag: c_uint = 0;
pub static FireOptionFlag: c_uint = 1;
pub static ImageInfoOptionFlag: c_uint = 2;
pub static DrawInfoOptionFlag: c_uint = 4;
pub static QuantizeInfoOptionFlag: c_uint = 8;
pub static GlobalOptionFlag: c_uint = 16;
pub static SimpleOperatorOptionFlag: c_uint = 256;
pub static ListOperatorOptionFlag: c_uint = 512;
pub static SpecialOperatorOptionFlag: c_uint = 1024;
pub static GenesisOptionFlag: c_uint = 1024;
pub static NonConvertOptionFlag: c_uint = 16384;
pub static DeprecateOptionFlag: c_uint = 32768;
pub type PolicyDomain = c_uint;
pub static UndefinedPolicyDomain: c_uint = 0;
pub static CoderPolicyDomain: c_uint = 1;
pub static DelegatePolicyDomain: c_uint = 2;
pub static FilterPolicyDomain: c_uint = 3;
pub static PathPolicyDomain: c_uint = 4;
pub static ResourcePolicyDomain: c_uint = 5;
pub static SystemPolicyDomain: c_uint = 6;
pub type PolicyRights = c_uint;
pub static UndefinedPolicyRights: c_uint = 0;
pub static NoPolicyRights: c_uint = 0;
pub static ReadPolicyRights: c_uint = 1;
pub static WritePolicyRights: c_uint = 2;
pub static ExecutePolicyRights: c_uint = 4;
pub type Struct__PolicyInfo = c_void;
pub type PolicyInfo = Struct__PolicyInfo;
pub type ResourceType = c_uint;
pub static UndefinedResource: c_uint = 0;
pub static AreaResource: c_uint = 1;
pub static DiskResource: c_uint = 2;
pub static FileResource: c_uint = 3;
pub static MapResource: c_uint = 4;
pub static MemoryResource: c_uint = 5;
pub static ThreadResource: c_uint = 6;
pub static TimeResource: c_uint = 7;
pub static ThrottleResource: c_uint = 8;
pub type Struct__SplayTreeInfo = c_void;
pub type SplayTreeInfo = Struct__SplayTreeInfo;
pub struct Struct__ChannelStatistics {
    pub depth: size_t,
    pub minima: c_double,
    pub maxima: c_double,
    pub sum: c_double,
    pub sum_squared: c_double,
    pub sum_cubed: c_double,
    pub sum_fourth_power: c_double,
    pub mean: c_double,
    pub variance: c_double,
    pub standard_deviation: c_double,
    pub kurtosis: c_double,
    pub skewness: c_double,
}
pub type ChannelStatistics = Struct__ChannelStatistics;
pub type MagickEvaluateOperator = c_uint;
pub static UndefinedEvaluateOperator: c_uint = 0;
pub static AddEvaluateOperator: c_uint = 1;
pub static AndEvaluateOperator: c_uint = 2;
pub static DivideEvaluateOperator: c_uint = 3;
pub static LeftShiftEvaluateOperator: c_uint = 4;
pub static MaxEvaluateOperator: c_uint = 5;
pub static MinEvaluateOperator: c_uint = 6;
pub static MultiplyEvaluateOperator: c_uint = 7;
pub static OrEvaluateOperator: c_uint = 8;
pub static RightShiftEvaluateOperator: c_uint = 9;
pub static SetEvaluateOperator: c_uint = 10;
pub static SubtractEvaluateOperator: c_uint = 11;
pub static XorEvaluateOperator: c_uint = 12;
pub static PowEvaluateOperator: c_uint = 13;
pub static LogEvaluateOperator: c_uint = 14;
pub static ThresholdEvaluateOperator: c_uint = 15;
pub static ThresholdBlackEvaluateOperator: c_uint = 16;
pub static ThresholdWhiteEvaluateOperator: c_uint = 17;
pub static GaussianNoiseEvaluateOperator: c_uint = 18;
pub static ImpulseNoiseEvaluateOperator: c_uint = 19;
pub static LaplacianNoiseEvaluateOperator: c_uint = 20;
pub static MultiplicativeNoiseEvaluateOperator: c_uint = 21;
pub static PoissonNoiseEvaluateOperator: c_uint = 22;
pub static UniformNoiseEvaluateOperator: c_uint = 23;
pub static CosineEvaluateOperator: c_uint = 24;
pub static SineEvaluateOperator: c_uint = 25;
pub static AddModulusEvaluateOperator: c_uint = 26;
pub static MeanEvaluateOperator: c_uint = 27;
pub static AbsEvaluateOperator: c_uint = 28;
pub static ExponentialEvaluateOperator: c_uint = 29;
pub static MedianEvaluateOperator: c_uint = 30;
pub static SumEvaluateOperator: c_uint = 31;
pub type MagickFunction = c_uint;
pub static UndefinedFunction: c_uint = 0;
pub static PolynomialFunction: c_uint = 1;
pub static SinusoidFunction: c_uint = 2;
pub static ArcsinFunction: c_uint = 3;
pub static ArctanFunction: c_uint = 4;
pub type StatisticType = c_uint;
pub static UndefinedStatistic: c_uint = 0;
pub static GradientStatistic: c_uint = 1;
pub static MaximumStatistic: c_uint = 2;
pub static MeanStatistic: c_uint = 3;
pub static MedianStatistic: c_uint = 4;
pub static MinimumStatistic: c_uint = 5;
pub static ModeStatistic: c_uint = 6;
pub static NonpeakStatistic: c_uint = 7;
pub static StandardDeviationStatistic: c_uint = 8;
pub type Struct__TokenInfo = c_void;
pub type TokenInfo = Struct__TokenInfo;
pub type Struct__ThresholdMap = c_void;
pub type ThresholdMap = Struct__ThresholdMap;
pub type PathType = c_uint;
pub static UndefinedPath: c_uint = 0;
pub static MagickPath: c_uint = 1;
pub static RootPath: c_uint = 2;
pub static HeadPath: c_uint = 3;
pub static TailPath: c_uint = 4;
pub static BasePath: c_uint = 5;
pub static ExtensionPath: c_uint = 6;
pub static SubimagePath: c_uint = 7;
pub static CanonicalPath: c_uint = 8;
pub type Struct__XMLTreeInfo = c_void;
pub type XMLTreeInfo = Struct__XMLTreeInfo;
pub struct Struct__XImportInfo {
    pub frame: MagickBooleanType,
    pub borders: MagickBooleanType,
    pub screen: MagickBooleanType,
    pub descend: MagickBooleanType,
    pub silent: MagickBooleanType,
}
pub type XImportInfo = Struct__XImportInfo;
pub type Struct__PixelWand = c_void;
pub type PixelWand = Struct__PixelWand;
pub type Struct__DrawingWand = c_void;
pub type DrawingWand = Struct__DrawingWand;
pub type Struct__PixelIterator = c_void;
pub type PixelIterator = Struct__PixelIterator;
pub type DrawContext = *mut Struct__DrawingWand;
pub type Struct__PixelView = c_void;
pub type PixelView = Struct__PixelView;
pub type DuplexTransferPixelViewMethod = *u8;
pub type GetPixelViewMethod = *u8;
pub type SetPixelViewMethod = *u8;
pub type TransferPixelViewMethod = *u8;
pub type UpdatePixelViewMethod = *u8;
pub type MagickCommand = *u8;
pub type Struct__WandView = c_void;
pub type WandView = Struct__WandView;
pub type DuplexTransferWandViewMethod = *u8;
pub type GetWandViewMethod = *u8;
pub type SetWandViewMethod = *u8;
pub type TransferWandViewMethod = *u8;
pub type UpdateWandViewMethod = *u8;

#[link_args = "-lMagickWand-Q16 -lMagickCore-Q16"]
extern "C" {
    fn GetPageGeometry(arg1: *c_schar) -> *mut c_schar;
    fn IsGeometry(arg1: *c_schar) -> MagickBooleanType;
    fn IsSceneGeometry(arg1: *c_schar, arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn GetGeometry(arg1: *c_schar, arg2: *mut ssize_t, arg3: *mut ssize_t,
                   arg4: *mut size_t, arg5: *mut size_t) -> MagickStatusType;
    fn ParseAbsoluteGeometry(arg1: *c_schar, arg2: *mut RectangleInfo) ->
     MagickStatusType;
    fn ParseAffineGeometry(arg1: *c_schar, arg2: *mut AffineMatrix,
                           arg3: *mut ExceptionInfo) -> MagickStatusType;
    fn ParseGeometry(arg1: *c_schar, arg2: *mut GeometryInfo) ->
     MagickStatusType;
    fn ParseGravityGeometry(arg1: *Image, arg2: *c_schar,
                            arg3: *mut RectangleInfo,
                            arg4: *mut ExceptionInfo) -> MagickStatusType;
    fn ParseMetaGeometry(arg1: *c_schar, arg2: *mut ssize_t,
                         arg3: *mut ssize_t, arg4: *mut size_t,
                         arg5: *mut size_t) -> MagickStatusType;
    fn ParsePageGeometry(arg1: *Image, arg2: *c_schar,
                         arg3: *mut RectangleInfo, arg4: *mut ExceptionInfo)
     -> MagickStatusType;
    fn ParseRegionGeometry(arg1: *Image, arg2: *c_schar,
                           arg3: *mut RectangleInfo, arg4: *mut ExceptionInfo)
     -> MagickStatusType;
    fn GravityAdjustGeometry(arg1: size_t, arg2: size_t, arg3: GravityType,
                             arg4: *mut RectangleInfo);
    fn SetGeometry(arg1: *Image, arg2: *mut RectangleInfo);
    fn SetGeometryInfo(arg1: *mut GeometryInfo);
    fn AcquireKernelInfo(arg1: *c_schar) -> *mut KernelInfo;
    fn AcquireKernelBuiltIn(arg1: KernelInfoType, arg2: *GeometryInfo) ->
     *mut KernelInfo;
    fn CloneKernelInfo(arg1: *KernelInfo) -> *mut KernelInfo;
    fn DestroyKernelInfo(arg1: *mut KernelInfo) -> *mut KernelInfo;
    fn MorphologyImage(arg1: *Image, arg2: MorphologyMethod, arg3: ssize_t,
                       arg4: *KernelInfo, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn MorphologyImageChannel(arg1: *Image, arg2: ChannelType,
                              arg3: MorphologyMethod, arg4: ssize_t,
                              arg5: *KernelInfo, arg6: *mut ExceptionInfo) ->
     *mut Image;
    fn ScaleGeometryKernelInfo(arg1: *mut KernelInfo, arg2: *c_schar);
    fn ShowKernelInfo(arg1: *KernelInfo);
    fn AccelerateConvolveImage(arg1: *Image, arg2: *KernelInfo,
                               arg3: *mut Image, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn AnimateImages(arg1: *ImageInfo, arg2: *mut Image) -> MagickBooleanType;
    fn RGBTransformImage(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    fn SetImageColorspace(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    fn TransformImageColorspace(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    fn TransformRGBImage(arg1: *mut Image, arg2: ColorspaceType) ->
     MagickBooleanType;
    fn ConstituteImage(arg1: size_t, arg2: size_t, arg3: *c_schar,
                       arg4: StorageType, arg5: *c_void,
                       arg6: *mut ExceptionInfo) -> *mut Image;
    fn PingImage(arg1: *ImageInfo, arg2: *mut ExceptionInfo) -> *mut Image;
    fn PingImages(arg1: *ImageInfo, arg2: *mut ExceptionInfo) -> *mut Image;
    fn ReadImage(arg1: *ImageInfo, arg2: *mut ExceptionInfo) -> *mut Image;
    fn ReadImages(arg1: *ImageInfo, arg2: *mut ExceptionInfo) -> *mut Image;
    fn ReadInlineImage(arg1: *ImageInfo, arg2: *c_schar,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    fn ConstituteComponentGenesis() -> MagickBooleanType;
    fn WriteImage(arg1: *ImageInfo, arg2: *mut Image) -> MagickBooleanType;
    fn WriteImages(arg1: *ImageInfo, arg2: *mut Image, arg3: *c_schar,
                   arg4: *mut ExceptionInfo) -> MagickBooleanType;
    fn ConstituteComponentTerminus();
    fn ExportImagePixels(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                         arg4: size_t, arg5: size_t, arg6: *c_schar,
                         arg7: StorageType, arg8: *mut c_void,
                         arg9: *mut ExceptionInfo) -> MagickBooleanType;
    fn ImportImagePixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                         arg4: size_t, arg5: size_t, arg6: *c_schar,
                         arg7: StorageType, arg8: *c_void) ->
     MagickBooleanType;
    fn InterpolateMagickPixelPacket(arg1: *Image, arg2: *CacheView_,
                                    arg3: InterpolatePixelMethod,
                                    arg4: c_double, arg5: c_double,
                                    arg6: *mut MagickPixelPacket,
                                    arg7: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn CloneMagickPixelPacket(arg1: *MagickPixelPacket) ->
     *mut MagickPixelPacket;
    fn GetMagickPixelPacket(arg1: *Image, arg2: *mut MagickPixelPacket);
    fn SemaphoreComponentGenesis() -> MagickBooleanType;
    fn AllocateSemaphoreInfo() -> *mut SemaphoreInfo;
    fn AcquireSemaphoreInfo(arg1: *mut *mut SemaphoreInfo);
    fn DestroySemaphoreInfo(arg1: *mut *mut SemaphoreInfo);
    fn LockSemaphoreInfo(arg1: *mut SemaphoreInfo);
    fn RelinquishSemaphoreInfo(arg1: *mut SemaphoreInfo);
    fn SemaphoreComponentTerminus();
    fn UnlockSemaphoreInfo(arg1: *mut SemaphoreInfo);
    fn GetExceptionMessage(arg1: c_int) -> *mut c_schar;
    fn GetLocaleExceptionMessage(arg1: ExceptionType, arg2: *c_schar) ->
     *c_schar;
    fn SetErrorHandler(arg1: ErrorHandler) -> ErrorHandler;
    fn AcquireExceptionInfo() -> *mut ExceptionInfo;
    fn DestroyExceptionInfo(arg1: *mut ExceptionInfo) -> *mut ExceptionInfo;
    fn SetFatalErrorHandler(arg1: FatalErrorHandler) -> FatalErrorHandler;
    fn ThrowException(arg1: *mut ExceptionInfo, arg2: ExceptionType,
                      arg3: *c_schar, arg4: *c_schar) -> MagickBooleanType;
    fn ThrowMagickException(arg1: *mut ExceptionInfo, arg2: *c_schar,
                            arg3: *c_schar, arg4: size_t, arg5: ExceptionType,
                            arg6: *c_schar, arg7: *c_schar) ->
     MagickBooleanType;
    /* TODO: Handle the __va_list_tag type
    fn ThrowMagickExceptionList(arg1: *mut ExceptionInfo, arg2: *c_schar,
                                arg3: *c_schar, arg4: size_t,
                                arg5: ExceptionType, arg6: *c_schar,
                                arg7: *c_schar, arg8: *mut __va_list_tag) ->
     MagickBooleanType;
    */
    fn CatchException(arg1: *mut ExceptionInfo);
    fn ClearMagickException(arg1: *mut ExceptionInfo);
    fn GetExceptionInfo(arg1: *mut ExceptionInfo);
    fn InheritException(arg1: *mut ExceptionInfo, arg2: *ExceptionInfo);
    fn MagickError(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
    fn MagickFatalError(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
    fn MagickWarning(arg1: ExceptionType, arg2: *c_schar, arg3: *c_schar);
    fn SetWarningHandler(arg1: WarningHandler) -> WarningHandler;
    fn GetColorList(arg1: *c_schar, arg2: *mut size_t,
                    arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetColorInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) -> *ColorInfo;
    fn GetColorInfoList(arg1: *c_schar, arg2: *mut size_t,
                        arg3: *mut ExceptionInfo) -> *mut *ColorInfo;
    fn ColorComponentGenesis() -> MagickBooleanType;
    fn IsColorSimilar(arg1: *Image, arg2: *PixelPacket, arg3: *PixelPacket) ->
     MagickBooleanType;
    fn IsGrayImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn IsImageSimilar(arg1: *Image, arg2: *Image, x: *mut ssize_t,
                      y: *mut ssize_t, arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn IsMagickColorSimilar(arg1: *MagickPixelPacket,
                            arg2: *MagickPixelPacket) -> MagickBooleanType;
    fn IsMonochromeImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn IsOpacitySimilar(arg1: *Image, arg2: *PixelPacket, arg3: *PixelPacket)
     -> MagickBooleanType;
    fn IsOpaqueImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ListColorInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn QueryColorCompliance(arg1: *c_schar, arg2: ComplianceType,
                            arg3: *mut PixelPacket, arg4: *mut ExceptionInfo)
     -> MagickBooleanType;
    fn QueryColorDatabase(arg1: *c_schar, arg2: *mut PixelPacket,
                          arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn QueryColorname(arg1: *Image, arg2: *PixelPacket, arg3: ComplianceType,
                      arg4: *mut c_schar, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn QueryMagickColorCompliance(arg1: *c_schar, arg2: ComplianceType,
                                  arg3: *mut MagickPixelPacket,
                                  arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn QueryMagickColor(arg1: *c_schar, arg2: *mut MagickPixelPacket,
                        arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn QueryMagickColorname(arg1: *Image, arg2: *MagickPixelPacket,
                            arg3: ComplianceType, arg4: *mut c_schar,
                            arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn ColorComponentTerminus();
    fn ConcatenateColorComponent(arg1: *MagickPixelPacket, arg2: ChannelType,
                                 arg3: ComplianceType, arg4: *mut c_schar);
    fn GetColorTuple(arg1: *MagickPixelPacket, arg2: MagickBooleanType,
                     arg3: *mut c_schar);
    fn ReadStream(arg1: *ImageInfo, arg2: StreamHandler,
                  arg3: *mut ExceptionInfo) -> *mut Image;
    fn WriteStream(arg1: *ImageInfo, arg2: *mut Image, arg3: StreamHandler) ->
     MagickBooleanType;
    fn GetBlobFileHandle(arg1: *Image) -> *mut FILE;
    fn BlobToImage(arg1: *ImageInfo, arg2: *c_void, arg3: size_t,
                   arg4: *mut ExceptionInfo) -> *mut Image;
    fn PingBlob(arg1: *ImageInfo, arg2: *c_void, arg3: size_t,
                arg4: *mut ExceptionInfo) -> *mut Image;
    fn BlobToFile(arg1: *mut c_schar, arg2: *c_void, arg3: size_t,
                  arg4: *mut ExceptionInfo) -> MagickBooleanType;
    fn FileToImage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    fn GetBlobError(arg1: *Image) -> MagickBooleanType;
    fn ImageToFile(arg1: *mut Image, arg2: *mut c_schar,
                   arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn InjectImageBlob(arg1: *ImageInfo, arg2: *mut Image, arg3: *mut Image,
                       arg4: *c_schar, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn IsBlobExempt(arg1: *Image) -> MagickBooleanType;
    fn IsBlobSeekable(arg1: *Image) -> MagickBooleanType;
    fn IsBlobTemporary(arg1: *Image) -> MagickBooleanType;
    fn GetBlobSize(arg1: *Image) -> MagickSizeType;
    fn GetBlobStreamHandler(arg1: *Image) -> StreamHandler;
    fn FileToBlob(arg1: *c_schar, arg2: size_t, arg3: *mut size_t,
                  arg4: *mut ExceptionInfo) -> *mut c_uchar;
    fn GetBlobStreamData(arg1: *Image) -> *mut c_uchar;
    fn ImageToBlob(arg1: *ImageInfo, arg2: *mut Image, arg3: *mut size_t,
                   arg4: *mut ExceptionInfo) -> *mut c_uchar;
    fn ImagesToBlob(arg1: *ImageInfo, arg2: *mut Image, arg3: *mut size_t,
                    arg4: *mut ExceptionInfo) -> *mut c_uchar;
    fn DestroyBlob(arg1: *mut Image);
    fn DuplicateBlob(arg1: *mut Image, arg2: *Image);
    fn SetBlobExempt(arg1: *mut Image, arg2: MagickBooleanType);
    fn AcquireAuthenticCacheView(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut CacheView;
    fn AcquireCacheView(arg1: *Image) -> *mut CacheView;
    fn AcquireVirtualCacheView(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut CacheView;
    fn CloneCacheView(arg1: *CacheView) -> *mut CacheView;
    fn DestroyCacheView(arg1: *mut CacheView) -> *mut CacheView;
    fn GetCacheViewStorageClass(arg1: *CacheView) -> ClassType;
    fn GetCacheViewColorspace(arg1: *CacheView) -> ColorspaceType;
    fn GetCacheViewVirtualIndexQueue(arg1: *CacheView) -> *IndexPacket;
    fn GetCacheViewVirtualPixels(arg1: *CacheView, arg2: ssize_t,
                                 arg3: ssize_t, arg4: size_t, arg5: size_t,
                                 arg6: *mut ExceptionInfo) -> *PixelPacket;
    fn GetCacheViewVirtualPixelQueue(arg1: *CacheView) -> *PixelPacket;
    fn GetCacheViewException(arg1: *CacheView) -> *mut ExceptionInfo;
    fn GetCacheViewAuthenticIndexQueue(arg1: *mut CacheView) ->
     *mut IndexPacket;
    fn GetOneCacheViewVirtualPixel(arg1: *CacheView, arg2: ssize_t,
                                   arg3: ssize_t, arg4: *mut PixelPacket,
                                   arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetOneCacheViewVirtualMethodPixel(arg1: *CacheView,
                                         arg2: VirtualPixelMethod,
                                         arg3: ssize_t, arg4: ssize_t,
                                         arg5: *mut PixelPacket,
                                         arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetOneCacheViewAuthenticPixel(arg1: *CacheView, arg2: ssize_t,
                                     arg3: ssize_t, arg4: *mut PixelPacket,
                                     arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn SetCacheViewStorageClass(arg1: *mut CacheView, arg2: ClassType) ->
     MagickBooleanType;
    fn SetCacheViewVirtualPixelMethod(arg1: *mut CacheView,
                                      arg2: VirtualPixelMethod) ->
     MagickBooleanType;
    fn SyncCacheViewAuthenticPixels(arg1: *mut CacheView,
                                    arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetCacheViewExtent(arg1: *CacheView) -> MagickSizeType;
    fn GetCacheViewChannels(arg1: *CacheView) -> size_t;
    fn GetCacheViewAuthenticPixelQueue(arg1: *mut CacheView) ->
     *mut PixelPacket;
    fn GetCacheViewAuthenticPixels(arg1: *mut CacheView, arg2: ssize_t,
                                   arg3: ssize_t, arg4: size_t, arg5: size_t,
                                   arg6: *mut ExceptionInfo) ->
     *mut PixelPacket;
    fn QueueCacheViewAuthenticPixels(arg1: *mut CacheView, arg2: ssize_t,
                                     arg3: ssize_t, arg4: size_t,
                                     arg5: size_t, arg6: *mut ExceptionInfo)
     -> *mut PixelPacket;
    fn CompositeImage(arg1: *mut Image, arg2: CompositeOperator, arg3: *Image,
                      arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    fn CompositeImageChannel(arg1: *mut Image, arg2: ChannelType,
                             arg3: CompositeOperator, arg4: *Image,
                             arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    fn TextureImage(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    fn HuffmanDecodeImage(arg1: *mut Image) -> MagickBooleanType;
    fn HuffmanEncodeImage(arg1: *ImageInfo, arg2: *mut Image,
                          arg3: *mut Image) -> MagickBooleanType;
    fn LZWEncodeImage(arg1: *mut Image, arg2: size_t, arg3: *mut c_uchar) ->
     MagickBooleanType;
    fn PackbitsEncodeImage(arg1: *mut Image, arg2: size_t, arg3: *mut c_uchar)
     -> MagickBooleanType;
    fn ZLIBEncodeImage(arg1: *mut Image, arg2: size_t, arg3: *mut c_uchar) ->
     MagickBooleanType;
    fn Ascii85Encode(arg1: *mut Image, arg2: c_uchar);
    fn Ascii85Flush(arg1: *mut Image);
    fn Ascii85Initialize(arg1: *mut Image);
    fn AdaptiveBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                         arg4: *mut ExceptionInfo) -> *mut Image;
    fn AdaptiveBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                arg3: c_double, arg4: c_double,
                                arg5: *mut ExceptionInfo) -> *mut Image;
    fn AdaptiveSharpenImage(arg1: *Image, arg2: c_double, arg3: c_double,
                            arg4: *mut ExceptionInfo) -> *mut Image;
    fn AdaptiveSharpenImageChannel(arg1: *Image, arg2: ChannelType,
                                   arg3: c_double, arg4: c_double,
                                   arg5: *mut ExceptionInfo) -> *mut Image;
    fn BlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                 arg4: *mut ExceptionInfo) -> *mut Image;
    fn BlurImageChannel(arg1: *Image, arg2: ChannelType, arg3: c_double,
                        arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn ConvolveImage(arg1: *Image, arg2: size_t, arg3: *c_double,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    fn ConvolveImageChannel(arg1: *Image, arg2: ChannelType, arg3: size_t,
                            arg4: *c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn DespeckleImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn EdgeImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn EmbossImage(arg1: *Image, arg2: c_double, arg3: c_double,
                   arg4: *mut ExceptionInfo) -> *mut Image;
    fn FilterImage(arg1: *Image, arg2: *KernelInfo, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn FilterImageChannel(arg1: *Image, arg2: ChannelType, arg3: *KernelInfo,
                          arg4: *mut ExceptionInfo) -> *mut Image;
    fn GaussianBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                         arg4: *mut ExceptionInfo) -> *mut Image;
    fn GaussianBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                arg3: c_double, arg4: c_double,
                                arg5: *mut ExceptionInfo) -> *mut Image;
    fn MotionBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                       arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn MotionBlurImageChannel(arg1: *Image, arg2: ChannelType, arg3: c_double,
                              arg4: c_double, arg5: c_double,
                              arg6: *mut ExceptionInfo) -> *mut Image;
    fn PreviewImage(arg1: *Image, arg2: PreviewType, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn RadialBlurImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn RadialBlurImageChannel(arg1: *Image, arg2: ChannelType, arg3: c_double,
                              arg4: *mut ExceptionInfo) -> *mut Image;
    fn SelectiveBlurImage(arg1: *Image, arg2: c_double, arg3: c_double,
                          arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn SelectiveBlurImageChannel(arg1: *Image, arg2: ChannelType,
                                 arg3: c_double, arg4: c_double,
                                 arg5: c_double, arg6: *mut ExceptionInfo) ->
     *mut Image;
    fn ShadeImage(arg1: *Image, arg2: MagickBooleanType, arg3: c_double,
                  arg4: c_double, arg5: *mut ExceptionInfo) -> *mut Image;
    fn SharpenImage(arg1: *Image, arg2: c_double, arg3: c_double,
                    arg4: *mut ExceptionInfo) -> *mut Image;
    fn SharpenImageChannel(arg1: *Image, arg2: ChannelType, arg3: c_double,
                           arg4: c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn SpreadImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn UnsharpMaskImage(arg1: *Image, arg2: c_double, arg3: c_double,
                        arg4: c_double, arg5: c_double,
                        arg6: *mut ExceptionInfo) -> *mut Image;
    fn UnsharpMaskImageChannel(arg1: *Image, arg2: ChannelType,
                               arg3: c_double, arg4: c_double, arg5: c_double,
                               arg6: c_double, arg7: *mut ExceptionInfo) ->
     *mut Image;
    fn CoalesceImages(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn DisposeImages(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn CompareImageLayers(arg1: *Image, arg2: ImageLayerMethod,
                          arg3: *mut ExceptionInfo) -> *mut Image;
    fn DeconstructImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    fn MergeImageLayers(arg1: *mut Image, arg2: ImageLayerMethod,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    fn OptimizeImageLayers(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    fn OptimizePlusImageLayers(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    fn CompositeLayers(arg1: *mut Image, arg2: CompositeOperator,
                       arg3: *mut Image, arg4: ssize_t, arg5: ssize_t,
                       arg6: *mut ExceptionInfo);
    fn OptimizeImageTransparency(arg1: *Image, arg2: *mut ExceptionInfo);
    fn RemoveDuplicateLayers(arg1: *mut *mut Image, arg2: *mut ExceptionInfo);
    fn RemoveZeroDelayLayers(arg1: *mut *mut Image, arg2: *mut ExceptionInfo);
    fn DestroyHashmap(arg1: *mut HashmapInfo) -> *mut HashmapInfo;
    fn NewHashmap(arg1: size_t, arg2: *u8, arg3: *u8, arg4: *u8, arg5: *u8) ->
     *mut HashmapInfo;
    fn DestroyLinkedList(arg1: *mut LinkedListInfo, arg2: *u8) ->
     *mut LinkedListInfo;
    fn NewLinkedList(arg1: size_t) -> *mut LinkedListInfo;
    fn AppendValueToLinkedList(arg1: *mut LinkedListInfo, arg2: *c_void) ->
     MagickBooleanType;
    fn CompareHashmapString(arg1: *c_void, arg2: *c_void) ->
     MagickBooleanType;
    fn CompareHashmapStringInfo(arg1: *c_void, arg2: *c_void) ->
     MagickBooleanType;
    fn InsertValueInLinkedList(arg1: *mut LinkedListInfo, arg2: size_t,
                               arg3: *c_void) -> MagickBooleanType;
    fn InsertValueInSortedLinkedList(arg1: *mut LinkedListInfo, arg2: *u8,
                                     arg3: *mut *mut c_void, arg4: *c_void) ->
     MagickBooleanType;
    fn IsHashmapEmpty(arg1: *HashmapInfo) -> MagickBooleanType;
    fn IsLinkedListEmpty(arg1: *LinkedListInfo) -> MagickBooleanType;
    fn LinkedListToArray(arg1: *mut LinkedListInfo, arg2: *mut *mut c_void) ->
     MagickBooleanType;
    fn PutEntryInHashmap(arg1: *mut HashmapInfo, arg2: *c_void, arg3: *c_void)
     -> MagickBooleanType;
    fn GetNumberOfElementsInLinkedList(arg1: *LinkedListInfo) -> size_t;
    fn GetNumberOfEntriesInHashmap(arg1: *HashmapInfo) -> size_t;
    fn HashPointerType(arg1: *c_void) -> size_t;
    fn HashStringType(arg1: *c_void) -> size_t;
    fn HashStringInfoType(arg1: *c_void) -> size_t;
    fn ClearLinkedList(arg1: *mut LinkedListInfo, arg2: *u8);
    fn GetLastValueInLinkedList(arg1: *mut LinkedListInfo) -> *mut c_void;
    fn GetNextKeyInHashmap(arg1: *mut HashmapInfo) -> *mut c_void;
    fn GetNextValueInHashmap(arg1: *mut HashmapInfo) -> *mut c_void;
    fn GetNextValueInLinkedList(arg1: *mut LinkedListInfo) -> *mut c_void;
    fn GetValueFromHashmap(arg1: *mut HashmapInfo, arg2: *c_void) ->
     *mut c_void;
    fn GetValueFromLinkedList(arg1: *mut LinkedListInfo, arg2: size_t) ->
     *mut c_void;
    fn RemoveElementByValueFromLinkedList(arg1: *mut LinkedListInfo,
                                          arg2: *c_void) -> *mut c_void;
    fn RemoveElementFromLinkedList(arg1: *mut LinkedListInfo, arg2: size_t) ->
     *mut c_void;
    fn RemoveEntryFromHashmap(arg1: *mut HashmapInfo, arg2: *c_void) ->
     *mut c_void;
    fn RemoveLastElementFromLinkedList(arg1: *mut LinkedListInfo) ->
     *mut c_void;
    fn ResetHashmapIterator(arg1: *mut HashmapInfo);
    fn ResetLinkedListIterator(arg1: *mut LinkedListInfo);
    fn GetLocaleList(arg1: *c_schar, arg2: *mut size_t,
                     arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetLocaleMessage(arg1: *c_schar) -> *c_schar;
    fn GetLocaleInfo_(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *LocaleInfo;
    fn GetLocaleInfoList(arg1: *c_schar, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut *LocaleInfo;
    fn InterpretLocaleValue(arg1: *c_schar, arg2: *mut *mut c_schar) ->
     c_double;
    fn DestroyLocaleOptions(arg1: *mut LinkedListInfo) -> *mut LinkedListInfo;
    fn GetLocaleOptions(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut LinkedListInfo;
    fn ListLocaleInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn LocaleComponentGenesis() -> MagickBooleanType;
    fn FormatLocaleFile(arg1: *mut FILE, arg2: *c_schar) -> ssize_t;
    /* TODO: Handle the __va_list_tag type
    fn FormatLocaleFileList(arg1: *mut FILE, arg2: *c_schar,
                            arg3: *mut __va_list_tag) -> ssize_t;
    */
    fn FormatLocaleString(arg1: *mut c_schar, arg2: size_t, arg3: *c_schar) ->
     ssize_t;
    /* TODO: Handle the __va_list_tag type
    fn FormatLocaleStringList(arg1: *mut c_schar, arg2: size_t,
                              arg3: *c_schar, arg4: *mut __va_list_tag) ->
     ssize_t;
    */
    fn LocaleComponentTerminus();
    fn SetImageProgressMonitor(arg1: *mut Image, arg2: MagickProgressMonitor,
                               arg3: *mut c_void) -> MagickProgressMonitor;
    fn SetImageInfoProgressMonitor(arg1: *mut ImageInfo,
                                   arg2: MagickProgressMonitor,
                                   arg3: *mut c_void) ->
     MagickProgressMonitor;
    fn AcquireString(arg1: *c_schar) -> *mut c_schar;
    fn CloneString(arg1: *mut *mut c_schar, arg2: *c_schar) -> *mut c_schar;
    fn ConstantString(arg1: *c_schar) -> *mut c_schar;
    fn DestroyString(arg1: *mut c_schar) -> *mut c_schar;
    fn DestroyStringList(arg1: *mut *mut c_schar) -> *mut *mut c_schar;
    fn EscapeString(arg1: *c_schar, arg2: c_schar) -> *mut c_schar;
    fn FileToString(arg1: *c_schar, arg2: size_t, arg3: *mut ExceptionInfo) ->
     *mut c_schar;
    fn GetEnvironmentValue(arg1: *c_schar) -> *mut c_schar;
    fn StringInfoToHexString(arg1: *StringInfo) -> *mut c_schar;
    fn StringInfoToString(arg1: *StringInfo) -> *mut c_schar;
    fn StringToArgv(arg1: *c_schar, arg2: *mut c_int) -> *mut *mut c_schar;
    fn StringToken(arg1: *c_schar, arg2: *mut *mut c_schar) -> *mut c_schar;
    fn StringToList(arg1: *c_schar) -> *mut *mut c_schar;
    fn GetStringInfoPath(arg1: *StringInfo) -> *c_schar;
    fn InterpretSiPrefixValue(arg1: *c_schar, arg2: *mut *mut c_schar) ->
     c_double;
    fn StringToArrayOfDoubles(arg1: *c_schar, arg2: *mut ssize_t,
                              arg3: *mut ExceptionInfo) -> *mut c_double;
    fn CompareStringInfo(arg1: *StringInfo, arg2: *StringInfo) -> c_int;
    fn LocaleCompare(arg1: *c_schar, arg2: *c_schar) -> c_int;
    fn LocaleNCompare(arg1: *c_schar, arg2: *c_schar, arg3: size_t) -> c_int;
    fn ConcatenateString(arg1: *mut *mut c_schar, arg2: *c_schar) ->
     MagickBooleanType;
    fn IsStringTrue(arg1: *c_schar) -> MagickBooleanType;
    fn IsStringNotFalse(arg1: *c_schar) -> MagickBooleanType;
    fn SubstituteString(arg1: *mut *mut c_schar, arg2: *c_schar,
                        arg3: *c_schar) -> MagickBooleanType;
    fn ConcatenateMagickString(arg1: *mut c_schar, arg2: *c_schar,
                               arg3: size_t) -> size_t;
    fn CopyMagickString(arg1: *mut c_schar, arg2: *c_schar, arg3: size_t) ->
     size_t;
    fn GetStringInfoLength(arg1: *StringInfo) -> size_t;
    fn FormatMagickSize(arg1: MagickSizeType, arg2: MagickBooleanType,
                        arg3: *mut c_schar) -> ssize_t;
    fn FormatMagickTime(arg1: time_t, arg2: size_t, arg3: *mut c_schar) ->
     ssize_t;
    fn AcquireStringInfo(arg1: size_t) -> *mut StringInfo;
    fn BlobToStringInfo(arg1: *c_void, arg2: size_t) -> *mut StringInfo;
    fn CloneStringInfo(arg1: *StringInfo) -> *mut StringInfo;
    fn ConfigureFileToStringInfo(arg1: *c_schar) -> *mut StringInfo;
    fn DestroyStringInfo(arg1: *mut StringInfo) -> *mut StringInfo;
    fn FileToStringInfo(arg1: *c_schar, arg2: size_t,
                        arg3: *mut ExceptionInfo) -> *mut StringInfo;
    fn SplitStringInfo(arg1: *mut StringInfo, arg2: size_t) ->
     *mut StringInfo;
    fn StringToStringInfo(arg1: *c_schar) -> *mut StringInfo;
    fn GetStringInfoDatum(arg1: *StringInfo) -> *mut c_uchar;
    fn ConcatenateStringInfo(arg1: *mut StringInfo, arg2: *StringInfo);
    fn LocaleLower(arg1: *mut c_schar);
    fn LocaleUpper(arg1: *mut c_schar);
    fn PrintStringInfo(file: *mut FILE, arg1: *c_schar, arg2: *StringInfo);
    fn ResetStringInfo(arg1: *mut StringInfo);
    fn SetStringInfo(arg1: *mut StringInfo, arg2: *StringInfo);
    fn SetStringInfoDatum(arg1: *mut StringInfo, arg2: *c_uchar);
    fn SetStringInfoLength(arg1: *mut StringInfo, arg2: size_t);
    fn SetStringInfoPath(arg1: *mut StringInfo, arg2: *c_schar);
    fn StripString(arg1: *mut c_schar);
    fn GetNextImageProfile(arg1: *Image) -> *mut c_schar;
    fn GetImageProfile(arg1: *Image, arg2: *c_schar) -> *StringInfo;
    fn CloneImageProfiles(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    fn DeleteImageProfile(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn ProfileImage(arg1: *mut Image, arg2: *c_schar, arg3: *c_void,
                    arg4: size_t, arg5: MagickBooleanType) ->
     MagickBooleanType;
    fn SetImageProfile(arg1: *mut Image, arg2: *c_schar, arg3: *StringInfo) ->
     MagickBooleanType;
    fn SyncImageProfiles(arg1: *mut Image) -> MagickBooleanType;
    fn RemoveImageProfile(arg1: *mut Image, arg2: *c_schar) ->
     *mut StringInfo;
    fn DestroyImageProfiles(arg1: *mut Image);
    fn ResetImageProfileIterator(arg1: *Image);
    fn GetQuantumEndian(arg1: *QuantumInfo) -> EndianType;
    fn SetQuantumDepth(arg1: *Image, arg2: *mut QuantumInfo, arg3: size_t) ->
     MagickBooleanType;
    fn SetQuantumEndian(arg1: *Image, arg2: *mut QuantumInfo,
                        arg3: EndianType) -> MagickBooleanType;
    fn SetQuantumFormat(arg1: *Image, arg2: *mut QuantumInfo,
                        arg3: QuantumFormatType) -> MagickBooleanType;
    fn SetQuantumPad(arg1: *Image, arg2: *mut QuantumInfo, arg3: size_t) ->
     MagickBooleanType;
    fn GetQuantumFormat(arg1: *QuantumInfo) -> QuantumFormatType;
    fn AcquireQuantumInfo(arg1: *ImageInfo, arg2: *mut Image) ->
     *mut QuantumInfo;
    fn DestroyQuantumInfo(arg1: *mut QuantumInfo) -> *mut QuantumInfo;
    fn GetQuantumType(arg1: *mut Image, arg2: *mut ExceptionInfo) ->
     QuantumType;
    fn ExportQuantumPixels(arg1: *Image, arg2: *CacheView, arg3: *QuantumInfo,
                           arg4: QuantumType, arg5: *mut c_uchar,
                           arg6: *mut ExceptionInfo) -> size_t;
    fn GetQuantumExtent(arg1: *Image, arg2: *QuantumInfo, arg3: QuantumType)
     -> size_t;
    fn ImportQuantumPixels(arg1: *mut Image, arg2: *mut CacheView,
                           arg3: *QuantumInfo, arg4: QuantumType,
                           arg5: *c_uchar, arg6: *mut ExceptionInfo) ->
     size_t;
    fn GetQuantumPixels(arg1: *QuantumInfo) -> *mut c_uchar;
    fn GetQuantumInfo(arg1: *ImageInfo, arg2: *mut QuantumInfo);
    fn SetQuantumAlphaType(arg1: *mut QuantumInfo, arg2: QuantumAlphaType);
    fn SetQuantumImageType(arg1: *mut Image, arg2: QuantumType);
    fn SetQuantumMinIsWhite(arg1: *mut QuantumInfo, arg2: MagickBooleanType);
    fn SetQuantumPack(arg1: *mut QuantumInfo, arg2: MagickBooleanType);
    fn SetQuantumQuantum(arg1: *mut QuantumInfo, arg2: size_t);
    fn SetQuantumScale(arg1: *mut QuantumInfo, arg2: c_double);
    fn ResamplePixelColor(arg1: *mut ResampleFilter, arg2: c_double,
                          arg3: c_double, arg4: *mut MagickPixelPacket) ->
     MagickBooleanType;
    fn SetResampleFilterInterpolateMethod(arg1: *mut ResampleFilter,
                                          arg2: InterpolatePixelMethod) ->
     MagickBooleanType;
    fn SetResampleFilterVirtualPixelMethod(arg1: *mut ResampleFilter,
                                           arg2: VirtualPixelMethod) ->
     MagickBooleanType;
    fn AcquireResampleFilter(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut ResampleFilter;
    fn DestroyResampleFilter(arg1: *mut ResampleFilter) ->
     *mut ResampleFilter;
    fn ScaleResampleFilter(arg1: *mut ResampleFilter, arg2: c_double,
                           arg3: c_double, arg4: c_double, arg5: c_double);
    fn SetResampleFilter(arg1: *mut ResampleFilter, arg2: FilterTypes,
                         arg3: c_double);
    fn AdaptiveResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                           arg4: *mut ExceptionInfo) -> *mut Image;
    fn InterpolativeResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                                arg4: InterpolatePixelMethod,
                                arg5: *mut ExceptionInfo) -> *mut Image;
    fn LiquidRescaleImage(arg1: *Image, arg2: size_t, arg3: size_t,
                          arg4: c_double, arg5: c_double,
                          arg6: *mut ExceptionInfo) -> *mut Image;
    fn MagnifyImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn MinifyImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn ResampleImage(arg1: *Image, arg2: c_double, arg3: c_double,
                     arg4: FilterTypes, arg5: c_double,
                     arg6: *mut ExceptionInfo) -> *mut Image;
    fn ResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                   arg4: FilterTypes, arg5: c_double,
                   arg6: *mut ExceptionInfo) -> *mut Image;
    fn SampleImage(arg1: *Image, arg2: size_t, arg3: size_t,
                   arg4: *mut ExceptionInfo) -> *mut Image;
    fn ScaleImage(arg1: *Image, arg2: size_t, arg3: size_t,
                  arg4: *mut ExceptionInfo) -> *mut Image;
    fn ThumbnailImage(arg1: *Image, arg2: size_t, arg3: size_t,
                      arg4: *mut ExceptionInfo) -> *mut Image;
    fn GetElapsedTime(arg1: *mut TimerInfo) -> c_double;
    fn GetUserTime(arg1: *mut TimerInfo) -> c_double;
    fn ContinueTimer(arg1: *mut TimerInfo) -> MagickBooleanType;
    fn AcquireTimerInfo() -> *mut TimerInfo;
    fn DestroyTimerInfo(arg1: *mut TimerInfo) -> *mut TimerInfo;
    fn GetTimerInfo(arg1: *mut TimerInfo);
    fn ResetTimer(arg1: *mut TimerInfo);
    fn StartTimer(arg1: *mut TimerInfo, arg2: MagickBooleanType);
    fn CatchImageException(arg1: *mut Image) -> ExceptionType;
    fn GetImageInfoFile(arg1: *ImageInfo) -> *mut FILE;
    fn AcquireImage(arg1: *ImageInfo) -> *mut Image;
    fn AppendImages(arg1: *Image, arg2: MagickBooleanType,
                    arg3: *mut ExceptionInfo) -> *mut Image;
    fn CloneImage(arg1: *Image, arg2: size_t, arg3: size_t,
                  arg4: MagickBooleanType, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn DestroyImage(arg1: *mut Image) -> *mut Image;
    fn GetImageClipMask(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn GetImageMask(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn NewMagickImage(arg1: *ImageInfo, arg2: size_t, arg3: size_t,
                      arg4: *MagickPixelPacket) -> *mut Image;
    fn ReferenceImage(arg1: *mut Image) -> *mut Image;
    fn SmushImages(arg1: *Image, arg2: MagickBooleanType, arg3: ssize_t,
                   arg4: *mut ExceptionInfo) -> *mut Image;
    fn AcquireImageInfo() -> *mut ImageInfo;
    fn CloneImageInfo(arg1: *ImageInfo) -> *mut ImageInfo;
    fn DestroyImageInfo(arg1: *mut ImageInfo) -> *mut ImageInfo;
    fn ClipImage(arg1: *mut Image) -> MagickBooleanType;
    fn ClipImagePath(arg1: *mut Image, arg2: *c_schar,
                     arg3: MagickBooleanType) -> MagickBooleanType;
    fn IsTaintImage(arg1: *Image) -> MagickBooleanType;
    fn IsMagickConflict(arg1: *c_schar) -> MagickBooleanType;
    fn IsHighDynamicRangeImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn IsImageObject(arg1: *Image) -> MagickBooleanType;
    fn ListMagickInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ModifyImage(arg1: *mut *mut Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ResetImagePage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    fn SetImageBackgroundColor(arg1: *mut Image) -> MagickBooleanType;
    fn SetImageClipMask(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    fn SetImageColor(arg1: *mut Image, arg2: *MagickPixelPacket) ->
     MagickBooleanType;
    fn SetImageExtent(arg1: *mut Image, arg2: size_t, arg3: size_t) ->
     MagickBooleanType;
    fn SetImageInfo(arg1: *mut ImageInfo, arg2: c_uint,
                    arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn SetImageMask(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    fn SetImageOpacity(arg1: *mut Image, arg2: Quantum) -> MagickBooleanType;
    fn SetImageChannels(arg1: *mut Image, arg2: size_t) -> MagickBooleanType;
    fn SetImageStorageClass(arg1: *mut Image, arg2: ClassType) ->
     MagickBooleanType;
    fn StripImage(arg1: *mut Image) -> MagickBooleanType;
    fn SyncImage(arg1: *mut Image) -> MagickBooleanType;
    fn SyncImageSettings(arg1: *ImageInfo, arg2: *mut Image) ->
     MagickBooleanType;
    fn SyncImagesSettings(arg1: *mut ImageInfo, arg2: *mut Image) ->
     MagickBooleanType;
    fn InterpretImageFilename(arg1: *ImageInfo, arg2: *mut Image,
                              arg3: *c_schar, arg4: c_int, arg5: *mut c_schar)
     -> size_t;
    fn GetImageReferenceCount(arg1: *mut Image) -> ssize_t;
    fn GetImageChannels(arg1: *mut Image) -> size_t;
    fn GetImageVirtualPixelMethod(arg1: *Image) -> VirtualPixelMethod;
    fn SetImageVirtualPixelMethod(arg1: *Image, arg2: VirtualPixelMethod) ->
     VirtualPixelMethod;
    fn AcquireNextImage(arg1: *ImageInfo, arg2: *mut Image);
    fn DestroyImagePixels(arg1: *mut Image);
    fn DisassociateImageStream(arg1: *mut Image);
    fn GetImageException(arg1: *mut Image, arg2: *mut ExceptionInfo);
    fn GetImageInfo(arg1: *mut ImageInfo);
    fn SetImageInfoBlob(arg1: *mut ImageInfo, arg2: *c_void, arg3: size_t);
    fn SetImageInfoFile(arg1: *mut ImageInfo, arg2: *mut FILE);
    fn GetTypeList(arg1: *c_schar, arg2: *mut size_t,
                   arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn ListTypeInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn TypeComponentGenesis() -> MagickBooleanType;
    fn GetTypeInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) -> *TypeInfo;
    fn GetTypeInfoByFamily(arg1: *c_schar, arg2: StyleType, arg3: StretchType,
                           arg4: size_t, arg5: *mut ExceptionInfo) ->
     *TypeInfo;
    fn GetTypeInfoList(arg1: *c_schar, arg2: *mut size_t,
                       arg3: *mut ExceptionInfo) -> *mut *TypeInfo;
    fn TypeComponentTerminus();
    fn AcquireDrawInfo() -> *mut DrawInfo;
    fn CloneDrawInfo(arg1: *ImageInfo, arg2: *DrawInfo) -> *mut DrawInfo;
    fn DestroyDrawInfo(arg1: *mut DrawInfo) -> *mut DrawInfo;
    fn DrawAffineImage(arg1: *mut Image, arg2: *Image, arg3: *AffineMatrix) ->
     MagickBooleanType;
    fn DrawClipPath(arg1: *mut Image, arg2: *DrawInfo, arg3: *c_schar) ->
     MagickBooleanType;
    fn DrawGradientImage(arg1: *mut Image, arg2: *DrawInfo) ->
     MagickBooleanType;
    fn DrawImage(arg1: *mut Image, arg2: *DrawInfo) -> MagickBooleanType;
    fn DrawPatternPath(arg1: *mut Image, arg2: *DrawInfo, arg3: *c_schar,
                       arg4: *mut *mut Image) -> MagickBooleanType;
    fn DrawPrimitive(arg1: *mut Image, arg2: *DrawInfo, arg3: *PrimitiveInfo)
     -> MagickBooleanType;
    fn GetAffineMatrix(arg1: *mut AffineMatrix);
    fn GetDrawInfo(arg1: *ImageInfo, arg2: *mut DrawInfo);
    fn AnnotateComponentGenesis() -> MagickBooleanType;
    fn AnnotateImage(arg1: *mut Image, arg2: *DrawInfo) -> MagickBooleanType;
    fn GetMultilineTypeMetrics(arg1: *mut Image, arg2: *DrawInfo,
                               arg3: *mut TypeMetric) -> MagickBooleanType;
    fn GetTypeMetrics(arg1: *mut Image, arg2: *DrawInfo,
                      arg3: *mut TypeMetric) -> MagickBooleanType;
    fn FormatMagickCaption(arg1: *mut Image, arg2: *mut DrawInfo,
                           arg3: MagickBooleanType, arg4: *mut TypeMetric,
                           arg5: *mut *mut c_schar) -> ssize_t;
    fn AnnotateComponentTerminus();
    fn GetNextImageArtifact(arg1: *Image) -> *mut c_schar;
    fn RemoveImageArtifact(arg1: *mut Image, arg2: *c_schar) -> *mut c_schar;
    fn GetImageArtifact(arg1: *Image, arg2: *c_schar) -> *c_schar;
    fn CloneImageArtifacts(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    fn DefineImageArtifact(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn DeleteImageArtifact(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn SetImageArtifact(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar) ->
     MagickBooleanType;
    fn DestroyImageArtifacts(arg1: *mut Image);
    fn ResetImageArtifactIterator(arg1: *Image);
    fn GetImageType(arg1: *Image, arg2: *mut ExceptionInfo) -> ImageType;
    fn SetImageChannelDepth(arg1: *mut Image, arg2: ChannelType, arg3: size_t)
     -> MagickBooleanType;
    fn SetImageDepth(arg1: *mut Image, arg2: size_t) -> MagickBooleanType;
    fn SetImageType(arg1: *mut Image, arg2: ImageType) -> MagickBooleanType;
    fn GetImageBoundingBox(arg1: *Image, exception: *mut ExceptionInfo) ->
     RectangleInfo;
    fn GetImageChannelDepth(arg1: *Image, arg2: ChannelType,
                            arg3: *mut ExceptionInfo) -> size_t;
    fn GetImageDepth(arg1: *Image, arg2: *mut ExceptionInfo) -> size_t;
    fn GetImageQuantumDepth(arg1: *Image, arg2: MagickBooleanType) -> size_t;
    fn GetImagePixelCacheType(arg1: *Image) -> CacheType;
    fn GetVirtualIndexQueue(arg1: *Image) -> *IndexPacket;
    fn GetVirtualPixels(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                        arg4: size_t, arg5: size_t, arg6: *mut ExceptionInfo)
     -> *PixelPacket;
    fn GetVirtualPixelQueue(arg1: *Image) -> *PixelPacket;
    fn AcquirePixelCachePixels(arg1: *Image, arg2: *mut MagickSizeType,
                               arg3: *mut ExceptionInfo) -> *c_void;
    fn GetAuthenticIndexQueue(arg1: *Image) -> *mut IndexPacket;
    fn CacheComponentGenesis() -> MagickBooleanType;
    fn GetOneVirtualMagickPixel(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                                arg4: *mut MagickPixelPacket,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetOneVirtualPixel(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                          arg4: *mut PixelPacket, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetOneVirtualMethodPixel(arg1: *Image, arg2: VirtualPixelMethod,
                                arg3: ssize_t, arg4: ssize_t,
                                arg5: *mut PixelPacket,
                                arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetOneAuthenticPixel(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                            arg4: *mut PixelPacket, arg5: *mut ExceptionInfo)
     -> MagickBooleanType;
    fn PersistPixelCache(arg1: *mut Image, arg2: *c_schar,
                         arg3: MagickBooleanType, arg4: *mut MagickOffsetType,
                         arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn SyncAuthenticPixels(arg1: *mut Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetImageExtent(arg1: *Image) -> MagickSizeType;
    fn GetAuthenticPixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t,
                          arg6: *mut ExceptionInfo) -> *mut PixelPacket;
    fn GetAuthenticPixelQueue(arg1: *Image) -> *mut PixelPacket;
    fn QueueAuthenticPixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                            arg4: size_t, arg5: size_t,
                            arg6: *mut ExceptionInfo) -> *mut PixelPacket;
    fn GetPixelCacheVirtualMethod(arg1: *Image) -> VirtualPixelMethod;
    fn SetPixelCacheVirtualMethod(arg1: *Image, arg2: VirtualPixelMethod) ->
     VirtualPixelMethod;
    fn CacheComponentTerminus();
    fn GetPixelCachePixels(arg1: *mut Image, arg2: *mut MagickSizeType,
                           arg3: *mut ExceptionInfo) -> *mut c_void;
    fn CombineImages(arg1: *Image, arg2: ChannelType,
                     arg3: *mut ExceptionInfo) -> *mut Image;
    // TODO - This function causes a linker error
    //fn SeparateImage(arg1: *Image, arg2: ChannelType,
    //                 arg3: *mut ExceptionInfo) -> *mut Image;
    fn SeparateImages(arg1: *Image, arg2: ChannelType,
                      arg3: *mut ExceptionInfo) -> *mut Image;
    fn GetImageAlphaChannel(arg1: *Image) -> MagickBooleanType;
    fn SeparateImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    fn SetImageAlphaChannel(arg1: *mut Image, arg2: AlphaChannelType) ->
     MagickBooleanType;
    fn DecipherImage(arg1: *mut Image, arg2: *c_schar,
                     arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn EncipherImage(arg1: *mut Image, arg2: *c_schar,
                     arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn PasskeyDecipherImage(arg1: *mut Image, arg2: *StringInfo,
                            arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn PasskeyEncipherImage(arg1: *mut Image, arg2: *StringInfo,
                            arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetClientPath() -> *c_schar;
    fn GetClientName() -> *c_schar;
    fn SetClientName(arg1: *c_schar) -> *c_schar;
    fn SetClientPath(arg1: *c_schar) -> *c_schar;
    fn GetCoderList(arg1: *c_schar, arg2: *mut size_t,
                    arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetCoderInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) -> *CoderInfo;
    fn GetCoderInfoList(arg1: *c_schar, arg2: *mut size_t,
                        arg3: *mut ExceptionInfo) -> *mut *CoderInfo;
    fn CoderComponentGenesis() -> MagickBooleanType;
    fn ListCoderInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn CoderComponentTerminus();
    fn AcquireImageColormap(arg1: *mut Image, arg2: size_t) ->
     MagickBooleanType;
    fn CycleColormapImage(arg1: *mut Image, arg2: ssize_t) ->
     MagickBooleanType;
    fn SortColormapByIntensity(arg1: *mut Image) -> MagickBooleanType;
    fn GetImageChannelDistortions(arg1: *mut Image, arg2: *Image,
                                  arg3: MetricType, arg4: *mut ExceptionInfo)
     -> *mut c_double;
    fn CompareImageChannels(arg1: *mut Image, arg2: *Image, arg3: ChannelType,
                            arg4: MetricType, arg5: *mut c_double,
                            arg6: *mut ExceptionInfo) -> *mut Image;
    fn CompareImages(arg1: *mut Image, arg2: *Image, arg3: MetricType,
                     arg4: *mut c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn SimilarityImage(arg1: *mut Image, arg2: *Image,
                       arg3: *mut RectangleInfo, arg4: *mut c_double,
                       arg5: *mut ExceptionInfo) -> *mut Image;
    fn SimilarityMetricImage(arg1: *mut Image, arg2: *Image, arg3: MetricType,
                             arg4: *mut RectangleInfo, arg5: *mut c_double,
                             arg6: *mut ExceptionInfo) -> *mut Image;
    fn GetImageChannelDistortion(arg1: *mut Image, arg2: *Image,
                                 arg3: ChannelType, arg4: MetricType,
                                 arg5: *mut c_double,
                                 arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetImageDistortion(arg1: *mut Image, arg2: *Image, arg3: MetricType,
                          arg4: *mut c_double, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn IsImagesEqual(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    fn GetConfigureList(arg1: *c_schar, arg2: *mut size_t,
                        arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetConfigureOption(arg1: *c_schar) -> *mut c_schar;
    fn GetConfigureValue(arg1: *ConfigureInfo) -> *c_schar;
    fn GetConfigureInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *ConfigureInfo;
    fn GetConfigureInfoList(arg1: *c_schar, arg2: *mut size_t,
                            arg3: *mut ExceptionInfo) -> *mut *ConfigureInfo;
    fn DestroyConfigureOptions(arg1: *mut LinkedListInfo) ->
     *mut LinkedListInfo;
    fn GetConfigurePaths(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut LinkedListInfo;
    fn GetConfigureOptions(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut LinkedListInfo;
    fn ConfigureComponentGenesis() -> MagickBooleanType;
    fn ListConfigureInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ConfigureComponentTerminus();
    fn BorderImage(arg1: *Image, arg2: *RectangleInfo,
                   arg3: *mut ExceptionInfo) -> *mut Image;
    fn FrameImage(arg1: *Image, arg2: *FrameInfo, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn RaiseImage(arg1: *mut Image, arg2: *RectangleInfo,
                  arg3: MagickBooleanType) -> MagickBooleanType;
    fn GetDelegateCommand(arg1: *ImageInfo, arg2: *mut Image, arg3: *c_schar,
                          arg4: *c_schar, arg5: *mut ExceptionInfo) ->
     *mut c_schar;
    fn GetDelegateList(arg1: *c_schar, arg2: *mut size_t,
                       arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetDelegateCommands(arg1: *DelegateInfo) -> *c_schar;
    fn GetDelegateInfo(arg1: *c_schar, arg2: *c_schar,
                       exception: *mut ExceptionInfo) -> *DelegateInfo;
    fn GetDelegateInfoList(arg1: *c_schar, arg2: *mut size_t,
                           arg3: *mut ExceptionInfo) -> *mut *DelegateInfo;
    fn GetDelegateMode(arg1: *DelegateInfo) -> ssize_t;
    fn DelegateComponentGenesis() -> MagickBooleanType;
    fn GetDelegateThreadSupport(arg1: *DelegateInfo) -> MagickBooleanType;
    fn InvokeDelegate(arg1: *mut ImageInfo, arg2: *mut Image, arg3: *c_schar,
                      arg4: *c_schar, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ListDelegateInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn DelegateComponentTerminus();
    fn CompressImageColormap(arg1: *mut Image) -> MagickBooleanType;
    fn GetImageQuantizeError(arg1: *mut Image) -> MagickBooleanType;
    fn PosterizeImage(arg1: *mut Image, arg2: size_t, arg3: MagickBooleanType)
     -> MagickBooleanType;
    fn PosterizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                             arg3: size_t, arg4: MagickBooleanType) ->
     MagickBooleanType;
    fn QuantizeImage(arg1: *QuantizeInfo, arg2: *mut Image) ->
     MagickBooleanType;
    fn QuantizeImages(arg1: *QuantizeInfo, arg2: *mut Image) ->
     MagickBooleanType;
    fn RemapImage(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image) ->
     MagickBooleanType;
    fn RemapImages(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image) ->
     MagickBooleanType;
    fn AcquireQuantizeInfo(arg1: *ImageInfo) -> *mut QuantizeInfo;
    fn CloneQuantizeInfo(arg1: *QuantizeInfo) -> *mut QuantizeInfo;
    fn DestroyQuantizeInfo(arg1: *mut QuantizeInfo) -> *mut QuantizeInfo;
    fn GetQuantizeInfo(arg1: *mut QuantizeInfo);
    fn GetNextImageRegistry() -> *mut c_schar;
    fn DefineImageRegistry(arg1: RegistryType, arg2: *c_schar,
                           arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn DeleteImageRegistry(arg1: *c_schar) -> MagickBooleanType;
    fn RegistryComponentGenesis() -> MagickBooleanType;
    fn SetImageRegistry(arg1: RegistryType, arg2: *c_schar, arg3: *c_void,
                        arg4: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageRegistry(arg1: RegistryType, arg2: *c_schar,
                        arg3: *mut ExceptionInfo) -> *mut c_void;
    fn RegistryComponentTerminus();
    fn RemoveImageRegistry(arg1: *c_schar) -> *mut c_void;
    fn ResetImageRegistryIterator();
    fn CloseCacheView(arg1: *mut CacheView) -> *mut CacheView;
    fn OpenCacheView(arg1: *Image) -> *mut CacheView;
    fn AllocateString(arg1: *c_schar) -> *mut c_schar;
    fn InterpretImageAttributes(arg1: *ImageInfo, arg2: *mut Image,
                                arg3: *c_schar) -> *mut c_schar;
    fn PostscriptGeometry(arg1: *c_schar) -> *mut c_schar;
    fn TranslateText(arg1: *ImageInfo, arg2: *mut Image, arg3: *c_schar) ->
     *mut c_schar;
    fn GetImageAttribute(arg1: *Image, arg2: *c_schar) -> *ImageAttribute;
    fn GetImageClippingPathAttribute(arg1: *mut Image) -> *ImageAttribute;
    fn GetNextImageAttribute(arg1: *Image) -> *ImageAttribute;
    fn AcquireCacheViewIndexes(arg1: *CacheView) -> *IndexPacket;
    fn AcquireIndexes(arg1: *Image) -> *IndexPacket;
    fn AcquirePixels(arg1: *Image) -> *PixelPacket;
    fn AcquireCacheViewPixels(arg1: *CacheView, arg2: ssize_t, arg3: ssize_t,
                              arg4: size_t, arg5: size_t,
                              arg6: *mut ExceptionInfo) -> *PixelPacket;
    fn AcquireImagePixels(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t,
                          arg6: *mut ExceptionInfo) -> *PixelPacket;
    fn OpenMagickStream(arg1: *c_schar, arg2: *c_schar) -> *mut FILE;
    fn AllocateImage(arg1: *ImageInfo) -> *mut Image;
    fn AverageImages(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn ExtractSubimageFromImage(arg1: *mut Image, arg2: *Image,
                                arg3: *mut ExceptionInfo) -> *mut Image;
    fn GetImageFromMagickRegistry(arg1: *c_schar, id: *mut ssize_t,
                                  arg2: *mut ExceptionInfo) -> *mut Image;
    fn GetImageList(arg1: *Image, arg2: ssize_t, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn GetNextImage(arg1: *Image) -> *mut Image;
    fn GetPreviousImage(arg1: *Image) -> *mut Image;
    fn FlattenImages(arg1: *mut Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    fn MaximumImages(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn MedianFilterImage(arg1: *Image, arg2: c_double,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    fn ModeImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn MinimumImages(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn MosaicImages(arg1: *mut Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn PopImageList(arg1: *mut *mut Image) -> *mut Image;
    fn RecolorImage(arg1: *Image, arg2: size_t, arg3: *c_double,
                    arg4: *mut ExceptionInfo) -> *mut Image;
    fn ReduceNoiseImage(arg1: *Image, arg2: c_double,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    fn ShiftImageList(arg1: *mut *mut Image) -> *mut Image;
    fn SpliceImageList(arg1: *mut Image, arg2: ssize_t, arg3: size_t,
                       arg4: *Image, arg5: *mut ExceptionInfo) -> *mut Image;
    fn ZoomImage(arg1: *Image, arg2: size_t, arg3: size_t,
                 arg4: *mut ExceptionInfo) -> *mut Image;
    fn GetCacheViewIndexes(arg1: *mut CacheView) -> *mut IndexPacket;
    fn GetIndexes(arg1: *Image) -> *mut IndexPacket;
    fn ValidateColormapIndex(arg1: *mut Image, arg2: size_t) -> IndexPacket;
    fn GetImageGeometry(arg1: *mut Image, arg2: *c_schar, arg3: c_uint,
                        arg4: *mut RectangleInfo) -> c_int;
    fn ParseImageGeometry(arg1: *c_schar, arg2: *mut ssize_t,
                          arg3: *mut ssize_t, arg4: *mut size_t,
                          arg5: *mut size_t) -> c_int;
    fn AcquireOneCacheViewPixel(arg1: *CacheView, arg2: ssize_t,
                                arg3: ssize_t, arg4: *mut PixelPacket,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn AcquireOneCacheViewVirtualPixel(arg1: *CacheView,
                                       arg2: VirtualPixelMethod,
                                       arg3: ssize_t, arg4: ssize_t,
                                       arg5: *mut PixelPacket,
                                       arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn AffinityImage(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image) ->
     MagickBooleanType;
    fn AffinityImages(arg1: *QuantizeInfo, arg2: *mut Image, arg3: *Image) ->
     MagickBooleanType;
    fn AllocateImageColormap(arg1: *mut Image, arg2: size_t) ->
     MagickBooleanType;
    fn ClipPathImage(arg1: *mut Image, arg2: *c_schar,
                     arg3: MagickBooleanType) -> MagickBooleanType;
    fn CloneImageAttributes(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    fn ColorFloodfillImage(arg1: *mut Image, arg2: *DrawInfo,
                           arg3: PixelPacket, arg4: ssize_t, arg5: ssize_t,
                           arg6: PaintMethod) -> MagickBooleanType;
    fn DeleteImageAttribute(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn DeleteMagickRegistry(arg1: ssize_t) -> MagickBooleanType;
    fn DescribeImage(arg1: *mut Image, arg2: *mut FILE,
                     arg3: MagickBooleanType) -> MagickBooleanType;
    fn FormatImageAttribute(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    /* TODO: Handle the __va_list_tag type
    fn FormatImageAttributeList(arg1: *mut Image, arg2: *c_schar,
                                arg3: *c_schar, arg4: *mut __va_list_tag) ->
     MagickBooleanType;
    fn FormatImagePropertyList(arg1: *mut Image, arg2: *c_schar,
                               arg3: *c_schar, arg4: *mut __va_list_tag) ->
     MagickBooleanType;
    */
    fn FuzzyColorCompare(arg1: *Image, arg2: *PixelPacket, arg3: *PixelPacket)
     -> MagickBooleanType;
    fn FuzzyOpacityCompare(arg1: *Image, arg2: *PixelPacket,
                           arg3: *PixelPacket) -> MagickBooleanType;
    fn LevelImageColors(arg1: *mut Image, arg2: ChannelType,
                        arg3: *MagickPixelPacket, arg4: *MagickPixelPacket,
                        arg5: MagickBooleanType) -> MagickBooleanType;
    fn MagickMonitor(arg1: *c_schar, arg2: MagickOffsetType,
                     arg3: MagickSizeType, arg4: *mut c_void) ->
     MagickBooleanType;
    fn MapImage(arg1: *mut Image, arg2: *Image, arg3: MagickBooleanType) ->
     MagickBooleanType;
    fn MapImages(arg1: *mut Image, arg2: *Image, arg3: MagickBooleanType) ->
     MagickBooleanType;
    fn MatteFloodfillImage(arg1: *mut Image, arg2: PixelPacket, arg3: Quantum,
                           arg4: ssize_t, arg5: ssize_t, arg6: PaintMethod) ->
     MagickBooleanType;
    fn OpaqueImage(arg1: *mut Image, arg2: PixelPacket, arg3: PixelPacket) ->
     MagickBooleanType;
    fn PaintFloodfillImage(arg1: *mut Image, arg2: ChannelType,
                           arg3: *MagickPixelPacket, arg4: ssize_t,
                           arg5: ssize_t, arg6: *DrawInfo, arg7: PaintMethod)
     -> MagickBooleanType;
    fn PaintOpaqueImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                        arg3: *MagickPixelPacket) -> MagickBooleanType;
    fn PaintOpaqueImageChannel(arg1: *mut Image, arg2: ChannelType,
                               arg3: *MagickPixelPacket,
                               arg4: *MagickPixelPacket) -> MagickBooleanType;
    fn PaintTransparentImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                             arg3: Quantum) -> MagickBooleanType;
    fn SetExceptionInfo(arg1: *mut ExceptionInfo, arg2: ExceptionType) ->
     MagickBooleanType;
    fn SetImageAttribute(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar) ->
     MagickBooleanType;
    fn SyncCacheViewPixels(arg1: *mut CacheView) -> MagickBooleanType;
    fn SyncImagePixels(arg1: *mut Image) -> MagickBooleanType;
    fn TransparentImage(arg1: *mut Image, arg2: PixelPacket, arg3: Quantum) ->
     MagickBooleanType;
    fn AcquireOneMagickPixel(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                             arg4: *mut ExceptionInfo) -> MagickPixelPacket;
    fn GetMonitorHandler() -> MonitorHandler;
    fn SetMonitorHandler(arg1: MonitorHandler) -> MonitorHandler;
    fn SizeBlob(image: *mut Image) -> MagickOffsetType;
    fn InterpolatePixelColor(arg1: *Image, arg2: *mut CacheView,
                             arg3: InterpolatePixelMethod, arg4: c_double,
                             arg5: c_double, arg6: *mut ExceptionInfo) ->
     MagickPixelPacket;
    fn ParseSizeGeometry(arg1: *Image, arg2: *c_schar,
                         arg3: *mut RectangleInfo) -> MagickStatusType;
    fn AcquireOnePixel(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                       arg4: *mut ExceptionInfo) -> PixelPacket;
    fn AcquireOneVirtualPixel(arg1: *Image, arg2: VirtualPixelMethod,
                              arg3: ssize_t, arg4: ssize_t,
                              arg5: *mut ExceptionInfo) -> PixelPacket;
    fn GetCacheView(arg1: *mut CacheView, arg2: ssize_t, arg3: ssize_t,
                    arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    fn GetCacheViewPixels(arg1: *mut CacheView, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    fn GetImagePixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                      arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    fn GetOnePixel(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t) ->
     PixelPacket;
    fn GetPixels(arg1: *Image) -> *mut PixelPacket;
    fn SetCacheViewPixels(arg1: *mut CacheView, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    fn SetImagePixels(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                      arg4: size_t, arg5: size_t) -> *mut PixelPacket;
    fn InversesRGBCompandor(arg1: MagickRealType) -> MagickRealType;
    fn sRGBCompandor(arg1: MagickRealType) -> MagickRealType;
    fn GetImageListSize(arg1: *Image) -> size_t;
    fn PopImagePixels(arg1: *mut Image, arg2: QuantumType, arg3: *mut c_uchar)
     -> size_t;
    fn PushImagePixels(arg1: *mut Image, arg2: QuantumType, arg3: *c_uchar) ->
     size_t;
    fn FormatMagickString(arg1: *mut c_schar, arg2: size_t, arg3: *c_schar) ->
     ssize_t;
    /* TODO: handle the __va_list_tag type
    fn FormatMagickStringList(arg1: *mut c_schar, arg2: size_t,
                              arg3: *c_schar, arg4: *mut __va_list_tag) ->
     ssize_t;
    */
    fn GetImageListIndex(arg1: *Image) -> ssize_t;
    fn SetMagickRegistry(arg1: RegistryType, arg2: *c_void, arg3: size_t,
                         arg4: *mut ExceptionInfo) -> ssize_t;
    fn ChannelImage(arg1: *mut Image, arg2: ChannelType) -> c_uint;
    fn ChannelThresholdImage(arg1: *mut Image, arg2: *c_schar) -> c_uint;
    fn DispatchImage(arg1: *Image, arg2: ssize_t, arg3: ssize_t, arg4: size_t,
                     arg5: size_t, arg6: *c_schar, arg7: StorageType,
                     arg8: *mut c_void, arg9: *mut ExceptionInfo) -> c_uint;
    fn FuzzyColorMatch(arg1: *PixelPacket, arg2: *PixelPacket, arg3: c_double)
     -> c_uint;
    fn GetNumberScenes(arg1: *Image) -> c_uint;
    fn GetMagickGeometry(arg1: *c_schar, arg2: *mut ssize_t,
                         arg3: *mut ssize_t, arg4: *mut size_t,
                         arg5: *mut size_t) -> c_uint;
    fn IsSubimage(arg1: *c_schar, arg2: c_uint) -> c_uint;
    fn PushImageList(arg1: *mut *mut Image, arg2: *Image,
                     arg3: *mut ExceptionInfo) -> c_uint;
    fn QuantizationError(arg1: *mut Image) -> c_uint;
    fn RandomChannelThresholdImage(arg1: *mut Image, arg2: *c_schar,
                                   arg3: *c_schar, arg4: *mut ExceptionInfo)
     -> c_uint;
    fn SetImageList(arg1: *mut *mut Image, arg2: *Image, arg3: ssize_t,
                    arg4: *mut ExceptionInfo) -> c_uint;
    fn TransformColorspace(arg1: *mut Image, arg2: ColorspaceType) -> c_uint;
    fn ThresholdImage(arg1: *mut Image, arg2: c_double) -> c_uint;
    fn ThresholdImageChannel(arg1: *mut Image, arg2: *c_schar) -> c_uint;
    fn UnshiftImageList(arg1: *mut *mut Image, arg2: *Image,
                        arg3: *mut ExceptionInfo) -> c_uint;
    fn AcquireMemory(arg1: size_t) -> *mut c_void;
    fn AllocateNextImage(arg1: *ImageInfo, arg2: *mut Image);
    fn CloneMemory(arg1: *mut c_void, arg2: *c_void, arg3: size_t) ->
     *mut c_void;
    fn DestroyConstitute();
    fn DestroyImageAttributes(arg1: *mut Image);
    fn DestroyImages(arg1: *mut Image);
    fn DestroyMagick();
    fn DestroyMagickRegistry();
    fn GetConfigureBlob(arg1: *c_schar, arg2: *mut c_schar, arg3: *mut size_t,
                        arg4: *mut ExceptionInfo) -> *mut c_void;
    fn GetMagickRegistry(arg1: ssize_t, arg2: *mut RegistryType,
                         arg3: *mut size_t, arg4: *mut ExceptionInfo) ->
     *mut c_void;
    fn IdentityAffine(arg1: *mut AffineMatrix);
    fn LiberateMemory(arg1: *mut *mut c_void);
    fn LiberateSemaphoreInfo(arg1: *mut *mut SemaphoreInfo);
    fn FormatString(arg1: *mut c_schar, arg2: *c_schar);
    /* TODO: handle the __va_list_tag type
    fn FormatStringList(arg1: *mut c_schar, arg2: *c_schar,
                        arg3: *mut __va_list_tag);
    */
    fn HSLTransform(arg1: c_double, arg2: c_double, arg3: c_double,
                    arg4: *mut Quantum, arg5: *mut Quantum,
                    arg6: *mut Quantum);
    fn InitializeMagick(arg1: *c_schar);
    fn MagickIncarnate(arg1: *c_schar);
    fn ReacquireMemory(arg1: *mut *mut c_void, arg2: size_t);
    fn ResetImageAttributeIterator(arg1: *Image);
    fn SetCacheThreshold(arg1: size_t);
    fn SetImage(arg1: *mut Image, arg2: Quantum);
    fn Strip(arg1: *mut c_schar);
    fn TemporaryFilename(arg1: *mut c_schar);
    fn TransformHSL(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                    arg4: *mut c_double, arg5: *mut c_double,
                    arg6: *mut c_double);
    fn DisplayImages(arg1: *ImageInfo, arg2: *mut Image) -> MagickBooleanType;
    fn RemoteDisplayCommand(arg1: *ImageInfo, arg2: *c_schar, arg3: *c_schar,
                            arg4: *mut ExceptionInfo) -> MagickBooleanType;
    fn AffineTransformImage(arg1: *Image, arg2: *AffineMatrix,
                            arg3: *mut ExceptionInfo) -> *mut Image;
    fn DistortImage(arg1: *Image, arg2: DistortImageMethod, arg3: size_t,
                    arg4: *c_double, arg5: MagickBooleanType,
                    exception: *mut ExceptionInfo) -> *mut Image;
    fn DistortResizeImage(arg1: *Image, arg2: size_t, arg3: size_t,
                          arg4: *mut ExceptionInfo) -> *mut Image;
    fn RotateImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn SparseColorImage(arg1: *Image, arg2: ChannelType,
                        arg3: SparseColorMethod, arg4: size_t,
                        arg5: *c_double, arg6: *mut ExceptionInfo) ->
     *mut Image;
    fn AutoGammaImage(arg1: *mut Image) -> MagickBooleanType;
    fn AutoGammaImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    fn AutoLevelImage(arg1: *mut Image) -> MagickBooleanType;
    fn AutoLevelImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    fn BrightnessContrastImage(arg1: *mut Image, arg2: c_double,
                               arg3: c_double) -> MagickBooleanType;
    fn BrightnessContrastImageChannel(arg1: *mut Image, arg2: ChannelType,
                                      arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn ClutImage(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    fn ClutImageChannel(arg1: *mut Image, arg2: ChannelType, arg3: *Image) ->
     MagickBooleanType;
    fn ColorDecisionListImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn ContrastImage(arg1: *mut Image, arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn ContrastStretchImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn ContrastStretchImageChannel(arg1: *mut Image, arg2: ChannelType,
                                   arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn EqualizeImage(image: *mut Image) -> MagickBooleanType;
    fn EqualizeImageChannel(image: *mut Image, arg1: ChannelType) ->
     MagickBooleanType;
    fn GammaImage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    fn GammaImageChannel(arg1: *mut Image, arg2: ChannelType, arg3: c_double)
     -> MagickBooleanType;
    fn HaldClutImage(arg1: *mut Image, arg2: *Image) -> MagickBooleanType;
    fn HaldClutImageChannel(arg1: *mut Image, arg2: ChannelType, arg3: *Image)
     -> MagickBooleanType;
    fn LevelImage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    fn LevelImageChannel(arg1: *mut Image, arg2: ChannelType, arg3: c_double,
                         arg4: c_double, arg5: c_double) -> MagickBooleanType;
    fn LevelizeImage(arg1: *mut Image, arg2: c_double, arg3: c_double,
                     arg4: c_double) -> MagickBooleanType;
    fn LevelizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                            arg3: c_double, arg4: c_double, arg5: c_double) ->
     MagickBooleanType;
    fn LevelColorsImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                        arg3: *MagickPixelPacket, arg4: MagickBooleanType) ->
     MagickBooleanType;
    fn LevelColorsImageChannel(arg1: *mut Image, arg2: ChannelType,
                               arg3: *MagickPixelPacket,
                               arg4: *MagickPixelPacket,
                               arg5: MagickBooleanType) -> MagickBooleanType;
    fn LinearStretchImage(arg1: *mut Image, arg2: c_double, arg3: c_double) ->
     MagickBooleanType;
    fn ModulateImage(arg1: *mut Image, arg2: *c_schar) -> MagickBooleanType;
    fn NegateImage(arg1: *mut Image, arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn NegateImageChannel(arg1: *mut Image, arg2: ChannelType,
                          arg3: MagickBooleanType) -> MagickBooleanType;
    fn NormalizeImage(arg1: *mut Image) -> MagickBooleanType;
    fn NormalizeImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    fn SigmoidalContrastImage(arg1: *mut Image, arg2: MagickBooleanType,
                              arg3: *c_schar) -> MagickBooleanType;
    fn SigmoidalContrastImageChannel(arg1: *mut Image, arg2: ChannelType,
                                     arg3: MagickBooleanType, arg4: c_double,
                                     arg5: c_double) -> MagickBooleanType;
    fn EnhanceImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn GetImageChannelFeatures(arg1: *Image, arg2: size_t,
                               arg3: *mut ExceptionInfo) ->
     *mut ChannelFeatures;
    fn ForwardFourierTransformImage(arg1: *Image, arg2: MagickBooleanType,
                                    arg3: *mut ExceptionInfo) -> *mut Image;
    fn InverseFourierTransformImage(arg1: *Image, arg2: *Image,
                                    arg3: MagickBooleanType,
                                    arg4: *mut ExceptionInfo) -> *mut Image;
    fn AddNoiseImage(arg1: *Image, arg2: NoiseType, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn AddNoiseImageChannel(arg1: *Image, arg2: ChannelType, arg3: NoiseType,
                            arg4: *mut ExceptionInfo) -> *mut Image;
    fn BlueShiftImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn CharcoalImage(arg1: *Image, arg2: c_double, arg3: c_double,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    fn ColorizeImage(arg1: *Image, arg2: *c_schar, arg3: PixelPacket,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    fn ColorMatrixImage(arg1: *Image, kernel: *KernelInfo,
                        arg2: *mut ExceptionInfo) -> *mut Image;
    fn FxImage(arg1: *Image, arg2: *c_schar, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn FxImageChannel(arg1: *Image, arg2: ChannelType, arg3: *c_schar,
                      arg4: *mut ExceptionInfo) -> *mut Image;
    fn ImplodeImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn MorphImages(arg1: *Image, arg2: size_t, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn PolaroidImage(arg1: *Image, arg2: *DrawInfo, arg3: c_double,
                     arg4: *mut ExceptionInfo) -> *mut Image;
    fn SepiaToneImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn ShadowImage(arg1: *Image, arg2: c_double, arg3: c_double,
                   arg4: ssize_t, arg5: ssize_t, arg6: *mut ExceptionInfo) ->
     *mut Image;
    fn SketchImage(arg1: *Image, arg2: c_double, arg3: c_double,
                   arg4: c_double, arg5: *mut ExceptionInfo) -> *mut Image;
    fn SteganoImage(arg1: *Image, arg2: *Image, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn StereoImage(arg1: *Image, arg2: *Image, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn StereoAnaglyphImage(arg1: *Image, arg2: *Image, arg3: ssize_t,
                           arg4: ssize_t, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn SwirlImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn TintImage(arg1: *Image, arg2: *c_schar, arg3: PixelPacket,
                 arg4: *mut ExceptionInfo) -> *mut Image;
    fn VignetteImage(arg1: *Image, arg2: c_double, arg3: c_double,
                     arg4: ssize_t, arg5: ssize_t, arg6: *mut ExceptionInfo)
     -> *mut Image;
    fn WaveImage(arg1: *Image, arg2: c_double, arg3: c_double,
                 arg4: *mut ExceptionInfo) -> *mut Image;
    fn PlasmaImage(arg1: *mut Image, arg2: *SegmentInfo, arg3: size_t,
                   arg4: size_t) -> MagickBooleanType;
    fn SolarizeImage(arg1: *mut Image, arg2: c_double) -> MagickBooleanType;
    fn SolarizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                            arg3: c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetRandomValue(arg1: *mut RandomInfo) -> c_double;
    fn GetPseudoRandomValue(arg1: *mut RandomInfo) -> c_double;
    fn RandomComponentGenesis() -> MagickBooleanType;
    fn AcquireRandomInfo() -> *mut RandomInfo;
    fn DestroyRandomInfo(arg1: *mut RandomInfo) -> *mut RandomInfo;
    fn GetRandomKey(arg1: *mut RandomInfo, arg2: size_t) -> *mut StringInfo;
    fn GetRandomSecretKey(arg1: *RandomInfo) -> c_ulong;
    fn RandomComponentTerminus();
    fn SeedPseudoRandomGenerator(arg1: c_ulong);
    fn SetRandomKey(arg1: *mut RandomInfo, arg2: size_t, arg3: *mut c_uchar);
    fn SetRandomSecretKey(arg1: c_ulong);
    fn SetRandomTrueRandom(arg1: MagickBooleanType);
    fn ExpandAffine(arg1: *AffineMatrix) -> c_double;
    fn GenerateDifferentialNoise(arg1: *mut RandomInfo, arg2: Quantum,
                                 arg3: NoiseType, arg4: MagickRealType) ->
     c_double;
    fn GetOptimalKernelWidth(arg1: c_double, arg2: c_double) -> size_t;
    fn GetOptimalKernelWidth1D(arg1: c_double, arg2: c_double) -> size_t;
    fn GetOptimalKernelWidth2D(arg1: c_double, arg2: c_double) -> size_t;
    fn ConvertHCLToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                       arg4: *mut Quantum, arg5: *mut Quantum,
                       arg6: *mut Quantum);
    fn ConvertHSBToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                       arg4: *mut Quantum, arg5: *mut Quantum,
                       arg6: *mut Quantum);
    fn ConvertHSLToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                       arg4: *mut Quantum, arg5: *mut Quantum,
                       arg6: *mut Quantum);
    fn ConvertHWBToRGB(arg1: c_double, arg2: c_double, arg3: c_double,
                       arg4: *mut Quantum, arg5: *mut Quantum,
                       arg6: *mut Quantum);
    fn ConvertRGBToHCL(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                       arg4: *mut c_double, arg5: *mut c_double,
                       arg6: *mut c_double);
    fn ConvertRGBToHSB(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                       arg4: *mut c_double, arg5: *mut c_double,
                       arg6: *mut c_double);
    fn ConvertRGBToHSL(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                       arg4: *mut c_double, arg5: *mut c_double,
                       arg6: *mut c_double);
    fn ConvertRGBToHWB(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                       arg4: *mut c_double, arg5: *mut c_double,
                       arg6: *mut c_double);
    fn GetImageHistogram(arg1: *Image, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut ColorPacket;
    fn UniqueImageColors(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    fn IsHistogramImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn IsPaletteImage(arg1: *Image, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn MinMaxStretchImage(arg1: *mut Image, arg2: ChannelType, arg3: c_double,
                          arg4: c_double) -> MagickBooleanType;
    fn GetNumberColors(arg1: *Image, arg2: *mut FILE,
                       arg3: *mut ExceptionInfo) -> size_t;
    fn IdentifyImage(arg1: *mut Image, arg2: *mut FILE,
                     arg3: MagickBooleanType) -> MagickBooleanType;
    fn GetImageViewException(arg1: *ImageView, arg2: *mut ExceptionType) ->
     *mut c_schar;
    fn GetImageViewVirtualIndexes(arg1: *ImageView) -> *IndexPacket;
    fn GetImageViewVirtualPixels(arg1: *ImageView) -> *PixelPacket;
    fn GetImageViewImage(arg1: *ImageView) -> *mut Image;
    fn CloneImageView(arg1: *ImageView) -> *mut ImageView;
    fn DestroyImageView(arg1: *mut ImageView) -> *mut ImageView;
    fn NewImageView(arg1: *mut Image) -> *mut ImageView;
    fn NewImageViewRegion(arg1: *mut Image, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t) -> *mut ImageView;
    fn GetImageViewAuthenticIndexes(arg1: *ImageView) -> *mut IndexPacket;
    fn DuplexTransferImageViewIterator(arg1: *mut ImageView,
                                       arg2: *mut ImageView,
                                       arg3: *mut ImageView,
                                       arg4: DuplexTransferImageViewMethod,
                                       arg5: *mut c_void) ->
     MagickBooleanType;
    fn GetImageViewIterator(arg1: *mut ImageView, arg2: GetImageViewMethod,
                            arg3: *mut c_void) -> MagickBooleanType;
    fn IsImageView(arg1: *ImageView) -> MagickBooleanType;
    fn SetImageViewIterator(arg1: *mut ImageView, arg2: SetImageViewMethod,
                            arg3: *mut c_void) -> MagickBooleanType;
    fn TransferImageViewIterator(arg1: *mut ImageView, arg2: *mut ImageView,
                                 arg3: TransferImageViewMethod,
                                 arg4: *mut c_void) -> MagickBooleanType;
    fn UpdateImageViewIterator(arg1: *mut ImageView,
                               arg2: UpdateImageViewMethod, arg3: *mut c_void)
     -> MagickBooleanType;
    fn GetImageViewAuthenticPixels(arg1: *ImageView) -> *mut PixelPacket;
    fn GetImageViewExtent(arg1: *ImageView) -> RectangleInfo;
    fn SetImageViewDescription(arg1: *mut ImageView, arg2: *c_schar);
    fn SetImageViewThreads(arg1: *mut ImageView, arg2: size_t);
    fn CloneImageList(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn CloneImages(arg1: *Image, arg2: *c_schar, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn DestroyImageList(arg1: *mut Image) -> *mut Image;
    fn DuplicateImages(arg1: *mut Image, arg2: size_t, arg3: *c_schar,
                       arg4: *mut ExceptionInfo) -> *mut Image;
    fn GetFirstImageInList(arg1: *Image) -> *mut Image;
    fn GetImageFromList(arg1: *Image, arg2: ssize_t) -> *mut Image;
    fn GetLastImageInList(arg1: *Image) -> *mut Image;
    fn GetNextImageInList(arg1: *Image) -> *mut Image;
    fn GetPreviousImageInList(arg1: *Image) -> *mut Image;
    fn ImageListToArray(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut *mut Image;
    fn NewImageList() -> *mut Image;
    fn RemoveImageFromList(arg1: *mut *mut Image) -> *mut Image;
    fn RemoveLastImageFromList(arg1: *mut *mut Image) -> *mut Image;
    fn RemoveFirstImageFromList(arg1: *mut *mut Image) -> *mut Image;
    fn SpliceImageIntoList(arg1: *mut *mut Image, arg2: size_t, arg3: *Image)
     -> *mut Image;
    fn SplitImageList(arg1: *mut Image) -> *mut Image;
    fn SyncNextImageInList(arg1: *Image) -> *mut Image;
    fn GetImageListLength(arg1: *Image) -> size_t;
    fn GetImageIndexInList(arg1: *Image) -> ssize_t;
    fn AppendImageToList(arg1: *mut *mut Image, arg2: *Image);
    fn DeleteImageFromList(arg1: *mut *mut Image);
    fn DeleteImages(arg1: *mut *mut Image, arg2: *c_schar,
                    arg3: *mut ExceptionInfo);
    fn InsertImageInList(arg1: *mut *mut Image, arg2: *mut Image);
    fn PrependImageToList(arg1: *mut *mut Image, arg2: *mut Image);
    fn ReplaceImageInList(arg1: *mut *mut Image, arg2: *mut Image);
    fn ReplaceImageInListReturnLast(arg1: *mut *mut Image, arg2: *mut Image);
    fn ReverseImageList(arg1: *mut *mut Image);
    fn SyncImageList(arg1: *mut Image);
    fn GetLogList(arg1: *c_schar, arg2: *mut size_t, arg3: *mut ExceptionInfo)
     -> *mut *mut c_schar;
    fn GetLogName() -> *c_schar;
    fn SetLogName(arg1: *c_schar) -> *c_schar;
    fn GetLogInfoList(arg1: *c_schar, arg2: *mut size_t,
                      arg3: *mut ExceptionInfo) -> *mut *LogInfo;
    fn SetLogEventMask(arg1: *c_schar) -> LogEventType;
    fn IsEventLogging() -> MagickBooleanType;
    fn ListLogInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn LogComponentGenesis() -> MagickBooleanType;
    fn LogMagickEvent(arg1: LogEventType, arg2: *c_schar, arg3: *c_schar,
                      arg4: size_t, arg5: *c_schar) -> MagickBooleanType;
    /* TODO: handle the __va_list_tag type
    fn LogMagickEventList(arg1: LogEventType, arg2: *c_schar, arg3: *c_schar,
                          arg4: size_t, arg5: *c_schar,
                          arg6: *mut __va_list_tag) -> MagickBooleanType;
    */
    fn CloseMagickLog();
    fn LogComponentTerminus();
    fn SetLogFormat(arg1: *c_schar);
    fn GetMagicList(arg1: *c_schar, arg2: *mut size_t,
                    arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetMagicName(arg1: *MagicInfo) -> *c_schar;
    fn ListMagicInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn MagicComponentGenesis() -> MagickBooleanType;
    fn GetMagicInfo(arg1: *c_uchar, arg2: size_t, arg3: *mut ExceptionInfo) ->
     *MagicInfo;
    fn GetMagicInfoList(arg1: *c_schar, arg2: *mut size_t,
                        arg3: *mut ExceptionInfo) -> *mut *MagicInfo;
    fn MagicComponentTerminus();
    fn GetMagickList(arg1: *c_schar, arg2: *mut size_t,
                     arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetMagickDescription(arg1: *MagickInfo) -> *c_schar;
    fn GetImageDecoder(arg1: *MagickInfo) -> *mut *u8;
    fn GetImageEncoder(arg1: *MagickInfo) -> *mut *u8;
    fn GetMagickPrecision() -> c_int;
    fn SetMagickPrecision(arg1: c_int) -> c_int;
    fn GetImageMagick(arg1: *c_uchar, arg2: size_t, arg3: *mut c_schar) ->
     MagickBooleanType;
    fn GetMagickAdjoin(arg1: *MagickInfo) -> MagickBooleanType;
    fn GetMagickBlobSupport(arg1: *MagickInfo) -> MagickBooleanType;
    fn GetMagickEndianSupport(arg1: *MagickInfo) -> MagickBooleanType;
    fn GetMagickRawSupport(arg1: *MagickInfo) -> MagickBooleanType;
    fn GetMagickSeekableStream(arg1: *MagickInfo) -> MagickBooleanType;
    fn IsMagickInstantiated() -> MagickBooleanType;
    fn MagickComponentGenesis() -> MagickBooleanType;
    fn UnregisterMagickInfo(arg1: *c_schar) -> MagickBooleanType;
    fn GetMagickInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) -> *MagickInfo;
    fn GetMagickInfoList(arg1: *c_schar, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut *MagickInfo;
    fn RegisterMagickInfo(arg1: *mut MagickInfo) -> *mut MagickInfo;
    fn SetMagickInfo(arg1: *c_schar) -> *mut MagickInfo;
    fn GetMagickThreadSupport(arg1: *MagickInfo) -> MagickStatusType;
    fn MagickComponentTerminus();
    fn MagickCoreGenesis(arg1: *c_schar, arg2: MagickBooleanType);
    fn MagickCoreTerminus();
    fn AcquireMagickMatrix(arg1: size_t, arg2: size_t) -> *mut *mut c_double;
    fn RelinquishMagickMatrix(arg1: *mut *mut c_double, arg2: size_t) ->
     *mut *mut c_double;
    fn GaussJordanElimination(arg1: *mut *mut c_double,
                              arg2: *mut *mut c_double, arg3: size_t,
                              arg4: size_t) -> MagickBooleanType;
    fn LeastSquaresAddTerms(arg1: *mut *mut c_double,
                            arg2: *mut *mut c_double, arg3: *c_double,
                            arg4: *c_double, arg5: size_t, arg6: size_t);
    fn AcquireAlignedMemory(arg1: size_t, arg2: size_t) -> *mut c_void;
    fn AcquireMagickMemory(arg1: size_t) -> *mut c_void;
    fn AcquireQuantumMemory(arg1: size_t, arg2: size_t) -> *mut c_void;
    fn CopyMagickMemory(arg1: *mut c_void, arg2: *c_void, arg3: size_t) ->
     *mut c_void;
    fn DestroyMagickMemory();
    fn GetMagickMemoryMethods(arg1: *mut AcquireMemoryHandler,
                              arg2: *mut ResizeMemoryHandler,
                              arg3: *mut DestroyMemoryHandler);
    fn RelinquishAlignedMemory(arg1: *mut c_void) -> *mut c_void;
    fn RelinquishMagickMemory(arg1: *mut c_void) -> *mut c_void;
    fn ResetMagickMemory(arg1: *mut c_void, arg2: c_int, arg3: size_t) ->
     *mut c_void;
    fn ResizeMagickMemory(arg1: *mut c_void, arg2: size_t) -> *mut c_void;
    fn ResizeQuantumMemory(arg1: *mut c_void, arg2: size_t, arg3: size_t) ->
     *mut c_void;
    fn SetMagickMemoryMethods(arg1: AcquireMemoryHandler,
                              arg2: ResizeMemoryHandler,
                              arg3: DestroyMemoryHandler);
    fn GetMagickHomeURL() -> *mut c_schar;
    fn GetMagickCopyright() -> *c_schar;
    fn GetMagickFeatures() -> *c_schar;
    fn GetMagickPackageName() -> *c_schar;
    fn GetMagickQuantumDepth(arg1: *mut size_t) -> *c_schar;
    fn GetMagickQuantumRange(arg1: *mut size_t) -> *c_schar;
    fn GetMagickReleaseDate() -> *c_schar;
    fn GetMagickVersion(arg1: *mut size_t) -> *c_schar;
    fn GetModuleList(arg1: *c_schar, arg2: MagickModuleType,
                     arg3: *mut size_t, arg4: *mut ExceptionInfo) ->
     *mut *mut c_schar;
    fn GetModuleInfoList(arg1: *c_schar, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut *ModuleInfo;
    fn InitializeModuleList(arg1: *mut ExceptionInfo) -> MagickBooleanType;
    fn InvokeDynamicImageFilter(arg1: *c_schar, arg2: *mut *mut Image,
                                arg3: c_int, arg4: *mut *c_schar,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ListModuleInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ModuleComponentGenesis() -> MagickBooleanType;
    fn OpenModule(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn OpenModules(arg1: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetModuleInfo(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut ModuleInfo;
    fn DestroyModuleList();
    fn ModuleComponentTerminus();
    fn RegisterStaticModules();
    fn UnregisterStaticModules();
    fn GetMimeList(arg1: *c_schar, arg2: *mut size_t,
                   arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn MagickToMime(arg1: *c_schar) -> *mut c_schar;
    fn GetMimeDescription(arg1: *MimeInfo) -> *c_schar;
    fn GetMimeType(arg1: *MimeInfo) -> *c_schar;
    fn ListMimeInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn LoadMimeLists(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn MimeComponentGenesis() -> MagickBooleanType;
    fn GetMimeInfo(arg1: *c_schar, arg2: *c_uchar, arg3: size_t,
                   arg4: *mut ExceptionInfo) -> *MimeInfo;
    fn GetMimeInfoList(arg1: *c_schar, arg2: *mut size_t,
                       arg3: *mut ExceptionInfo) -> *mut *MimeInfo;
    fn MimeComponentTerminus();
    fn MontageImages(arg1: *Image, arg2: *MontageInfo,
                     arg3: *mut ExceptionInfo) -> *mut Image;
    fn MontageImageList(arg1: *ImageInfo, arg2: *MontageInfo, arg3: *Image,
                        arg4: *mut ExceptionInfo) -> *mut Image;
    fn CloneMontageInfo(arg1: *ImageInfo, arg2: *MontageInfo) ->
     *mut MontageInfo;
    fn DestroyMontageInfo(arg1: *mut MontageInfo) -> *mut MontageInfo;
    fn GetMontageInfo(arg1: *ImageInfo, arg2: *mut MontageInfo);
    fn GetCommandOptions(arg1: CommandOption) -> *mut *mut c_schar;
    fn GetNextImageOption(arg1: *ImageInfo) -> *mut c_schar;
    fn RemoveImageOption(arg1: *mut ImageInfo, arg2: *c_schar) ->
     *mut c_schar;
    fn CommandOptionToMnemonic(arg1: CommandOption, arg2: ssize_t) ->
     *c_schar;
    fn GetImageOption(arg1: *ImageInfo, arg2: *c_schar) -> *c_schar;
    fn CloneImageOptions(arg1: *mut ImageInfo, arg2: *ImageInfo) ->
     MagickBooleanType;
    fn DefineImageOption(arg1: *mut ImageInfo, arg2: *c_schar) ->
     MagickBooleanType;
    fn DeleteImageOption(arg1: *mut ImageInfo, arg2: *c_schar) ->
     MagickBooleanType;
    fn IsCommandOption(arg1: *c_schar) -> MagickBooleanType;
    fn ListCommandOptions(arg1: *mut FILE, arg2: CommandOption,
                          arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn SetImageOption(arg1: *mut ImageInfo, arg2: *c_schar, arg3: *c_schar) ->
     MagickBooleanType;
    fn GetCommandOptionFlags(arg1: CommandOption, arg2: MagickBooleanType,
                             arg3: *c_schar) -> ssize_t;
    fn ParseChannelOption(arg1: *c_schar) -> ssize_t;
    fn ParseCommandOption(arg1: CommandOption, arg2: MagickBooleanType,
                          arg3: *c_schar) -> ssize_t;
    fn DestroyImageOptions(arg1: *mut ImageInfo);
    fn ResetImageOptions(arg1: *ImageInfo);
    fn ResetImageOptionIterator(arg1: *ImageInfo);
    fn OilPaintImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn FloodfillPaintImage(arg1: *mut Image, arg2: ChannelType,
                           arg3: *DrawInfo, arg4: *MagickPixelPacket,
                           arg5: ssize_t, arg6: ssize_t,
                           arg7: MagickBooleanType) -> MagickBooleanType;
    fn GradientImage(arg1: *mut Image, arg2: GradientType, arg3: SpreadMethod,
                     arg4: *PixelPacket, arg5: *PixelPacket) ->
     MagickBooleanType;
    fn OpaquePaintImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                        arg3: *MagickPixelPacket, arg4: MagickBooleanType) ->
     MagickBooleanType;
    fn OpaquePaintImageChannel(arg1: *mut Image, arg2: ChannelType,
                               arg3: *MagickPixelPacket,
                               arg4: *MagickPixelPacket,
                               arg5: MagickBooleanType) -> MagickBooleanType;
    fn TransparentPaintImage(arg1: *mut Image, arg2: *MagickPixelPacket,
                             arg3: Quantum, arg4: MagickBooleanType) ->
     MagickBooleanType;
    fn TransparentPaintImageChroma(arg1: *mut Image, arg2: *MagickPixelPacket,
                                   arg3: *MagickPixelPacket, arg4: Quantum,
                                   arg5: MagickBooleanType) ->
     MagickBooleanType;
    fn GetPolicyValue(name: *c_schar) -> *mut c_schar;
    fn GetPolicyList(arg1: *c_schar, arg2: *mut size_t,
                     arg3: *mut ExceptionInfo) -> *mut *mut c_schar;
    fn GetPolicyInfoList(arg1: *c_schar, arg2: *mut size_t,
                         arg3: *mut ExceptionInfo) -> *mut *PolicyInfo;
    fn IsRightsAuthorized(arg1: PolicyDomain, arg2: PolicyRights,
                          arg3: *c_schar) -> MagickBooleanType;
    fn ListPolicyInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn PolicyComponentGenesis() -> MagickBooleanType;
    fn PolicyComponentTerminus();
    fn GetImageTotalInkDensity(image: *mut Image) -> c_double;
    fn GetNextImageProperty(arg1: *Image) -> *mut c_schar;
    fn InterpretImageProperties(arg1: *ImageInfo, arg2: *mut Image,
                                arg3: *c_schar) -> *mut c_schar;
    fn RemoveImageProperty(arg1: *mut Image, arg2: *c_schar) -> *mut c_schar;
    fn GetImageProperty(arg1: *Image, arg2: *c_schar) -> *c_schar;
    fn GetMagickProperty(arg1: *ImageInfo, arg2: *mut Image, arg3: *c_schar)
     -> *c_schar;
    fn CloneImageProperties(arg1: *mut Image, arg2: *Image) ->
     MagickBooleanType;
    fn DefineImageProperty(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn DeleteImageProperty(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn FormatImageProperty(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    fn SetImageProperty(arg1: *mut Image, arg2: *c_schar, arg3: *c_schar) ->
     MagickBooleanType;
    fn DestroyImageProperties(arg1: *mut Image);
    fn ResetImagePropertyIterator(arg1: *Image);
    fn AcquireUniqueFileResource(arg1: *mut c_schar) -> c_int;
    fn AcquireMagickResource(arg1: ResourceType, arg2: MagickSizeType) ->
     MagickBooleanType;
    fn GetPathTemplate(arg1: *mut c_schar) -> MagickBooleanType;
    fn ListMagickResourceInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn RelinquishUniqueFileResource(arg1: *c_schar) -> MagickBooleanType;
    fn ResourceComponentGenesis() -> MagickBooleanType;
    fn SetMagickResourceLimit(arg1: ResourceType, arg2: MagickSizeType) ->
     MagickBooleanType;
    fn GetMagickResource(arg1: ResourceType) -> MagickSizeType;
    fn GetMagickResourceLimit(arg1: ResourceType) -> MagickSizeType;
    fn AsynchronousResourceComponentTerminus();
    fn RelinquishMagickResource(arg1: ResourceType, arg2: MagickSizeType);
    fn ResourceComponentTerminus();
    fn GetImageDynamicThreshold(arg1: *Image, arg2: c_double, arg3: c_double,
                                arg4: *mut MagickPixelPacket,
                                arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn SegmentImage(arg1: *mut Image, arg2: ColorspaceType,
                    arg3: MagickBooleanType, arg4: c_double, arg5: c_double)
     -> MagickBooleanType;
    fn DeskewImage(arg1: *Image, arg2: c_double, arg3: *mut ExceptionInfo) ->
     *mut Image;
    fn IntegralRotateImage(arg1: *Image, arg2: size_t,
                           arg3: *mut ExceptionInfo) -> *mut Image;
    fn ShearImage(arg1: *Image, arg2: c_double, arg3: c_double,
                  arg4: *mut ExceptionInfo) -> *mut Image;
    fn ShearRotateImage(arg1: *Image, arg2: c_double,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    fn SignatureImage(arg1: *mut Image) -> MagickBooleanType;
    fn AddValueToSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void,
                           arg3: *c_void) -> MagickBooleanType;
    fn DeleteNodeByValueFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void)
     -> MagickBooleanType;
    fn DeleteNodeFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void) ->
     MagickBooleanType;
    fn GetNextKeyInSplayTree(arg1: *mut SplayTreeInfo) -> *c_void;
    fn GetNextValueInSplayTree(arg1: *mut SplayTreeInfo) -> *c_void;
    fn GetValueFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void) ->
     *c_void;
    fn CompareSplayTreeString(arg1: *c_void, arg2: *c_void) -> c_int;
    fn CompareSplayTreeStringInfo(arg1: *c_void, arg2: *c_void) -> c_int;
    fn CloneSplayTree(arg1: *mut SplayTreeInfo, arg2: *u8, arg3: *u8) ->
     *mut SplayTreeInfo;
    fn DestroySplayTree(arg1: *mut SplayTreeInfo) -> *mut SplayTreeInfo;
    fn NewSplayTree(arg1: *u8, arg2: *u8, arg3: *u8) -> *mut SplayTreeInfo;
    fn GetNumberOfNodesInSplayTree(arg1: *SplayTreeInfo) -> size_t;
    fn RemoveNodeByValueFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void)
     -> *mut c_void;
    fn RemoveNodeFromSplayTree(arg1: *mut SplayTreeInfo, arg2: *c_void) ->
     *mut c_void;
    fn ResetSplayTree(arg1: *mut SplayTreeInfo);
    fn ResetSplayTreeIterator(arg1: *mut SplayTreeInfo);
    fn GetImageChannelStatistics(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut ChannelStatistics;
    fn EvaluateImages(arg1: *Image, arg2: MagickEvaluateOperator,
                      arg3: *mut ExceptionInfo) -> *mut Image;
    fn PolynomialImage(arg1: *Image, arg2: size_t, arg3: *c_double,
                       arg4: *mut ExceptionInfo) -> *mut Image;
    fn PolynomialImageChannel(arg1: *Image, arg2: ChannelType, arg3: size_t,
                              arg4: *c_double, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn StatisticImage(arg1: *Image, arg2: StatisticType, arg3: size_t,
                      arg4: size_t, arg5: *mut ExceptionInfo) -> *mut Image;
    fn StatisticImageChannel(arg1: *Image, arg2: ChannelType,
                             arg3: StatisticType, arg4: size_t, arg5: size_t,
                             arg6: *mut ExceptionInfo) -> *mut Image;
    fn EvaluateImage(arg1: *mut Image, arg2: MagickEvaluateOperator,
                     arg3: c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn EvaluateImageChannel(arg1: *mut Image, arg2: ChannelType,
                            arg3: MagickEvaluateOperator, arg4: c_double,
                            arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn FunctionImage(arg1: *mut Image, arg2: MagickFunction, arg3: size_t,
                     arg4: *c_double, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn FunctionImageChannel(arg1: *mut Image, arg2: ChannelType,
                            arg3: MagickFunction, arg4: size_t,
                            arg5: *c_double, arg6: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn GetImageChannelExtrema(arg1: *Image, arg2: ChannelType,
                              arg3: *mut size_t, arg4: *mut size_t,
                              arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageChannelMean(arg1: *Image, arg2: ChannelType,
                           arg3: *mut c_double, arg4: *mut c_double,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageChannelKurtosis(arg1: *Image, arg2: ChannelType,
                               arg3: *mut c_double, arg4: *mut c_double,
                               arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageChannelRange(arg1: *Image, arg2: ChannelType,
                            arg3: *mut c_double, arg4: *mut c_double,
                            arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageExtrema(arg1: *Image, arg2: *mut size_t, arg3: *mut size_t,
                       arg4: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageRange(arg1: *Image, arg2: *mut c_double, arg3: *mut c_double,
                     arg4: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageMean(arg1: *Image, arg2: *mut c_double, arg3: *mut c_double,
                    arg4: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetImageKurtosis(arg1: *Image, arg2: *mut c_double,
                        arg3: *mut c_double, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn Tokenizer(arg1: *mut TokenInfo, arg2: c_uint, arg3: *mut c_schar,
                 arg4: size_t, arg5: *c_schar, arg6: *c_schar, arg7: *c_schar,
                 arg8: *c_schar, arg9: c_schar, arg10: *mut c_schar,
                 arg11: *mut c_int, arg12: *mut c_schar) -> c_int;
    fn GlobExpression(arg1: *c_schar, arg2: *c_schar, arg3: MagickBooleanType)
     -> MagickBooleanType;
    fn IsGlob(arg1: *c_schar) -> MagickBooleanType;
    fn IsMagickTrue(arg1: *c_schar) -> MagickBooleanType;
    fn AcquireTokenInfo() -> *mut TokenInfo;
    fn DestroyTokenInfo(arg1: *mut TokenInfo) -> *mut TokenInfo;
    fn GetMagickToken(arg1: *c_schar, arg2: *mut *c_schar,
                      arg3: *mut c_schar);
    fn ChopImage(arg1: *Image, arg2: *RectangleInfo, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn ConsolidateCMYKImages(arg1: *Image, arg2: *mut ExceptionInfo) ->
     *mut Image;
    fn CropImage(arg1: *Image, arg2: *RectangleInfo, arg3: *mut ExceptionInfo)
     -> *mut Image;
    fn CropImageToTiles(arg1: *Image, arg2: *c_schar,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    fn ExcerptImage(arg1: *Image, arg2: *RectangleInfo,
                    arg3: *mut ExceptionInfo) -> *mut Image;
    fn ExtentImage(arg1: *Image, arg2: *RectangleInfo,
                   arg3: *mut ExceptionInfo) -> *mut Image;
    fn FlipImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn FlopImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn RollImage(arg1: *Image, arg2: ssize_t, arg3: ssize_t,
                 arg4: *mut ExceptionInfo) -> *mut Image;
    fn ShaveImage(arg1: *Image, arg2: *RectangleInfo,
                  arg3: *mut ExceptionInfo) -> *mut Image;
    fn SpliceImage(arg1: *Image, arg2: *RectangleInfo,
                   arg3: *mut ExceptionInfo) -> *mut Image;
    fn TransposeImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn TransverseImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn TrimImage(arg1: *Image, arg2: *mut ExceptionInfo) -> *mut Image;
    fn TransformImage(arg1: *mut *mut Image, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    fn TransformImages(arg1: *mut *mut Image, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    fn AdaptiveThresholdImage(arg1: *Image, arg2: size_t, arg3: size_t,
                              arg4: ssize_t, arg5: *mut ExceptionInfo) ->
     *mut Image;
    fn DestroyThresholdMap(arg1: *mut ThresholdMap) -> *mut ThresholdMap;
    fn GetThresholdMap(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut ThresholdMap;
    fn BilevelImage(arg1: *mut Image, arg2: c_double) -> MagickBooleanType;
    fn BilevelImageChannel(arg1: *mut Image, arg2: ChannelType,
                           arg3: c_double) -> MagickBooleanType;
    fn BlackThresholdImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn BlackThresholdImageChannel(arg1: *mut Image, arg2: ChannelType,
                                  arg3: *c_schar, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn ClampImage(arg1: *mut Image) -> MagickBooleanType;
    fn ClampImageChannel(arg1: *mut Image, arg2: ChannelType) ->
     MagickBooleanType;
    fn ListThresholdMaps(arg1: *mut FILE, arg2: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn OrderedDitherImage(arg1: *mut Image) -> MagickBooleanType;
    fn OrderedDitherImageChannel(arg1: *mut Image, arg2: ChannelType,
                                 arg3: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn OrderedPosterizeImage(arg1: *mut Image, arg2: *c_schar,
                             arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn OrderedPosterizeImageChannel(arg1: *mut Image, arg2: ChannelType,
                                    arg3: *c_schar, arg4: *mut ExceptionInfo)
     -> MagickBooleanType;
    fn PerceptibleImage(arg1: *mut Image, arg2: c_double) ->
     MagickBooleanType;
    fn PerceptibleImageChannel(arg1: *mut Image, arg2: ChannelType,
                               arg3: c_double) -> MagickBooleanType;
    fn RandomThresholdImage(arg1: *mut Image, arg2: *c_schar,
                            arg3: *mut ExceptionInfo) -> MagickBooleanType;
    fn RandomThresholdImageChannel(arg1: *mut Image, arg2: ChannelType,
                                   arg3: *c_schar, arg4: *mut ExceptionInfo)
     -> MagickBooleanType;
    fn WhiteThresholdImage(arg1: *mut Image, arg2: *c_schar) ->
     MagickBooleanType;
    fn WhiteThresholdImageChannel(arg1: *mut Image, arg2: ChannelType,
                                  arg3: *c_schar, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn Base64Encode(arg1: *c_uchar, arg2: size_t, arg3: *mut size_t) ->
     *mut c_schar;
    fn GetPathComponents(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    fn ListFiles(arg1: *c_schar, arg2: *c_schar, arg3: *mut size_t) ->
     *mut *mut c_schar;
    fn SystemCommand(arg1: MagickBooleanType, arg2: MagickBooleanType,
                     arg3: *c_schar, arg4: *mut ExceptionInfo) -> c_int;
    fn AcquireUniqueFilename(arg1: *mut c_schar) -> MagickBooleanType;
    fn AcquireUniqueSymbolicLink(arg1: *c_schar, arg2: *mut c_schar) ->
     MagickBooleanType;
    fn ExpandFilenames(arg1: *mut c_int, arg2: *mut *mut *mut c_schar) ->
     MagickBooleanType;
    fn GetPathAttributes(arg1: *c_schar, arg2: *mut c_void) ->
     MagickBooleanType;
    fn GetExecutionPath(arg1: *mut c_schar, arg2: size_t) ->
     MagickBooleanType;
    fn IsPathAccessible(arg1: *c_schar) -> MagickBooleanType;
    fn MultilineCensus(arg1: *c_schar) -> size_t;
    fn GetMagickPageSize() -> ssize_t;
    fn Base64Decode(arg1: *c_schar, arg2: *mut size_t) -> *mut c_uchar;
    fn AppendImageFormat(arg1: *c_schar, arg2: *mut c_schar);
    fn ChopPathComponents(arg1: *mut c_schar, arg2: size_t);
    fn ExpandFilename(arg1: *mut c_schar);
    fn GetPathComponent(arg1: *c_schar, arg2: PathType, arg3: *mut c_schar);
    fn MagickDelay(arg1: MagickSizeType);
    fn CanonicalXMLContent(arg1: *c_schar, arg2: MagickBooleanType) ->
     *mut c_schar;
    fn XMLTreeInfoToXML(arg1: *mut XMLTreeInfo) -> *mut c_schar;
    fn GetXMLTreeAttribute(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *c_schar;
    fn GetXMLTreeContent(arg1: *mut XMLTreeInfo) -> *c_schar;
    fn GetXMLTreeProcessingInstructions(arg1: *mut XMLTreeInfo,
                                        arg2: *c_schar) -> *mut *c_schar;
    fn GetXMLTreeTag(arg1: *mut XMLTreeInfo) -> *c_schar;
    fn GetXMLTreeAttributes(arg1: *XMLTreeInfo, arg2: *mut SplayTreeInfo) ->
     MagickBooleanType;
    fn AddChildToXMLTree(arg1: *mut XMLTreeInfo, arg2: *c_schar, arg3: size_t)
     -> *mut XMLTreeInfo;
    fn AddPathToXMLTree(arg1: *mut XMLTreeInfo, arg2: *c_schar, arg3: size_t)
     -> *mut XMLTreeInfo;
    fn DestroyXMLTree(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    fn GetNextXMLTreeTag(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    fn GetXMLTreeChild(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *mut XMLTreeInfo;
    fn GetXMLTreeOrdered(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    fn GetXMLTreePath(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *mut XMLTreeInfo;
    fn GetXMLTreeSibling(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    fn InsertTagIntoXMLTree(arg1: *mut XMLTreeInfo, arg2: *mut XMLTreeInfo,
                            arg3: size_t) -> *mut XMLTreeInfo;
    fn NewXMLTree(arg1: *c_schar, arg2: *mut ExceptionInfo) ->
     *mut XMLTreeInfo;
    fn NewXMLTreeTag(arg1: *c_schar) -> *mut XMLTreeInfo;
    // TODO - This function causes a linker error
    //fn ParseTagFromXMLTree(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    fn PruneTagFromXMLTree(arg1: *mut XMLTreeInfo) -> *mut XMLTreeInfo;
    fn SetXMLTreeAttribute(arg1: *mut XMLTreeInfo, arg2: *c_schar,
                           arg3: *c_schar) -> *mut XMLTreeInfo;
    fn SetXMLTreeContent(arg1: *mut XMLTreeInfo, arg2: *c_schar) ->
     *mut XMLTreeInfo;
    fn XImportImage(arg1: *ImageInfo, arg2: *mut XImportInfo) -> *mut Image;
    fn XGetImportInfo(arg1: *mut XImportInfo);
    fn AnimateImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                           arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn CompareImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                           arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn CompositeImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                             arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                             arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn ConjureImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                           arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn ConvertImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                           arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn PixelGetColorAsNormalizedString(arg1: *PixelWand) -> *mut c_schar;
    fn PixelGetColorAsString(arg1: *PixelWand) -> *mut c_schar;
    fn PixelGetException(arg1: *PixelWand, arg2: *mut ExceptionType) ->
     *mut c_schar;
    fn PixelGetAlpha(arg1: *PixelWand) -> c_double;
    fn PixelGetBlack(arg1: *PixelWand) -> c_double;
    fn PixelGetBlue(arg1: *PixelWand) -> c_double;
    fn PixelGetCyan(arg1: *PixelWand) -> c_double;
    fn PixelGetFuzz(arg1: *PixelWand) -> c_double;
    fn PixelGetGreen(arg1: *PixelWand) -> c_double;
    fn PixelGetMagenta(arg1: *PixelWand) -> c_double;
    fn PixelGetOpacity(arg1: *PixelWand) -> c_double;
    fn PixelGetRed(arg1: *PixelWand) -> c_double;
    fn PixelGetYellow(arg1: *PixelWand) -> c_double;
    fn PixelGetExceptionType(arg1: *PixelWand) -> ExceptionType;
    fn PixelGetIndex(arg1: *PixelWand) -> IndexPacket;
    fn IsPixelWand(arg1: *PixelWand) -> MagickBooleanType;
    fn IsPixelWandSimilar(arg1: *mut PixelWand, arg2: *mut PixelWand,
                          arg3: c_double) -> MagickBooleanType;
    fn PixelClearException(arg1: *mut PixelWand) -> MagickBooleanType;
    fn PixelSetColor(arg1: *mut PixelWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn ClonePixelWand(arg1: *PixelWand) -> *mut PixelWand;
    fn ClonePixelWands(arg1: *mut *PixelWand, arg2: size_t) ->
     *mut *mut PixelWand;
    fn DestroyPixelWand(arg1: *mut PixelWand) -> *mut PixelWand;
    fn DestroyPixelWands(arg1: *mut *mut PixelWand, arg2: size_t) ->
     *mut *mut PixelWand;
    fn NewPixelWand() -> *mut PixelWand;
    fn NewPixelWands(arg1: size_t) -> *mut *mut PixelWand;
    fn PixelGetAlphaQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetBlackQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetBlueQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetCyanQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetGreenQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetMagentaQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetOpacityQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetRedQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetYellowQuantum(arg1: *PixelWand) -> Quantum;
    fn PixelGetColorCount(arg1: *PixelWand) -> size_t;
    fn ClearPixelWand(arg1: *mut PixelWand);
    fn PixelGetHSL(arg1: *PixelWand, arg2: *mut c_double, arg3: *mut c_double,
                   arg4: *mut c_double);
    fn PixelGetMagickColor(arg1: *PixelWand, arg2: *mut MagickPixelPacket);
    fn PixelGetQuantumColor(arg1: *PixelWand, arg2: *mut PixelPacket);
    fn PixelSetAlpha(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetAlphaQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetBlack(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetBlackQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetBlue(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetBlueQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetColorFromWand(arg1: *mut PixelWand, arg2: *PixelWand);
    fn PixelSetColorCount(arg1: *mut PixelWand, arg2: size_t);
    fn PixelSetCyan(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetCyanQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetFuzz(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetGreen(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetGreenQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetHSL(arg1: *mut PixelWand, arg2: c_double, arg3: c_double,
                   arg4: c_double);
    fn PixelSetIndex(arg1: *mut PixelWand, arg2: IndexPacket);
    fn PixelSetMagenta(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetMagentaQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetMagickColor(arg1: *mut PixelWand, arg2: *MagickPixelPacket);
    fn PixelSetOpacity(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetOpacityQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetQuantumColor(arg1: *mut PixelWand, arg2: *PixelPacket);
    fn PixelSetRed(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetRedQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn PixelSetYellow(arg1: *mut PixelWand, arg2: c_double);
    fn PixelSetYellowQuantum(arg1: *mut PixelWand, arg2: Quantum);
    fn DrawGetTextAlignment(arg1: *DrawingWand) -> AlignType;
    fn DrawGetClipPath(arg1: *DrawingWand) -> *mut c_schar;
    fn DrawGetException(arg1: *DrawingWand, arg2: *mut ExceptionType) ->
     *mut c_schar;
    fn DrawGetFont(arg1: *DrawingWand) -> *mut c_schar;
    fn DrawGetFontFamily(arg1: *DrawingWand) -> *mut c_schar;
    fn DrawGetTextEncoding(arg1: *DrawingWand) -> *mut c_schar;
    fn DrawGetVectorGraphics(arg1: *mut DrawingWand) -> *mut c_schar;
    fn DrawGetClipUnits(arg1: *DrawingWand) -> ClipPathUnits;
    fn DrawGetTextDecoration(arg1: *DrawingWand) -> DecorationType;
    fn DrawGetFillOpacity(arg1: *DrawingWand) -> c_double;
    fn DrawGetFontSize(arg1: *DrawingWand) -> c_double;
    fn DrawGetOpacity(arg1: *DrawingWand) -> c_double;
    fn DrawGetStrokeDashArray(arg1: *DrawingWand, arg2: *mut size_t) ->
     *mut c_double;
    fn DrawGetStrokeDashOffset(arg1: *DrawingWand) -> c_double;
    fn DrawGetStrokeOpacity(arg1: *DrawingWand) -> c_double;
    fn DrawGetStrokeWidth(arg1: *DrawingWand) -> c_double;
    fn DrawGetTextKerning(arg1: *mut DrawingWand) -> c_double;
    fn DrawGetTextInterlineSpacing(arg1: *mut DrawingWand) -> c_double;
    fn DrawGetTextInterwordSpacing(arg1: *mut DrawingWand) -> c_double;
    fn PeekDrawingWand(arg1: *DrawingWand) -> *mut DrawInfo;
    fn CloneDrawingWand(arg1: *DrawingWand) -> *mut DrawingWand;
    fn DestroyDrawingWand(arg1: *mut DrawingWand) -> *mut DrawingWand;
    fn DrawAllocateWand(arg1: *DrawInfo, arg2: *mut Image) ->
     *mut DrawingWand;
    fn NewDrawingWand() -> *mut DrawingWand;
    fn DrawGetExceptionType(arg1: *DrawingWand) -> ExceptionType;
    fn DrawGetClipRule(arg1: *DrawingWand) -> FillRule;
    fn DrawGetFillRule(arg1: *DrawingWand) -> FillRule;
    fn DrawGetGravity(arg1: *DrawingWand) -> GravityType;
    fn DrawGetStrokeLineCap(arg1: *DrawingWand) -> LineCap;
    fn DrawGetStrokeLineJoin(arg1: *DrawingWand) -> LineJoin;
    fn DrawClearException(arg1: *mut DrawingWand) -> MagickBooleanType;
    fn DrawComposite(arg1: *mut DrawingWand, arg2: CompositeOperator,
                     arg3: c_double, arg4: c_double, arg5: c_double,
                     arg6: c_double, arg7: *mut MagickWand) ->
     MagickBooleanType;
    fn DrawGetFontResolution(arg1: *DrawingWand, arg2: *mut c_double,
                             arg3: *mut c_double) -> MagickBooleanType;
    fn DrawGetStrokeAntialias(arg1: *DrawingWand) -> MagickBooleanType;
    fn DrawGetTextAntialias(arg1: *DrawingWand) -> MagickBooleanType;
    fn DrawPopPattern(arg1: *mut DrawingWand) -> MagickBooleanType;
    fn DrawPushPattern(arg1: *mut DrawingWand, arg2: *c_schar, arg3: c_double,
                       arg4: c_double, arg5: c_double, arg6: c_double) ->
     MagickBooleanType;
    fn DrawRender(arg1: *mut DrawingWand) -> MagickBooleanType;
    fn DrawSetClipPath(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn DrawSetFillPatternURL(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn DrawSetFont(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn DrawSetFontFamily(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn DrawSetFontResolution(arg1: *mut DrawingWand, arg2: c_double,
                             arg3: c_double) -> MagickBooleanType;
    fn DrawSetStrokeDashArray(arg1: *mut DrawingWand, arg2: size_t,
                              arg3: *c_double) -> MagickBooleanType;
    fn DrawSetStrokePatternURL(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn DrawSetVectorGraphics(arg1: *mut DrawingWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn IsDrawingWand(arg1: *DrawingWand) -> MagickBooleanType;
    fn PopDrawingWand(arg1: *mut DrawingWand) -> MagickBooleanType;
    fn PushDrawingWand(arg1: *mut DrawingWand) -> MagickBooleanType;
    fn DrawGetFontStretch(arg1: *DrawingWand) -> StretchType;
    fn DrawGetFontStyle(arg1: *DrawingWand) -> StyleType;
    fn DrawGetFontWeight(arg1: *DrawingWand) -> size_t;
    fn DrawGetStrokeMiterLimit(arg1: *DrawingWand) -> size_t;
    fn ClearDrawingWand(arg1: *mut DrawingWand);
    fn DrawAffine(arg1: *mut DrawingWand, arg2: *AffineMatrix);
    fn DrawAnnotation(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                      arg4: *c_uchar);
    fn DrawArc(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
               arg4: c_double, arg5: c_double, arg6: c_double,
               arg7: c_double);
    fn DrawBezier(arg1: *mut DrawingWand, arg2: size_t, arg3: *PointInfo);
    fn DrawGetBorderColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    fn DrawCircle(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                  arg4: c_double, arg5: c_double);
    fn DrawColor(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                 arg4: PaintMethod);
    fn DrawComment(arg1: *mut DrawingWand, arg2: *c_schar);
    fn DrawEllipse(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                   arg4: c_double, arg5: c_double, arg6: c_double,
                   arg7: c_double);
    fn DrawGetFillColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    fn DrawGetStrokeColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    fn DrawSetTextKerning(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetTextInterlineSpacing(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetTextInterwordSpacing(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawGetTextUnderColor(arg1: *DrawingWand, arg2: *mut PixelWand);
    fn DrawLine(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                arg4: c_double, arg5: c_double);
    fn DrawMatte(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                 arg4: PaintMethod);
    fn DrawPathClose(arg1: *mut DrawingWand);
    fn DrawPathCurveToAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                               arg3: c_double, arg4: c_double, arg5: c_double,
                               arg6: c_double, arg7: c_double);
    fn DrawPathCurveToRelative(arg1: *mut DrawingWand, arg2: c_double,
                               arg3: c_double, arg4: c_double, arg5: c_double,
                               arg6: c_double, arg7: c_double);
    fn DrawPathCurveToQuadraticBezierAbsolute(arg1: *mut DrawingWand,
                                              arg2: c_double, arg3: c_double,
                                              arg4: c_double, arg5: c_double);
    fn DrawPathCurveToQuadraticBezierRelative(arg1: *mut DrawingWand,
                                              arg2: c_double, arg3: c_double,
                                              arg4: c_double, arg5: c_double);
    fn DrawPathCurveToQuadraticBezierSmoothAbsolute(arg1: *mut DrawingWand,
                                                    arg2: c_double,
                                                    arg3: c_double);
    fn DrawPathCurveToQuadraticBezierSmoothRelative(arg1: *mut DrawingWand,
                                                    arg2: c_double,
                                                    arg3: c_double);
    fn DrawPathCurveToSmoothAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                                     arg3: c_double, arg4: c_double,
                                     arg5: c_double);
    fn DrawPathCurveToSmoothRelative(arg1: *mut DrawingWand, arg2: c_double,
                                     arg3: c_double, arg4: c_double,
                                     arg5: c_double);
    fn DrawPathEllipticArcAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                                   arg3: c_double, arg4: c_double,
                                   arg5: MagickBooleanType,
                                   arg6: MagickBooleanType, arg7: c_double,
                                   arg8: c_double);
    fn DrawPathEllipticArcRelative(arg1: *mut DrawingWand, arg2: c_double,
                                   arg3: c_double, arg4: c_double,
                                   arg5: MagickBooleanType,
                                   arg6: MagickBooleanType, arg7: c_double,
                                   arg8: c_double);
    fn DrawPathFinish(arg1: *mut DrawingWand);
    fn DrawPathLineToAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                              arg3: c_double);
    fn DrawPathLineToRelative(arg1: *mut DrawingWand, arg2: c_double,
                              arg3: c_double);
    fn DrawPathLineToHorizontalAbsolute(arg1: *mut DrawingWand,
                                        arg2: c_double);
    fn DrawPathLineToHorizontalRelative(arg1: *mut DrawingWand,
                                        arg2: c_double);
    fn DrawPathLineToVerticalAbsolute(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawPathLineToVerticalRelative(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawPathMoveToAbsolute(arg1: *mut DrawingWand, arg2: c_double,
                              arg3: c_double);
    fn DrawPathMoveToRelative(arg1: *mut DrawingWand, arg2: c_double,
                              arg3: c_double);
    fn DrawPathStart(arg1: *mut DrawingWand);
    fn DrawPoint(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double);
    fn DrawPolygon(arg1: *mut DrawingWand, arg2: size_t, arg3: *PointInfo);
    fn DrawPolyline(arg1: *mut DrawingWand, arg2: size_t, arg3: *PointInfo);
    fn DrawPopClipPath(arg1: *mut DrawingWand);
    fn DrawPopDefs(arg1: *mut DrawingWand);
    fn DrawPushClipPath(arg1: *mut DrawingWand, arg2: *c_schar);
    fn DrawPushDefs(arg1: *mut DrawingWand);
    fn DrawRectangle(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double,
                     arg4: c_double, arg5: c_double);
    fn DrawResetVectorGraphics(arg1: *mut DrawingWand);
    fn DrawRotate(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawRoundRectangle(arg1: *mut DrawingWand, arg2: c_double,
                          arg3: c_double, arg4: c_double, arg5: c_double,
                          arg6: c_double, arg7: c_double);
    fn DrawScale(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double);
    fn DrawSetBorderColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    fn DrawSetClipRule(arg1: *mut DrawingWand, arg2: FillRule);
    fn DrawSetClipUnits(arg1: *mut DrawingWand, arg2: ClipPathUnits);
    fn DrawSetFillColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    fn DrawSetFillOpacity(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetFillRule(arg1: *mut DrawingWand, arg2: FillRule);
    fn DrawSetFontSize(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetFontStretch(arg1: *mut DrawingWand, arg2: StretchType);
    fn DrawSetFontStyle(arg1: *mut DrawingWand, arg2: StyleType);
    fn DrawSetFontWeight(arg1: *mut DrawingWand, arg2: size_t);
    fn DrawSetGravity(arg1: *mut DrawingWand, arg2: GravityType);
    fn DrawSetOpacity(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetStrokeAntialias(arg1: *mut DrawingWand,
                              arg2: MagickBooleanType);
    fn DrawSetStrokeColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    fn DrawSetStrokeDashOffset(arg1: *mut DrawingWand, dashoffset: c_double);
    fn DrawSetStrokeLineCap(arg1: *mut DrawingWand, arg2: LineCap);
    fn DrawSetStrokeLineJoin(arg1: *mut DrawingWand, arg2: LineJoin);
    fn DrawSetStrokeMiterLimit(arg1: *mut DrawingWand, arg2: size_t);
    fn DrawSetStrokeOpacity(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetStrokeWidth(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetTextAlignment(arg1: *mut DrawingWand, arg2: AlignType);
    fn DrawSetTextAntialias(arg1: *mut DrawingWand, arg2: MagickBooleanType);
    fn DrawSetTextDecoration(arg1: *mut DrawingWand, arg2: DecorationType);
    fn DrawSetTextEncoding(arg1: *mut DrawingWand, arg2: *c_schar);
    fn DrawSetTextUnderColor(arg1: *mut DrawingWand, arg2: *PixelWand);
    fn DrawSetViewbox(arg1: *mut DrawingWand, arg2: ssize_t, arg3: ssize_t,
                      arg4: ssize_t, arg5: ssize_t);
    fn DrawSkewX(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSkewY(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawTranslate(arg1: *mut DrawingWand, arg2: c_double, arg3: c_double);
    fn PixelGetIteratorException(arg1: *PixelIterator,
                                 arg2: *mut ExceptionType) -> *mut c_schar;
    fn PixelGetIteratorExceptionType(arg1: *PixelIterator) -> ExceptionType;
    fn IsPixelIterator(arg1: *PixelIterator) -> MagickBooleanType;
    fn PixelClearIteratorException(arg1: *mut PixelIterator) ->
     MagickBooleanType;
    fn PixelSetIteratorRow(arg1: *mut PixelIterator, arg2: ssize_t) ->
     MagickBooleanType;
    fn PixelSyncIterator(arg1: *mut PixelIterator) -> MagickBooleanType;
    fn ClonePixelIterator(arg1: *PixelIterator) -> *mut PixelIterator;
    fn DestroyPixelIterator(arg1: *mut PixelIterator) -> *mut PixelIterator;
    fn NewPixelIterator(arg1: *mut MagickWand) -> *mut PixelIterator;
    fn NewPixelRegionIterator(arg1: *mut MagickWand, arg2: ssize_t,
                              arg3: ssize_t, arg4: size_t, arg5: size_t) ->
     *mut PixelIterator;
    fn PixelGetCurrentIteratorRow(arg1: *mut PixelIterator, arg2: *mut size_t)
     -> *mut *mut PixelWand;
    fn PixelGetNextIteratorRow(arg1: *mut PixelIterator, arg2: *mut size_t) ->
     *mut *mut PixelWand;
    fn PixelGetPreviousIteratorRow(arg1: *mut PixelIterator,
                                   arg2: *mut size_t) -> *mut *mut PixelWand;
    fn PixelGetIteratorRow(arg1: *mut PixelIterator) -> ssize_t;
    fn ClearPixelIterator(arg1: *mut PixelIterator);
    fn PixelResetIterator(arg1: *mut PixelIterator);
    fn PixelSetFirstIteratorRow(arg1: *mut PixelIterator);
    fn PixelSetLastIteratorRow(arg1: *mut PixelIterator);
    fn GetPixelViewException(arg1: *PixelView, arg2: *mut ExceptionType) ->
     *mut c_schar;
    fn DrawGetFillAlpha(arg1: *DrawingWand) -> c_double;
    fn DrawGetStrokeAlpha(arg1: *DrawingWand) -> c_double;
    fn DrawPeekGraphicWand(arg1: *DrawingWand) -> *mut DrawInfo;
    fn MagickDescribeImage(arg1: *mut MagickWand) -> *mut c_schar;
    fn MagickGetImageAttribute(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut c_schar;
    fn PixelIteratorGetException(arg1: *PixelIterator,
                                 arg2: *mut ExceptionType) -> *mut c_schar;
    fn MagickGetImageIndex(arg1: *mut MagickWand) -> ssize_t;
    fn DuplexTransferPixelViewIterator(arg1: *mut PixelView,
                                       arg2: *mut PixelView,
                                       arg3: *mut PixelView,
                                       arg4: DuplexTransferPixelViewMethod,
                                       arg5: *mut c_void) ->
     MagickBooleanType;
    fn GetPixelViewIterator(arg1: *mut PixelView, arg2: GetPixelViewMethod,
                            arg3: *mut c_void) -> MagickBooleanType;
    fn IsPixelView(arg1: *PixelView) -> MagickBooleanType;
    fn MagickClipPathImage(arg1: *mut MagickWand, arg2: *c_schar,
                           arg3: MagickBooleanType) -> MagickBooleanType;
    fn MagickColorFloodfillImage(arg1: *mut MagickWand, arg2: *PixelWand,
                                 arg3: c_double, arg4: *PixelWand,
                                 arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    fn MagickGetImageChannelExtrema(arg1: *mut MagickWand, arg2: ChannelType,
                                    arg3: *mut size_t, arg4: *mut size_t) ->
     MagickBooleanType;
    fn MagickGetImageExtrema(arg1: *mut MagickWand, arg2: *mut size_t,
                             arg3: *mut size_t) -> MagickBooleanType;
    fn MagickGetImageMatte(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickGetImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                            arg3: ssize_t, arg4: size_t, arg5: size_t,
                            arg6: *c_schar, arg7: StorageType,
                            arg8: *mut c_void) -> MagickBooleanType;
    fn MagickMapImage(arg1: *mut MagickWand, arg2: *MagickWand,
                      arg3: MagickBooleanType) -> MagickBooleanType;
    fn MagickMatteFloodfillImage(arg1: *mut MagickWand, arg2: c_double,
                                 arg3: c_double, arg4: *PixelWand,
                                 arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    fn MagickMedianFilterImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickModeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickReduceNoiseImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickRemapImage(arg1: *mut MagickWand, arg2: *MagickWand,
                        arg3: DitherMethod) -> MagickBooleanType;
    fn MagickOpaqueImage(arg1: *mut MagickWand, arg2: *PixelWand,
                         arg3: *PixelWand, arg4: c_double) ->
     MagickBooleanType;
    fn MagickPaintFloodfillImage(arg1: *mut MagickWand, arg2: ChannelType,
                                 arg3: *PixelWand, arg4: c_double,
                                 arg5: *PixelWand, arg6: ssize_t,
                                 arg7: ssize_t) -> MagickBooleanType;
    fn MagickPaintOpaqueImage(arg1: *mut MagickWand, arg2: *PixelWand,
                              arg3: *PixelWand, arg4: c_double) ->
     MagickBooleanType;
    fn MagickPaintOpaqueImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: *PixelWand, arg4: *PixelWand,
                                     arg5: c_double) -> MagickBooleanType;
    fn MagickPaintTransparentImage(arg1: *mut MagickWand, arg2: *PixelWand,
                                   arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn MagickRecolorImage(arg1: *mut MagickWand, arg2: size_t,
                          arg3: *c_double) -> MagickBooleanType;
    fn MagickSetImageAttribute(arg1: *mut MagickWand, arg2: *c_schar,
                               arg3: *c_schar) -> MagickBooleanType;
    fn MagickSetImageIndex(arg1: *mut MagickWand, arg2: ssize_t) ->
     MagickBooleanType;
    fn MagickSetImageOption(arg1: *mut MagickWand, arg2: *c_schar,
                            arg3: *c_schar, arg4: *c_schar) ->
     MagickBooleanType;
    fn MagickSetImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                            arg3: ssize_t, arg4: size_t, arg5: size_t,
                            arg6: *c_schar, arg7: StorageType, arg8: *c_void)
     -> MagickBooleanType;
    fn MagickTransparentImage(arg1: *mut MagickWand, arg2: *PixelWand,
                              arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn SetPixelViewIterator(arg1: *mut PixelView, arg2: SetPixelViewMethod,
                            arg3: *mut c_void) -> MagickBooleanType;
    fn TransferPixelViewIterator(arg1: *mut PixelView, arg2: *mut PixelView,
                                 arg3: TransferPixelViewMethod,
                                 arg4: *mut c_void) -> MagickBooleanType;
    fn UpdatePixelViewIterator(arg1: *mut PixelView,
                               arg2: UpdatePixelViewMethod, arg3: *mut c_void)
     -> MagickBooleanType;
    fn GetPixelViewWand(arg1: *PixelView) -> *mut MagickWand;
    fn MagickAverageImages(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickFlattenImages(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickMaximumImages(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickMinimumImages(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickMosaicImages(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickRegionOfInterestImage(arg1: *mut MagickWand, arg2: size_t,
                                   arg3: size_t, arg4: ssize_t, arg5: ssize_t)
     -> *mut MagickWand;
    fn MagickGetImageSize(arg1: *mut MagickWand) -> MagickSizeType;
    fn ClonePixelView(arg1: *PixelView) -> *mut PixelView;
    fn DestroyPixelView(arg1: *mut PixelView) -> *mut PixelView;
    fn NewPixelView(arg1: *mut MagickWand) -> *mut PixelView;
    fn NewPixelViewRegion(arg1: *mut MagickWand, arg2: ssize_t, arg3: ssize_t,
                          arg4: size_t, arg5: size_t) -> *mut PixelView;
    fn GetPixelViewPixels(arg1: *PixelView) -> *mut *mut PixelWand;
    fn PixelGetNextRow(arg1: *mut PixelIterator) -> *mut *mut PixelWand;
    fn GetPixelViewHeight(arg1: *PixelView) -> size_t;
    fn GetPixelViewWidth(arg1: *PixelView) -> size_t;
    fn GetPixelViewX(arg1: *PixelView) -> ssize_t;
    fn GetPixelViewY(arg1: *PixelView) -> ssize_t;
    fn MagickWriteImageBlob(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut c_uchar;
    fn DrawPopGraphicContext(arg1: *mut DrawingWand);
    fn DrawPushGraphicContext(arg1: *mut DrawingWand);
    fn DrawSetFillAlpha(arg1: *mut DrawingWand, arg2: c_double);
    fn DrawSetStrokeAlpha(arg1: *mut DrawingWand, arg2: c_double);
    fn DisplayImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                           arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn IdentifyImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                            arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                            arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn ImportImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                          arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                          arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn MagickGetFilename(arg1: *MagickWand) -> *mut c_schar;
    fn MagickGetFormat(arg1: *mut MagickWand) -> *mut c_schar;
    fn MagickGetFont(arg1: *mut MagickWand) -> *mut c_schar;
    fn MagickGetHomeURL() -> *mut c_schar;
    fn MagickGetImageArtifact(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut c_schar;
    fn MagickGetImageArtifacts(arg1: *mut MagickWand, arg2: *c_schar,
                               arg3: *mut size_t) -> *mut *mut c_schar;
    fn MagickGetImageProfiles(arg1: *mut MagickWand, arg2: *c_schar,
                              arg3: *mut size_t) -> *mut *mut c_schar;
    fn MagickGetImageProperty(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut c_schar;
    fn MagickGetImageProperties(arg1: *mut MagickWand, arg2: *c_schar,
                                arg3: *mut size_t) -> *mut *mut c_schar;
    fn MagickGetOption(arg1: *mut MagickWand, arg2: *c_schar) -> *mut c_schar;
    fn MagickGetOptions(arg1: *mut MagickWand, arg2: *c_schar,
                        arg3: *mut size_t) -> *mut *mut c_schar;
    fn MagickQueryConfigureOption(arg1: *c_schar) -> *mut c_schar;
    fn MagickQueryConfigureOptions(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    fn MagickQueryFonts(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    fn MagickQueryFormats(arg1: *c_schar, arg2: *mut size_t) ->
     *mut *mut c_schar;
    fn MagickGetColorspace(arg1: *mut MagickWand) -> ColorspaceType;
    fn MagickGetCompression(arg1: *mut MagickWand) -> CompressionType;
    fn MagickGetCopyright() -> *c_schar;
    fn MagickGetPackageName() -> *c_schar;
    fn MagickGetQuantumDepth(arg1: *mut size_t) -> *c_schar;
    fn MagickGetQuantumRange(arg1: *mut size_t) -> *c_schar;
    fn MagickGetReleaseDate() -> *c_schar;
    fn MagickGetVersion(arg1: *mut size_t) -> *c_schar;
    fn MagickGetPointsize(arg1: *mut MagickWand) -> c_double;
    fn MagickGetSamplingFactors(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut c_double;
    fn MagickQueryFontMetrics(arg1: *mut MagickWand, arg2: *DrawingWand,
                              arg3: *c_schar) -> *mut c_double;
    fn MagickQueryMultilineFontMetrics(arg1: *mut MagickWand,
                                       arg2: *DrawingWand, arg3: *c_schar) ->
     *mut c_double;
    fn MagickGetGravity(arg1: *mut MagickWand) -> GravityType;
    fn MagickGetType(arg1: *mut MagickWand) -> ImageType;
    fn MagickGetInterlaceScheme(arg1: *mut MagickWand) -> InterlaceType;
    fn MagickGetInterpolateMethod(arg1: *mut MagickWand) ->
     InterpolatePixelMethod;
    fn MagickGetOrientation(arg1: *mut MagickWand) -> OrientationType;
    fn MagickDeleteImageArtifact(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickDeleteImageProperty(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickDeleteOption(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickGetAntialias(arg1: *MagickWand) -> MagickBooleanType;
    fn MagickGetPage(arg1: *MagickWand, arg2: *mut size_t, arg3: *mut size_t,
                     arg4: *mut ssize_t, arg5: *mut ssize_t) ->
     MagickBooleanType;
    fn MagickGetResolution(arg1: *MagickWand, arg2: *mut c_double,
                           arg3: *mut c_double) -> MagickBooleanType;
    fn MagickGetSize(arg1: *MagickWand, arg2: *mut size_t, arg3: *mut size_t)
     -> MagickBooleanType;
    fn MagickGetSizeOffset(arg1: *MagickWand, arg2: *mut ssize_t) ->
     MagickBooleanType;
    fn MagickProfileImage(arg1: *mut MagickWand, arg2: *c_schar,
                          arg3: *c_void, arg4: size_t) -> MagickBooleanType;
    fn MagickSetAntialias(arg1: *mut MagickWand, arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickSetBackgroundColor(arg1: *mut MagickWand, arg2: *PixelWand) ->
     MagickBooleanType;
    fn MagickSetColorspace(arg1: *mut MagickWand, arg2: ColorspaceType) ->
     MagickBooleanType;
    fn MagickSetCompression(arg1: *mut MagickWand, arg2: CompressionType) ->
     MagickBooleanType;
    fn MagickSetCompressionQuality(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    fn MagickSetDepth(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    fn MagickSetExtract(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickSetFilename(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickSetFormat(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickSetFont(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickSetGravity(arg1: *mut MagickWand, arg2: GravityType) ->
     MagickBooleanType;
    fn MagickSetImageArtifact(arg1: *mut MagickWand, arg2: *c_schar,
                              arg3: *c_schar) -> MagickBooleanType;
    fn MagickSetImageProfile(arg1: *mut MagickWand, arg2: *c_schar,
                             arg3: *c_void, arg4: size_t) ->
     MagickBooleanType;
    fn MagickSetImageProperty(arg1: *mut MagickWand, arg2: *c_schar,
                              arg3: *c_schar) -> MagickBooleanType;
    fn MagickSetInterlaceScheme(arg1: *mut MagickWand, arg2: InterlaceType) ->
     MagickBooleanType;
    fn MagickSetInterpolateMethod(arg1: *mut MagickWand,
                                  arg2: InterpolatePixelMethod) ->
     MagickBooleanType;
    fn MagickSetOption(arg1: *mut MagickWand, arg2: *c_schar, arg3: *c_schar)
     -> MagickBooleanType;
    fn MagickSetOrientation(arg1: *mut MagickWand, arg2: OrientationType) ->
     MagickBooleanType;
    fn MagickSetPage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                     arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    fn MagickSetPassphrase(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickSetPointsize(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickSetResolution(arg1: *mut MagickWand, arg2: c_double,
                           arg3: c_double) -> MagickBooleanType;
    fn MagickSetResourceLimit(_type: ResourceType, limit: MagickSizeType) ->
     MagickBooleanType;
    fn MagickSetSamplingFactors(arg1: *mut MagickWand, arg2: size_t,
                                arg3: *c_double) -> MagickBooleanType;
    fn MagickSetSize(arg1: *mut MagickWand, arg2: size_t, arg3: size_t) ->
     MagickBooleanType;
    fn MagickSetSizeOffset(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                           arg4: ssize_t) -> MagickBooleanType;
    fn MagickSetType(arg1: *mut MagickWand, arg2: ImageType) ->
     MagickBooleanType;
    fn MagickSetProgressMonitor(arg1: *mut MagickWand,
                                arg2: MagickProgressMonitor,
                                arg3: *mut c_void) -> MagickProgressMonitor;
    fn MagickGetResource(arg1: ResourceType) -> MagickSizeType;
    fn MagickGetResourceLimit(arg1: ResourceType) -> MagickSizeType;
    fn MagickGetBackgroundColor(arg1: *mut MagickWand) -> *mut PixelWand;
    // TODO - This function causes a linker error
    //fn MagickGetOrientationType(arg1: *mut MagickWand) -> OrientationType;
    fn MagickGetCompressionQuality(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageProfile(arg1: *mut MagickWand, arg2: *c_schar,
                             arg3: *mut size_t) -> *mut c_uchar;
    fn MagickRemoveImageProfile(arg1: *mut MagickWand, arg2: *c_schar,
                                arg3: *mut size_t) -> *mut c_uchar;
    fn MagickGetImageChannelFeatures(arg1: *mut MagickWand, arg2: size_t) ->
     *mut ChannelFeatures;
    fn MagickGetImageChannelStatistics(arg1: *mut MagickWand) ->
     *mut ChannelStatistics;
    fn MagickGetImageFilename(arg1: *mut MagickWand) -> *mut c_schar;
    fn MagickGetImageFormat(arg1: *mut MagickWand) -> *mut c_schar;
    fn MagickGetImageSignature(arg1: *mut MagickWand) -> *mut c_schar;
    fn MagickIdentifyImage(arg1: *mut MagickWand) -> *mut c_schar;
    fn MagickGetImageColorspace(arg1: *mut MagickWand) -> ColorspaceType;
    fn MagickGetImageCompose(arg1: *mut MagickWand) -> CompositeOperator;
    fn MagickGetImageCompression(arg1: *mut MagickWand) -> CompressionType;
    fn MagickGetImageDispose(arg1: *mut MagickWand) -> DisposeType;
    fn MagickGetImageChannelDistortions(arg1: *mut MagickWand,
                                        arg2: *MagickWand, arg3: MetricType)
     -> *mut c_double;
    fn MagickGetImageFuzz(arg1: *mut MagickWand) -> c_double;
    fn MagickGetImageGamma(arg1: *mut MagickWand) -> c_double;
    fn MagickGetImageTotalInkDensity(arg1: *mut MagickWand) -> c_double;
    fn MagickGetImageEndian(arg1: *mut MagickWand) -> EndianType;
    fn MagickGetImageGravity(arg1: *mut MagickWand) -> GravityType;
    fn MagickDestroyImage(arg1: *mut Image) -> *mut Image;
    fn GetImageFromMagickWand(arg1: *MagickWand) -> *mut Image;
    fn MagickGetImageType(arg1: *mut MagickWand) -> ImageType;
    fn MagickGetImageInterlaceScheme(arg1: *mut MagickWand) -> InterlaceType;
    fn MagickGetImageInterpolateMethod(arg1: *mut MagickWand) ->
     InterpolatePixelMethod;
    fn MagickAdaptiveBlurImage(arg1: *mut MagickWand, arg2: c_double,
                               arg3: c_double) -> MagickBooleanType;
    fn MagickAdaptiveBlurImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: c_double,
                                      arg4: c_double) -> MagickBooleanType;
    fn MagickAdaptiveResizeImage(arg1: *mut MagickWand, arg2: size_t,
                                 arg3: size_t) -> MagickBooleanType;
    fn MagickAdaptiveSharpenImage(arg1: *mut MagickWand, arg2: c_double,
                                  arg3: c_double) -> MagickBooleanType;
    fn MagickAdaptiveSharpenImageChannel(arg1: *mut MagickWand,
                                         arg2: ChannelType, arg3: c_double,
                                         arg4: c_double) -> MagickBooleanType;
    fn MagickAdaptiveThresholdImage(arg1: *mut MagickWand, arg2: size_t,
                                    arg3: size_t, arg4: ssize_t) ->
     MagickBooleanType;
    fn MagickAddImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    fn MagickAddNoiseImage(arg1: *mut MagickWand, arg2: NoiseType) ->
     MagickBooleanType;
    fn MagickAddNoiseImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: NoiseType) -> MagickBooleanType;
    fn MagickAffineTransformImage(arg1: *mut MagickWand, arg2: *DrawingWand)
     -> MagickBooleanType;
    fn MagickAnnotateImage(arg1: *mut MagickWand, arg2: *DrawingWand,
                           arg3: c_double, arg4: c_double, arg5: c_double,
                           arg6: *c_schar) -> MagickBooleanType;
    fn MagickAnimateImages(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickAutoGammaImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickAutoGammaImageChannel(arg1: *mut MagickWand, arg2: ChannelType)
     -> MagickBooleanType;
    fn MagickAutoLevelImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickAutoLevelImageChannel(arg1: *mut MagickWand, arg2: ChannelType)
     -> MagickBooleanType;
    fn MagickBlackThresholdImage(arg1: *mut MagickWand, arg2: *PixelWand) ->
     MagickBooleanType;
    fn MagickBlueShiftImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickBlurImage(arg1: *mut MagickWand, arg2: c_double, arg3: c_double)
     -> MagickBooleanType;
    fn MagickBlurImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                              arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn MagickBorderImage(arg1: *mut MagickWand, arg2: *PixelWand,
                         arg3: size_t, arg4: size_t) -> MagickBooleanType;
    fn MagickBrightnessContrastImage(arg1: *mut MagickWand, arg2: c_double,
                                     arg3: c_double) -> MagickBooleanType;
    fn MagickBrightnessContrastImageChannel(arg1: *mut MagickWand,
                                            arg2: ChannelType, arg3: c_double,
                                            arg4: c_double) ->
     MagickBooleanType;
    fn MagickCharcoalImage(arg1: *mut MagickWand, arg2: c_double,
                           arg3: c_double) -> MagickBooleanType;
    fn MagickChopImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                       arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    fn MagickClampImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickClampImageChannel(arg1: *mut MagickWand, arg2: ChannelType) ->
     MagickBooleanType;
    fn MagickClipImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickClipImagePath(arg1: *mut MagickWand, arg2: *c_schar,
                           arg3: MagickBooleanType) -> MagickBooleanType;
    fn MagickClutImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    fn MagickClutImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                              arg3: *MagickWand) -> MagickBooleanType;
    fn MagickColorDecisionListImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickColorizeImage(arg1: *mut MagickWand, arg2: *PixelWand,
                           arg3: *PixelWand) -> MagickBooleanType;
    fn MagickColorMatrixImage(arg1: *mut MagickWand, arg2: *KernelInfo) ->
     MagickBooleanType;
    fn MagickCommentImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickCompositeImage(arg1: *mut MagickWand, arg2: *MagickWand,
                            arg3: CompositeOperator, arg4: ssize_t,
                            arg5: ssize_t) -> MagickBooleanType;
    fn MagickCompositeLayers(arg1: *mut MagickWand, arg2: *MagickWand,
                             arg3: CompositeOperator, arg4: ssize_t,
                             arg5: ssize_t) -> MagickBooleanType;
    fn MagickCompositeImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                   arg3: *MagickWand, arg4: CompositeOperator,
                                   arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    fn MagickConstituteImage(arg1: *mut MagickWand, arg2: size_t,
                             arg3: size_t, arg4: *c_schar, arg5: StorageType,
                             arg6: *c_void) -> MagickBooleanType;
    fn MagickContrastImage(arg1: *mut MagickWand, arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickContrastStretchImage(arg1: *mut MagickWand, arg2: c_double,
                                  arg3: c_double) -> MagickBooleanType;
    fn MagickContrastStretchImageChannel(arg1: *mut MagickWand,
                                         arg2: ChannelType, arg3: c_double,
                                         arg4: c_double) -> MagickBooleanType;
    fn MagickConvolveImage(arg1: *mut MagickWand, arg2: size_t,
                           arg3: *c_double) -> MagickBooleanType;
    fn MagickConvolveImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: size_t, arg4: *c_double) ->
     MagickBooleanType;
    fn MagickCropImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                       arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    fn MagickCycleColormapImage(arg1: *mut MagickWand, arg2: ssize_t) ->
     MagickBooleanType;
    fn MagickDecipherImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickDeskewImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickDespeckleImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickDisplayImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickDisplayImages(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickDistortImage(arg1: *mut MagickWand, arg2: DistortImageMethod,
                          arg3: size_t, arg4: *c_double,
                          arg5: MagickBooleanType) -> MagickBooleanType;
    fn MagickDrawImage(arg1: *mut MagickWand, arg2: *DrawingWand) ->
     MagickBooleanType;
    fn MagickEdgeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickEmbossImage(arg1: *mut MagickWand, arg2: c_double,
                         arg3: c_double) -> MagickBooleanType;
    fn MagickEncipherImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickEnhanceImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickEqualizeImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickEqualizeImageChannel(arg1: *mut MagickWand, arg2: ChannelType) ->
     MagickBooleanType;
    fn MagickEvaluateImage(arg1: *mut MagickWand,
                           arg2: MagickEvaluateOperator, arg3: c_double) ->
     MagickBooleanType;
    fn MagickEvaluateImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: MagickEvaluateOperator,
                                  arg4: c_double) -> MagickBooleanType;
    fn MagickExportImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                               arg3: ssize_t, arg4: size_t, arg5: size_t,
                               arg6: *c_schar, arg7: StorageType,
                               arg8: *mut c_void) -> MagickBooleanType;
    fn MagickExtentImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                         arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    fn MagickFilterImage(arg1: *mut MagickWand, arg2: *KernelInfo) ->
     MagickBooleanType;
    fn MagickFilterImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                arg3: *KernelInfo) -> MagickBooleanType;
    fn MagickFlipImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickFloodfillPaintImage(arg1: *mut MagickWand, arg2: ChannelType,
                                 arg3: *PixelWand, arg4: c_double,
                                 arg5: *PixelWand, arg6: ssize_t,
                                 arg7: ssize_t, arg8: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickFlopImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickForwardFourierTransformImage(arg1: *mut MagickWand,
                                          arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickFrameImage(arg1: *mut MagickWand, arg2: *PixelWand, arg3: size_t,
                        arg4: size_t, arg5: ssize_t, arg6: ssize_t) ->
     MagickBooleanType;
    fn MagickFunctionImage(arg1: *mut MagickWand, arg2: MagickFunction,
                           arg3: size_t, arg4: *c_double) ->
     MagickBooleanType;
    fn MagickFunctionImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: MagickFunction, arg4: size_t,
                                  arg5: *c_double) -> MagickBooleanType;
    fn MagickGammaImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickGammaImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                               arg3: c_double) -> MagickBooleanType;
    fn MagickGaussianBlurImage(arg1: *mut MagickWand, arg2: c_double,
                               arg3: c_double) -> MagickBooleanType;
    fn MagickGaussianBlurImageChannel(arg1: *mut MagickWand,
                                      arg2: ChannelType, arg3: c_double,
                                      arg4: c_double) -> MagickBooleanType;
    fn MagickGetImageAlphaChannel(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickGetImageBackgroundColor(arg1: *mut MagickWand,
                                     arg2: *mut PixelWand) ->
     MagickBooleanType;
    fn MagickGetImageBluePrimary(arg1: *mut MagickWand, arg2: *mut c_double,
                                 arg3: *mut c_double) -> MagickBooleanType;
    fn MagickGetImageBorderColor(arg1: *mut MagickWand, arg2: *mut PixelWand)
     -> MagickBooleanType;
    fn MagickGetImageChannelDistortion(arg1: *mut MagickWand,
                                       arg2: *MagickWand, arg3: ChannelType,
                                       arg4: MetricType, arg5: *mut c_double)
     -> MagickBooleanType;
    fn MagickGetImageChannelKurtosis(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: *mut c_double, arg4: *mut c_double)
     -> MagickBooleanType;
    fn MagickGetImageChannelMean(arg1: *mut MagickWand, arg2: ChannelType,
                                 arg3: *mut c_double, arg4: *mut c_double) ->
     MagickBooleanType;
    fn MagickGetImageChannelRange(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: *mut c_double, arg4: *mut c_double) ->
     MagickBooleanType;
    fn MagickGetImageColormapColor(arg1: *mut MagickWand, arg2: size_t,
                                   arg3: *mut PixelWand) -> MagickBooleanType;
    fn MagickGetImageDistortion(arg1: *mut MagickWand, arg2: *MagickWand,
                                arg3: MetricType, arg4: *mut c_double) ->
     MagickBooleanType;
    fn MagickGetImageGreenPrimary(arg1: *mut MagickWand, arg2: *mut c_double,
                                  arg3: *mut c_double) -> MagickBooleanType;
    fn MagickGetImageMatteColor(arg1: *mut MagickWand, arg2: *mut PixelWand)
     -> MagickBooleanType;
    fn MagickGetImageLength(arg1: *mut MagickWand, arg2: *mut MagickSizeType)
     -> MagickBooleanType;
    fn MagickGetImagePage(arg1: *mut MagickWand, arg2: *mut size_t,
                          arg3: *mut size_t, arg4: *mut ssize_t,
                          arg5: *mut ssize_t) -> MagickBooleanType;
    fn MagickGetImagePixelColor(arg1: *mut MagickWand, arg2: ssize_t,
                                arg3: ssize_t, arg4: *mut PixelWand) ->
     MagickBooleanType;
    fn MagickGetImageRange(arg1: *mut MagickWand, arg2: *mut c_double,
                           arg3: *mut c_double) -> MagickBooleanType;
    fn MagickGetImageRedPrimary(arg1: *mut MagickWand, arg2: *mut c_double,
                                arg3: *mut c_double) -> MagickBooleanType;
    fn MagickGetImageResolution(arg1: *mut MagickWand, arg2: *mut c_double,
                                arg3: *mut c_double) -> MagickBooleanType;
    fn MagickGetImageWhitePoint(arg1: *mut MagickWand, arg2: *mut c_double,
                                arg3: *mut c_double) -> MagickBooleanType;
    fn MagickHaldClutImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    fn MagickHaldClutImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: *MagickWand) -> MagickBooleanType;
    fn MagickHasNextImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickHasPreviousImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickImplodeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickImportImagePixels(arg1: *mut MagickWand, arg2: ssize_t,
                               arg3: ssize_t, arg4: size_t, arg5: size_t,
                               arg6: *c_schar, arg7: StorageType,
                               arg8: *c_void) -> MagickBooleanType;
    fn MagickInverseFourierTransformImage(arg1: *mut MagickWand,
                                          arg2: *mut MagickWand,
                                          arg3: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickLabelImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickLevelImage(arg1: *mut MagickWand, arg2: c_double, arg3: c_double,
                        arg4: c_double) -> MagickBooleanType;
    fn MagickLevelImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                               arg3: c_double, arg4: c_double, arg5: c_double)
     -> MagickBooleanType;
    fn MagickLinearStretchImage(arg1: *mut MagickWand, arg2: c_double,
                                arg3: c_double) -> MagickBooleanType;
    fn MagickLiquidRescaleImage(arg1: *mut MagickWand, arg2: size_t,
                                arg3: size_t, arg4: c_double, arg5: c_double)
     -> MagickBooleanType;
    fn MagickMagnifyImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickMinifyImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickModulateImage(arg1: *mut MagickWand, arg2: c_double,
                           arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn MagickMorphologyImage(arg1: *mut MagickWand, arg2: MorphologyMethod,
                             arg3: ssize_t, arg4: *mut KernelInfo) ->
     MagickBooleanType;
    fn MagickMorphologyImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                    arg3: MorphologyMethod, arg4: ssize_t,
                                    arg5: *mut KernelInfo) ->
     MagickBooleanType;
    fn MagickMotionBlurImage(arg1: *mut MagickWand, arg2: c_double,
                             arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn MagickMotionBlurImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                    arg3: c_double, arg4: c_double,
                                    arg5: c_double) -> MagickBooleanType;
    fn MagickNegateImage(arg1: *mut MagickWand, arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickNegateImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                arg3: MagickBooleanType) -> MagickBooleanType;
    fn MagickNewImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                      arg4: *PixelWand) -> MagickBooleanType;
    fn MagickNextImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickNormalizeImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickNormalizeImageChannel(arg1: *mut MagickWand, arg2: ChannelType)
     -> MagickBooleanType;
    fn MagickOilPaintImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickOpaquePaintImage(arg1: *mut MagickWand, arg2: *PixelWand,
                              arg3: *PixelWand, arg4: c_double,
                              arg5: MagickBooleanType) -> MagickBooleanType;
    fn MagickOpaquePaintImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: *PixelWand, arg4: *PixelWand,
                                     arg5: c_double, arg6: MagickBooleanType)
     -> MagickBooleanType;
    fn MagickOrderedPosterizeImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickOrderedPosterizeImageChannel(arg1: *mut MagickWand,
                                          arg2: ChannelType, arg3: *c_schar)
     -> MagickBooleanType;
    fn MagickOptimizeImageTransparency(arg1: *mut MagickWand) ->
     MagickBooleanType;
    fn MagickTransparentPaintImage(arg1: *mut MagickWand, arg2: *PixelWand,
                                   arg3: c_double, arg4: c_double,
                                   invert: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickPingImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickPingImageBlob(arg1: *mut MagickWand, arg2: *c_void, arg3: size_t)
     -> MagickBooleanType;
    fn MagickPingImageFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    fn MagickPolaroidImage(arg1: *mut MagickWand, arg2: *DrawingWand,
                           arg3: c_double) -> MagickBooleanType;
    fn MagickPosterizeImage(arg1: *mut MagickWand, arg2: size_t,
                            arg3: MagickBooleanType) -> MagickBooleanType;
    fn MagickPreviousImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickQuantizeImage(arg1: *mut MagickWand, arg2: size_t,
                           arg3: ColorspaceType, arg4: size_t,
                           arg5: MagickBooleanType, arg6: MagickBooleanType)
     -> MagickBooleanType;
    fn MagickQuantizeImages(arg1: *mut MagickWand, arg2: size_t,
                            arg3: ColorspaceType, arg4: size_t,
                            arg5: MagickBooleanType, arg6: MagickBooleanType)
     -> MagickBooleanType;
    fn MagickRadialBlurImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickRadialBlurImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                    arg3: c_double) -> MagickBooleanType;
    fn MagickRaiseImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                        arg4: ssize_t, arg5: ssize_t, arg6: MagickBooleanType)
     -> MagickBooleanType;
    fn MagickRandomThresholdImage(arg1: *mut MagickWand, arg2: c_double,
                                  arg3: c_double) -> MagickBooleanType;
    fn MagickRandomThresholdImageChannel(arg1: *mut MagickWand,
                                         arg2: ChannelType, arg3: c_double,
                                         arg4: c_double) -> MagickBooleanType;
    fn MagickReadImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickReadImageBlob(arg1: *mut MagickWand, arg2: *c_void, arg3: size_t)
     -> MagickBooleanType;
    fn MagickReadImageFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    fn MagickRemoveImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickResampleImage(arg1: *mut MagickWand, arg2: c_double,
                           arg3: c_double, arg4: FilterTypes, arg5: c_double)
     -> MagickBooleanType;
    fn MagickResetImagePage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickResizeImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                         arg4: FilterTypes, arg5: c_double) ->
     MagickBooleanType;
    fn MagickRollImage(arg1: *mut MagickWand, arg2: ssize_t, arg3: ssize_t) ->
     MagickBooleanType;
    fn MagickRotateImage(arg1: *mut MagickWand, arg2: *PixelWand,
                         arg3: c_double) -> MagickBooleanType;
    fn MagickSampleImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t) ->
     MagickBooleanType;
    fn MagickScaleImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t) ->
     MagickBooleanType;
    fn MagickSegmentImage(arg1: *mut MagickWand, arg2: ColorspaceType,
                          arg3: MagickBooleanType, arg4: c_double,
                          arg5: c_double) -> MagickBooleanType;
    fn MagickSelectiveBlurImage(arg1: *mut MagickWand, arg2: c_double,
                                arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn MagickSelectiveBlurImageChannel(arg1: *mut MagickWand,
                                       arg2: ChannelType, arg3: c_double,
                                       arg4: c_double, arg5: c_double) ->
     MagickBooleanType;
    fn MagickSeparateImageChannel(arg1: *mut MagickWand, arg2: ChannelType) ->
     MagickBooleanType;
    fn MagickSepiaToneImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickSetImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    fn MagickSetImageAlphaChannel(arg1: *mut MagickWand,
                                  arg2: AlphaChannelType) ->
     MagickBooleanType;
    fn MagickSetImageBackgroundColor(arg1: *mut MagickWand, arg2: *PixelWand)
     -> MagickBooleanType;
    fn MagickSetImageBias(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickSetImageBluePrimary(arg1: *mut MagickWand, arg2: c_double,
                                 arg3: c_double) -> MagickBooleanType;
    fn MagickSetImageBorderColor(arg1: *mut MagickWand, arg2: *PixelWand) ->
     MagickBooleanType;
    fn MagickSetImageChannelDepth(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: size_t) -> MagickBooleanType;
    fn MagickSetImageClipMask(arg1: *mut MagickWand, arg2: *MagickWand) ->
     MagickBooleanType;
    fn MagickSetImageColor(arg1: *mut MagickWand, arg2: *PixelWand) ->
     MagickBooleanType;
    fn MagickSetImageColormapColor(arg1: *mut MagickWand, arg2: size_t,
                                   arg3: *PixelWand) -> MagickBooleanType;
    fn MagickSetImageColorspace(arg1: *mut MagickWand, arg2: ColorspaceType)
     -> MagickBooleanType;
    fn MagickSetImageCompose(arg1: *mut MagickWand, arg2: CompositeOperator)
     -> MagickBooleanType;
    fn MagickSetImageCompression(arg1: *mut MagickWand, arg2: CompressionType)
     -> MagickBooleanType;
    fn MagickSetImageDelay(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    fn MagickSetImageDepth(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    fn MagickSetImageDispose(arg1: *mut MagickWand, arg2: DisposeType) ->
     MagickBooleanType;
    fn MagickSetImageCompressionQuality(arg1: *mut MagickWand, arg2: size_t)
     -> MagickBooleanType;
    fn MagickSetImageEndian(arg1: *mut MagickWand, arg2: EndianType) ->
     MagickBooleanType;
    fn MagickSetImageExtent(arg1: *mut MagickWand, arg2: size_t, arg3: size_t)
     -> MagickBooleanType;
    fn MagickSetImageFilename(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickSetImageFormat(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickSetImageFuzz(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickSetImageGamma(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickSetImageGravity(arg1: *mut MagickWand, arg2: GravityType) ->
     MagickBooleanType;
    fn MagickSetImageGreenPrimary(arg1: *mut MagickWand, arg2: c_double,
                                  arg3: c_double) -> MagickBooleanType;
    fn MagickSetImageInterlaceScheme(arg1: *mut MagickWand,
                                     arg2: InterlaceType) ->
     MagickBooleanType;
    fn MagickSetImageInterpolateMethod(arg1: *mut MagickWand,
                                       arg2: InterpolatePixelMethod) ->
     MagickBooleanType;
    fn MagickSetImageIterations(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    fn MagickSetImageMatte(arg1: *mut MagickWand, arg2: MagickBooleanType) ->
     MagickBooleanType;
    fn MagickSetImageMatteColor(arg1: *mut MagickWand, arg2: *PixelWand) ->
     MagickBooleanType;
    fn MagickSetImageOpacity(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickSetImageOrientation(arg1: *mut MagickWand, arg2: OrientationType)
     -> MagickBooleanType;
    fn MagickSetImagePage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                          arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    fn MagickSetImageRedPrimary(arg1: *mut MagickWand, arg2: c_double,
                                arg3: c_double) -> MagickBooleanType;
    fn MagickSetImageRenderingIntent(arg1: *mut MagickWand,
                                     arg2: RenderingIntent) ->
     MagickBooleanType;
    fn MagickSetImageResolution(arg1: *mut MagickWand, arg2: c_double,
                                arg3: c_double) -> MagickBooleanType;
    fn MagickSetImageScene(arg1: *mut MagickWand, arg2: size_t) ->
     MagickBooleanType;
    fn MagickSetImageTicksPerSecond(arg1: *mut MagickWand, arg2: ssize_t) ->
     MagickBooleanType;
    fn MagickSetImageType(arg1: *mut MagickWand, arg2: ImageType) ->
     MagickBooleanType;
    fn MagickSetImageUnits(arg1: *mut MagickWand, arg2: ResolutionType) ->
     MagickBooleanType;
    fn MagickSetImageWhitePoint(arg1: *mut MagickWand, arg2: c_double,
                                arg3: c_double) -> MagickBooleanType;
    fn MagickShadeImage(arg1: *mut MagickWand, arg2: MagickBooleanType,
                        arg3: c_double, arg4: c_double) -> MagickBooleanType;
    fn MagickShadowImage(arg1: *mut MagickWand, arg2: c_double,
                         arg3: c_double, arg4: ssize_t, arg5: ssize_t) ->
     MagickBooleanType;
    fn MagickSharpenImage(arg1: *mut MagickWand, arg2: c_double,
                          arg3: c_double) -> MagickBooleanType;
    fn MagickSharpenImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                 arg3: c_double, arg4: c_double) ->
     MagickBooleanType;
    fn MagickShaveImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t) ->
     MagickBooleanType;
    fn MagickShearImage(arg1: *mut MagickWand, arg2: *PixelWand,
                        arg3: c_double, arg4: c_double) -> MagickBooleanType;
    fn MagickSigmoidalContrastImage(arg1: *mut MagickWand,
                                    arg2: MagickBooleanType, arg3: c_double,
                                    arg4: c_double) -> MagickBooleanType;
    fn MagickSigmoidalContrastImageChannel(arg1: *mut MagickWand,
                                           arg2: ChannelType,
                                           arg3: MagickBooleanType,
                                           arg4: c_double, arg5: c_double) ->
     MagickBooleanType;
    fn MagickSketchImage(arg1: *mut MagickWand, arg2: c_double,
                         arg3: c_double, arg4: c_double) -> MagickBooleanType;
    fn MagickSolarizeImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickSolarizeImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                  arg3: c_double) -> MagickBooleanType;
    fn MagickSparseColorImage(arg1: *mut MagickWand, arg2: ChannelType,
                              arg3: SparseColorMethod, arg4: size_t,
                              arg5: *c_double) -> MagickBooleanType;
    fn MagickSpliceImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                         arg4: ssize_t, arg5: ssize_t) -> MagickBooleanType;
    fn MagickSpreadImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickStatisticImage(arg1: *mut MagickWand, arg2: ChannelType,
                            arg3: StatisticType, arg4: size_t, arg5: size_t)
     -> MagickBooleanType;
    // TODO - This function causes a linker error
    //fn MagickStatisticImageChannel(arg1: *mut MagickWand, arg2: StatisticType,
    //                               arg3: size_t, arg4: size_t) ->
    // MagickBooleanType;
    fn MagickStripImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickSwirlImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickTintImage(arg1: *mut MagickWand, arg2: *PixelWand,
                       arg3: *PixelWand) -> MagickBooleanType;
    fn MagickTransformImageColorspace(arg1: *mut MagickWand,
                                      arg2: ColorspaceType) ->
     MagickBooleanType;
    fn MagickTransposeImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickTransverseImage(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickThresholdImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickThresholdImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                   arg3: c_double) -> MagickBooleanType;
    fn MagickThumbnailImage(arg1: *mut MagickWand, arg2: size_t, arg3: size_t)
     -> MagickBooleanType;
    fn MagickTrimImage(arg1: *mut MagickWand, arg2: c_double) ->
     MagickBooleanType;
    fn MagickUniqueImageColors(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickUnsharpMaskImage(arg1: *mut MagickWand, arg2: c_double,
                              arg3: c_double, arg4: c_double, arg5: c_double)
     -> MagickBooleanType;
    fn MagickUnsharpMaskImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                                     arg3: c_double, arg4: c_double,
                                     arg5: c_double, arg6: c_double) ->
     MagickBooleanType;
    fn MagickVignetteImage(arg1: *mut MagickWand, arg2: c_double,
                           arg3: c_double, arg4: ssize_t, arg5: ssize_t) ->
     MagickBooleanType;
    fn MagickWaveImage(arg1: *mut MagickWand, arg2: c_double, arg3: c_double)
     -> MagickBooleanType;
    fn MagickWhiteThresholdImage(arg1: *mut MagickWand, arg2: *PixelWand) ->
     MagickBooleanType;
    fn MagickWriteImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     MagickBooleanType;
    fn MagickWriteImageFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    fn MagickWriteImages(arg1: *mut MagickWand, arg2: *c_schar,
                         arg3: MagickBooleanType) -> MagickBooleanType;
    fn MagickWriteImagesFile(arg1: *mut MagickWand, arg2: *mut FILE) ->
     MagickBooleanType;
    fn MagickSetImageProgressMonitor(arg1: *mut MagickWand,
                                     arg2: MagickProgressMonitor,
                                     arg3: *mut c_void) ->
     MagickProgressMonitor;
    fn MagickAppendImages(arg1: *mut MagickWand, arg2: MagickBooleanType) ->
     *mut MagickWand;
    fn MagickCoalesceImages(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickCombineImages(arg1: *mut MagickWand, arg2: ChannelType) ->
     *mut MagickWand;
    fn MagickCompareImageChannels(arg1: *mut MagickWand, arg2: *MagickWand,
                                  arg3: ChannelType, arg4: MetricType,
                                  arg5: *mut c_double) -> *mut MagickWand;
    fn MagickCompareImages(arg1: *mut MagickWand, arg2: *MagickWand,
                           arg3: MetricType, arg4: *mut c_double) ->
     *mut MagickWand;
    fn MagickCompareImageLayers(arg1: *mut MagickWand, arg2: ImageLayerMethod)
     -> *mut MagickWand;
    fn MagickDeconstructImages(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickEvaluateImages(arg1: *mut MagickWand,
                            arg2: MagickEvaluateOperator) -> *mut MagickWand;
    fn MagickFxImage(arg1: *mut MagickWand, arg2: *c_schar) ->
     *mut MagickWand;
    fn MagickFxImageChannel(arg1: *mut MagickWand, arg2: ChannelType,
                            arg3: *c_schar) -> *mut MagickWand;
    fn MagickGetImage(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickGetImageClipMask(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickGetImageRegion(arg1: *mut MagickWand, arg2: size_t, arg3: size_t,
                            arg4: ssize_t, arg5: ssize_t) -> *mut MagickWand;
    fn MagickMergeImageLayers(arg1: *mut MagickWand, arg2: ImageLayerMethod)
     -> *mut MagickWand;
    fn MagickMorphImages(arg1: *mut MagickWand, arg2: size_t) ->
     *mut MagickWand;
    fn MagickMontageImage(arg1: *mut MagickWand, arg2: *DrawingWand,
                          arg3: *c_schar, arg4: *c_schar, arg5: MontageMode,
                          arg6: *c_schar) -> *mut MagickWand;
    fn MagickOptimizeImageLayers(arg1: *mut MagickWand) -> *mut MagickWand;
    fn MagickPreviewImages(wand: *mut MagickWand, arg1: PreviewType) ->
     *mut MagickWand;
    fn MagickSimilarityImage(arg1: *mut MagickWand, arg2: *MagickWand,
                             arg3: *mut RectangleInfo, arg4: *mut c_double) ->
     *mut MagickWand;
    fn MagickSmushImages(arg1: *mut MagickWand, arg2: MagickBooleanType,
                         arg3: ssize_t) -> *mut MagickWand;
    fn MagickSteganoImage(arg1: *mut MagickWand, arg2: *MagickWand,
                          arg3: ssize_t) -> *mut MagickWand;
    fn MagickStereoImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     *mut MagickWand;
    fn MagickTextureImage(arg1: *mut MagickWand, arg2: *MagickWand) ->
     *mut MagickWand;
    fn MagickTransformImage(arg1: *mut MagickWand, arg2: *c_schar,
                            arg3: *c_schar) -> *mut MagickWand;
    fn MagickGetImageOrientation(arg1: *mut MagickWand) -> OrientationType;
    fn MagickGetImageHistogram(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut *mut PixelWand;
    fn MagickGetImageRenderingIntent(arg1: *mut MagickWand) ->
     RenderingIntent;
    fn MagickGetImageUnits(arg1: *mut MagickWand) -> ResolutionType;
    fn MagickGetImageColors(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageCompressionQuality(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageDelay(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageChannelDepth(arg1: *mut MagickWand, arg2: ChannelType) ->
     size_t;
    fn MagickGetImageDepth(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageHeight(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageIterations(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageScene(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageTicksPerSecond(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageWidth(arg1: *mut MagickWand) -> size_t;
    fn MagickGetNumberImages(arg1: *mut MagickWand) -> size_t;
    fn MagickGetImageBlob(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut c_uchar;
    fn MagickGetImagesBlob(arg1: *mut MagickWand, arg2: *mut size_t) ->
     *mut c_uchar;
    fn MagickGetImageVirtualPixelMethod(arg1: *mut MagickWand) ->
     VirtualPixelMethod;
    fn MagickSetImageVirtualPixelMethod(arg1: *mut MagickWand,
                                        arg2: VirtualPixelMethod) ->
     VirtualPixelMethod;
    fn MagickCommandGenesis(arg1: *mut ImageInfo, arg2: MagickCommand,
                            arg3: c_int, arg4: *mut *mut c_schar,
                            arg5: *mut *mut c_schar, arg6: *mut ExceptionInfo)
     -> MagickBooleanType;
    fn MogrifyImage(arg1: *mut ImageInfo, arg2: c_int, arg3: *mut *c_schar,
                    arg4: *mut *mut Image, arg5: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn MogrifyImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                           arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn MogrifyImageInfo(arg1: *mut ImageInfo, arg2: c_int,
                        arg3: *mut *c_schar, arg4: *mut ExceptionInfo) ->
     MagickBooleanType;
    fn MogrifyImageList(arg1: *mut ImageInfo, arg2: c_int,
                        arg3: *mut *c_schar, arg4: *mut *mut Image,
                        arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn MogrifyImages(arg1: *mut ImageInfo, arg2: MagickBooleanType,
                     arg3: c_int, arg4: *mut *c_schar, arg5: *mut *mut Image,
                     arg6: *mut ExceptionInfo) -> MagickBooleanType;
    fn MontageImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                           arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                           arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn StreamImageCommand(arg1: *mut ImageInfo, arg2: c_int,
                          arg3: *mut *mut c_schar, arg4: *mut *mut c_schar,
                          arg5: *mut ExceptionInfo) -> MagickBooleanType;
    fn GetWandViewException(arg1: *WandView, arg2: *mut ExceptionType) ->
     *mut c_schar;
    fn DuplexTransferWandViewIterator(arg1: *mut WandView,
                                      arg2: *mut WandView,
                                      arg3: *mut WandView,
                                      arg4: DuplexTransferWandViewMethod,
                                      arg5: *mut c_void) -> MagickBooleanType;
    fn GetWandViewIterator(arg1: *mut WandView, arg2: GetWandViewMethod,
                           arg3: *mut c_void) -> MagickBooleanType;
    fn IsWandView(arg1: *WandView) -> MagickBooleanType;
    fn SetWandViewIterator(arg1: *mut WandView, arg2: SetWandViewMethod,
                           arg3: *mut c_void) -> MagickBooleanType;
    fn TransferWandViewIterator(arg1: *mut WandView, arg2: *mut WandView,
                                arg3: TransferWandViewMethod,
                                arg4: *mut c_void) -> MagickBooleanType;
    fn UpdateWandViewIterator(arg1: *mut WandView, arg2: UpdateWandViewMethod,
                              arg3: *mut c_void) -> MagickBooleanType;
    fn GetWandViewWand(arg1: *WandView) -> *mut MagickWand;
    fn GetWandViewPixels(arg1: *WandView) -> *mut *mut PixelWand;
    fn GetWandViewExtent(arg1: *WandView) -> RectangleInfo;
    fn SetWandViewDescription(arg1: *mut WandView, arg2: *c_schar);
    fn SetWandViewThreads(arg1: *mut WandView, arg2: size_t);
    fn CloneWandView(arg1: *WandView) -> *mut WandView;
    fn DestroyWandView(arg1: *mut WandView) -> *mut WandView;
    fn NewWandView(arg1: *mut MagickWand) -> *mut WandView;
    fn NewWandViewExtent(arg1: *mut MagickWand, arg2: ssize_t, arg3: ssize_t,
                         arg4: size_t, arg5: size_t) -> *mut WandView;
    fn MagickGetException(arg1: *MagickWand, arg2: *mut ExceptionType) ->
     *mut c_schar;
    fn MagickGetExceptionType(arg1: *MagickWand) -> ExceptionType;
    fn IsMagickWand(arg1: *MagickWand) -> MagickBooleanType;
    fn MagickClearException(arg1: *mut MagickWand) -> MagickBooleanType;
    fn MagickSetIteratorIndex(arg1: *mut MagickWand, arg2: ssize_t) ->
     MagickBooleanType;
    fn CloneMagickWand(arg1: *MagickWand) -> *mut MagickWand;
    fn DestroyMagickWand(arg1: *mut MagickWand) -> *mut MagickWand;
    fn NewMagickWand() -> *mut MagickWand;
    fn NewMagickWandFromImage(arg1: *Image) -> *mut MagickWand;
    fn MagickGetIteratorIndex(arg1: *mut MagickWand) -> ssize_t;
    fn ClearMagickWand(arg1: *mut MagickWand);
    fn MagickWandGenesis();
    fn MagickWandTerminus();
    fn MagickRelinquishMemory(arg1: *mut c_void) -> *mut c_void;
    fn MagickResetIterator(arg1: *mut MagickWand);
    fn MagickSetFirstIterator(arg1: *mut MagickWand);
    fn MagickSetLastIterator(arg1: *mut MagickWand);
}
